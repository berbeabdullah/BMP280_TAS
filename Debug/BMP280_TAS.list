
BMP280_TAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009434  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b68  080095d8  080095d8  0000a5d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a140  0800a140  0000c1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a140  0800a140  0000b140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a148  0800a148  0000c1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a148  0800a148  0000b148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a14c  0800a14c  0000b14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800a150  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000087c  200001f8  0800a348  0000c1f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a74  0800a348  0000ca74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c1f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012102  00000000  00000000  0000c228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b70  00000000  00000000  0001e32a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c8  00000000  00000000  00020ea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d19  00000000  00000000  00021f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001886f  00000000  00000000  00022c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000156bc  00000000  00000000  0003b4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000937de  00000000  00000000  00050bac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e438a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a8c  00000000  00000000  000e43d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000e9e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f8 	.word	0x200001f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080095bc 	.word	0x080095bc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001fc 	.word	0x200001fc
 80001dc:	080095bc 	.word	0x080095bc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9b5 	b.w	8000fe4 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b96a 	b.w	8000fe4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	460c      	mov	r4, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14e      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d34:	4694      	mov	ip, r2
 8000d36:	458c      	cmp	ip, r1
 8000d38:	4686      	mov	lr, r0
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	d962      	bls.n	8000e06 <__udivmoddi4+0xde>
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	4091      	lsls	r1, r2
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	4319      	orrs	r1, r3
 8000d52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5a:	fa1f f68c 	uxth.w	r6, ip
 8000d5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb07 1114 	mls	r1, r7, r4, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb04 f106 	mul.w	r1, r4, r6
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7e:	f080 8112 	bcs.w	8000fa6 <__udivmoddi4+0x27e>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 810f 	bls.w	8000fa6 <__udivmoddi4+0x27e>
 8000d88:	3c02      	subs	r4, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	fa1f f38e 	uxth.w	r3, lr
 8000d92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d96:	fb07 1110 	mls	r1, r7, r0, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f606 	mul.w	r6, r0, r6
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x94>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dae:	f080 80fc 	bcs.w	8000faa <__udivmoddi4+0x282>
 8000db2:	429e      	cmp	r6, r3
 8000db4:	f240 80f9 	bls.w	8000faa <__udivmoddi4+0x282>
 8000db8:	4463      	add	r3, ip
 8000dba:	3802      	subs	r0, #2
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa6>
 8000dc6:	40d3      	lsrs	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e9c5 3200 	strd	r3, r2, [r5]
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xba>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb4>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa6>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d146      	bne.n	8000e78 <__udivmoddi4+0x150>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xcc>
 8000dee:	4290      	cmp	r0, r2
 8000df0:	f0c0 80f0 	bcc.w	8000fd4 <__udivmoddi4+0x2ac>
 8000df4:	1a86      	subs	r6, r0, r2
 8000df6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0e6      	beq.n	8000dce <__udivmoddi4+0xa6>
 8000e00:	e9c5 6300 	strd	r6, r3, [r5]
 8000e04:	e7e3      	b.n	8000dce <__udivmoddi4+0xa6>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__udivmoddi4+0x204>
 8000e0c:	eba1 040c 	sub.w	r4, r1, ip
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e22:	fb08 4416 	mls	r4, r8, r6, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb07 f006 	mul.w	r0, r7, r6
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x11c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x11a>
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	f200 80cd 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e42:	4626      	mov	r6, r4
 8000e44:	1a1c      	subs	r4, r3, r0
 8000e46:	fa1f f38e 	uxth.w	r3, lr
 8000e4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb00 f707 	mul.w	r7, r0, r7
 8000e5a:	429f      	cmp	r7, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x148>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x146>
 8000e68:	429f      	cmp	r7, r3
 8000e6a:	f200 80b0 	bhi.w	8000fce <__udivmoddi4+0x2a6>
 8000e6e:	4620      	mov	r0, r4
 8000e70:	1bdb      	subs	r3, r3, r7
 8000e72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0x9c>
 8000e78:	f1c1 0620 	rsb	r6, r1, #32
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e82:	431f      	orrs	r7, r3
 8000e84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e88:	fa04 f301 	lsl.w	r3, r4, r1
 8000e8c:	ea43 030c 	orr.w	r3, r3, ip
 8000e90:	40f4      	lsrs	r4, r6
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	0c38      	lsrs	r0, r7, #16
 8000e98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea0:	fa1f fc87 	uxth.w	ip, r7
 8000ea4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eac:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb0:	45a1      	cmp	r9, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	d90a      	bls.n	8000ece <__udivmoddi4+0x1a6>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ebe:	f080 8084 	bcs.w	8000fca <__udivmoddi4+0x2a2>
 8000ec2:	45a1      	cmp	r9, r4
 8000ec4:	f240 8081 	bls.w	8000fca <__udivmoddi4+0x2a2>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	eba4 0409 	sub.w	r4, r4, r9
 8000ed2:	fa1f f983 	uxth.w	r9, r3
 8000ed6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eda:	fb00 4413 	mls	r4, r0, r3, r4
 8000ede:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee6:	45a4      	cmp	ip, r4
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1d2>
 8000eea:	193c      	adds	r4, r7, r4
 8000eec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ef0:	d267      	bcs.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d965      	bls.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef6:	3b02      	subs	r3, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efe:	fba0 9302 	umull	r9, r3, r0, r2
 8000f02:	eba4 040c 	sub.w	r4, r4, ip
 8000f06:	429c      	cmp	r4, r3
 8000f08:	46ce      	mov	lr, r9
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	d351      	bcc.n	8000fb2 <__udivmoddi4+0x28a>
 8000f0e:	d04e      	beq.n	8000fae <__udivmoddi4+0x286>
 8000f10:	b155      	cbz	r5, 8000f28 <__udivmoddi4+0x200>
 8000f12:	ebb8 030e 	subs.w	r3, r8, lr
 8000f16:	eb64 040c 	sbc.w	r4, r4, ip
 8000f1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	431e      	orrs	r6, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	e9c5 6400 	strd	r6, r4, [r5]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e750      	b.n	8000dce <__udivmoddi4+0xa6>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f103 	lsr.w	r1, r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa24 f303 	lsr.w	r3, r4, r3
 8000f3c:	4094      	lsls	r4, r2
 8000f3e:	430c      	orrs	r4, r1
 8000f40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f50:	fb08 3110 	mls	r1, r8, r0, r3
 8000f54:	0c23      	lsrs	r3, r4, #16
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f107 	mul.w	r1, r0, r7
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x24c>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f6a:	d22c      	bcs.n	8000fc6 <__udivmoddi4+0x29e>
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d92a      	bls.n	8000fc6 <__udivmoddi4+0x29e>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1a5b      	subs	r3, r3, r1
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f84:	fb01 f307 	mul.w	r3, r1, r7
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x276>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f94:	d213      	bcs.n	8000fbe <__udivmoddi4+0x296>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d911      	bls.n	8000fbe <__udivmoddi4+0x296>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa4:	e739      	b.n	8000e1a <__udivmoddi4+0xf2>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	e6f0      	b.n	8000d8c <__udivmoddi4+0x64>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e706      	b.n	8000dbc <__udivmoddi4+0x94>
 8000fae:	45c8      	cmp	r8, r9
 8000fb0:	d2ae      	bcs.n	8000f10 <__udivmoddi4+0x1e8>
 8000fb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fba:	3801      	subs	r0, #1
 8000fbc:	e7a8      	b.n	8000f10 <__udivmoddi4+0x1e8>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	e7ed      	b.n	8000f9e <__udivmoddi4+0x276>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e799      	b.n	8000efa <__udivmoddi4+0x1d2>
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	e7d4      	b.n	8000f74 <__udivmoddi4+0x24c>
 8000fca:	46d6      	mov	lr, sl
 8000fcc:	e77f      	b.n	8000ece <__udivmoddi4+0x1a6>
 8000fce:	4463      	add	r3, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e74d      	b.n	8000e70 <__udivmoddi4+0x148>
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e70f      	b.n	8000dfc <__udivmoddi4+0xd4>
 8000fdc:	3e02      	subs	r6, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	e730      	b.n	8000e44 <__udivmoddi4+0x11c>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <TrimRead>:

signed short		dig_T2, dig_T3, \
					dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

void TrimRead(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af04      	add	r7, sp, #16
	uint8_t trimdata[24];
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDR, 0x88,1,trimdata, 24,HAL_MAX_DELAY);
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2318      	movs	r3, #24
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2288      	movs	r2, #136	@ 0x88
 8001000:	21ec      	movs	r1, #236	@ 0xec
 8001002:	483a      	ldr	r0, [pc, #232]	@ (80010ec <TrimRead+0x104>)
 8001004:	f002 fa72 	bl	80034ec <HAL_I2C_Mem_Read>

	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	783b      	ldrb	r3, [r7, #0]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b35      	ldr	r3, [pc, #212]	@ (80010f0 <TrimRead+0x108>)
 800101a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21a      	sxth	r2, r3
 8001022:	78bb      	ldrb	r3, [r7, #2]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21a      	sxth	r2, r3
 800102a:	4b32      	ldr	r3, [pc, #200]	@ (80010f4 <TrimRead+0x10c>)
 800102c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800102e:	797b      	ldrb	r3, [r7, #5]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	793b      	ldrb	r3, [r7, #4]
 8001036:	b21b      	sxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b21a      	sxth	r2, r3
 800103c:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <TrimRead+0x110>)
 800103e:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[6];
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21b      	sxth	r3, r3
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <TrimRead+0x114>)
 8001052:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[8];
 8001054:	7a7b      	ldrb	r3, [r7, #9]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21a      	sxth	r2, r3
 800105a:	7a3b      	ldrb	r3, [r7, #8]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <TrimRead+0x118>)
 8001064:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	7abb      	ldrb	r3, [r7, #10]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <TrimRead+0x11c>)
 8001076:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001078:	7b7b      	ldrb	r3, [r7, #13]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	7b3b      	ldrb	r3, [r7, #12]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <TrimRead+0x120>)
 8001088:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <TrimRead+0x124>)
 800109a:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 800109c:	7c7b      	ldrb	r3, [r7, #17]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	7c3b      	ldrb	r3, [r7, #16]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <TrimRead+0x128>)
 80010ac:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010ae:	7cfb      	ldrb	r3, [r7, #19]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	7cbb      	ldrb	r3, [r7, #18]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <TrimRead+0x12c>)
 80010be:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010c0:	7d7b      	ldrb	r3, [r7, #21]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	7d3b      	ldrb	r3, [r7, #20]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <TrimRead+0x130>)
 80010d0:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	7dbb      	ldrb	r3, [r7, #22]
 80010da:	b21b      	sxth	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <TrimRead+0x134>)
 80010e2:	801a      	strh	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000023c 	.word	0x2000023c
 80010f0:	20000220 	.word	0x20000220
 80010f4:	20000224 	.word	0x20000224
 80010f8:	20000226 	.word	0x20000226
 80010fc:	20000222 	.word	0x20000222
 8001100:	20000228 	.word	0x20000228
 8001104:	2000022a 	.word	0x2000022a
 8001108:	2000022c 	.word	0x2000022c
 800110c:	2000022e 	.word	0x2000022e
 8001110:	20000230 	.word	0x20000230
 8001114:	20000232 	.word	0x20000232
 8001118:	20000234 	.word	0x20000234
 800111c:	20000236 	.word	0x20000236

08001120 <BMP280_Config>:

int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b089      	sub	sp, #36	@ 0x24
 8001124:	af04      	add	r7, sp, #16
 8001126:	4604      	mov	r4, r0
 8001128:	4608      	mov	r0, r1
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	4623      	mov	r3, r4
 8001130:	71fb      	strb	r3, [r7, #7]
 8001132:	4603      	mov	r3, r0
 8001134:	71bb      	strb	r3, [r7, #6]
 8001136:	460b      	mov	r3, r1
 8001138:	717b      	strb	r3, [r7, #5]
 800113a:	4613      	mov	r3, r2
 800113c:	713b      	strb	r3, [r7, #4]
	TrimRead();
 800113e:	f7ff ff53 	bl	8000fe8 <TrimRead>

	uint8_t datatowrite = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	73bb      	strb	r3, [r7, #14]

	datatowrite = 0xB6;
 800114a:	23b6      	movs	r3, #182	@ 0xb6
 800114c:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDR, REG_RESET, 1, &datatowrite, 1, 1000) != HAL_OK)
 800114e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	f107 030f 	add.w	r3, r7, #15
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	22e0      	movs	r2, #224	@ 0xe0
 8001162:	21ec      	movs	r1, #236	@ 0xec
 8001164:	4840      	ldr	r0, [pc, #256]	@ (8001268 <BMP280_Config+0x148>)
 8001166:	f002 f8c7 	bl	80032f8 <HAL_I2C_Mem_Write>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <BMP280_Config+0x56>
	{
		return -1;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	e074      	b.n	8001260 <BMP280_Config+0x140>
	}
	HAL_Delay(100);
 8001176:	2064      	movs	r0, #100	@ 0x64
 8001178:	f001 fc8c 	bl	8002a94 <HAL_Delay>

	datatowrite = (t_sb << 5) | (filter << 2);
 800117c:	793b      	ldrb	r3, [r7, #4]
 800117e:	015b      	lsls	r3, r3, #5
 8001180:	b25a      	sxtb	r2, r3
 8001182:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b25b      	sxtb	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDR, REG_CONFIG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2301      	movs	r3, #1
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	f107 030f 	add.w	r3, r7, #15
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	22f5      	movs	r2, #245	@ 0xf5
 80011a6:	21ec      	movs	r1, #236	@ 0xec
 80011a8:	482f      	ldr	r0, [pc, #188]	@ (8001268 <BMP280_Config+0x148>)
 80011aa:	f002 f8a5 	bl	80032f8 <HAL_I2C_Mem_Write>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <BMP280_Config+0x9a>
	{
		return -1;
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	e052      	b.n	8001260 <BMP280_Config+0x140>
	}
	HAL_Delay(100);
 80011ba:	2064      	movs	r0, #100	@ 0x64
 80011bc:	f001 fc6a 	bl	8002a94 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDR, REG_CONFIG, 1, &datacheck, 1, 1000);
 80011c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2301      	movs	r3, #1
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	f107 030e 	add.w	r3, r7, #14
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	22f5      	movs	r2, #245	@ 0xf5
 80011d4:	21ec      	movs	r1, #236	@ 0xec
 80011d6:	4824      	ldr	r0, [pc, #144]	@ (8001268 <BMP280_Config+0x148>)
 80011d8:	f002 f988 	bl	80034ec <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80011dc:	7bba      	ldrb	r2, [r7, #14]
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d002      	beq.n	80011ea <BMP280_Config+0xca>
	{
		return -1;
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	e03a      	b.n	8001260 <BMP280_Config+0x140>
	}

	datatowrite = (osrs_t << 5) | (osrs_p << 2) | mode;
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	015b      	lsls	r3, r3, #5
 80011ee:	b25a      	sxtb	r2, r3
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25a      	sxtb	r2, r3
 80011fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011fe:	4313      	orrs	r3, r2
 8001200:	b25b      	sxtb	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDR, REG_CTRL_MEAS, 1, &datatowrite, 1, 1000)!= HAL_OK)
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	2301      	movs	r3, #1
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	f107 030f 	add.w	r3, r7, #15
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	22f4      	movs	r2, #244	@ 0xf4
 800121a:	21ec      	movs	r1, #236	@ 0xec
 800121c:	4812      	ldr	r0, [pc, #72]	@ (8001268 <BMP280_Config+0x148>)
 800121e:	f002 f86b 	bl	80032f8 <HAL_I2C_Mem_Write>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <BMP280_Config+0x10e>
	{
		return -1;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	e018      	b.n	8001260 <BMP280_Config+0x140>
	}
	HAL_Delay(100);
 800122e:	2064      	movs	r0, #100	@ 0x64
 8001230:	f001 fc30 	bl	8002a94 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDR, REG_CTRL_MEAS, 1, &datacheck, 1, 1000);
 8001234:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	2301      	movs	r3, #1
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	f107 030e 	add.w	r3, r7, #14
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	22f4      	movs	r2, #244	@ 0xf4
 8001248:	21ec      	movs	r1, #236	@ 0xec
 800124a:	4807      	ldr	r0, [pc, #28]	@ (8001268 <BMP280_Config+0x148>)
 800124c:	f002 f94e 	bl	80034ec <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001250:	7bba      	ldrb	r2, [r7, #14]
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	429a      	cmp	r2, r3
 8001256:	d002      	beq.n	800125e <BMP280_Config+0x13e>
	{
		return -1;
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	e000      	b.n	8001260 <BMP280_Config+0x140>
	}
	return 0;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	2000023c 	.word	0x2000023c

0800126c <BMP280_ReadRaw>:

int BMP280_ReadRaw(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af04      	add	r7, sp, #16
	uint8_t RawData[6];
	// check the device id before reading
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDR, REG_ID, 1, &chipID, 1, 1000);
 8001272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	2301      	movs	r3, #1
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <BMP280_ReadRaw+0x84>)
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	22d0      	movs	r2, #208	@ 0xd0
 8001284:	21ec      	movs	r1, #236	@ 0xec
 8001286:	481b      	ldr	r0, [pc, #108]	@ (80012f4 <BMP280_ReadRaw+0x88>)
 8001288:	f002 f930 	bl	80034ec <HAL_I2C_Mem_Read>
	if(chipID == 0x58)
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <BMP280_ReadRaw+0x84>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b58      	cmp	r3, #88	@ 0x58
 8001292:	d126      	bne.n	80012e2 <BMP280_ReadRaw+0x76>
	{
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDR, REG_PRESS, 1, RawData, 6, HAL_MAX_DELAY);
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	9302      	str	r3, [sp, #8]
 800129a:	2306      	movs	r3, #6
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	463b      	mov	r3, r7
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	22f7      	movs	r2, #247	@ 0xf7
 80012a6:	21ec      	movs	r1, #236	@ 0xec
 80012a8:	4812      	ldr	r0, [pc, #72]	@ (80012f4 <BMP280_ReadRaw+0x88>)
 80012aa:	f002 f91f 	bl	80034ec <HAL_I2C_Mem_Read>
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80012ae:	783b      	ldrb	r3, [r7, #0]
 80012b0:	031a      	lsls	r2, r3, #12
 80012b2:	787b      	ldrb	r3, [r7, #1]
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4313      	orrs	r3, r2
 80012b8:	78ba      	ldrb	r2, [r7, #2]
 80012ba:	0912      	lsrs	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	4313      	orrs	r3, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <BMP280_ReadRaw+0x8c>)
 80012c4:	601a      	str	r2, [r3, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	031a      	lsls	r2, r3, #12
 80012ca:	793b      	ldrb	r3, [r7, #4]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	4313      	orrs	r3, r2
 80012d0:	797a      	ldrb	r2, [r7, #5]
 80012d2:	0912      	lsrs	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	4313      	orrs	r3, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <BMP280_ReadRaw+0x90>)
 80012dc:	601a      	str	r2, [r3, #0]

		return 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	e001      	b.n	80012e6 <BMP280_ReadRaw+0x7a>
	}
	else return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000214 	.word	0x20000214
 80012f4:	2000023c 	.word	0x2000023c
 80012f8:	2000021c 	.word	0x2000021c
 80012fc:	20000218 	.word	0x20000218

08001300 <BMP280_compensate_T_int32>:

}

int32_t t_fine;
int32_t BMP280_compensate_T_int32(int32_t adc_T)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	10da      	asrs	r2, r3, #3
 800130c:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <BMP280_compensate_T_int32+0x74>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	4a18      	ldr	r2, [pc, #96]	@ (8001378 <BMP280_compensate_T_int32+0x78>)
 8001316:	f9b2 2000 	ldrsh.w	r2, [r2]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	12db      	asrs	r3, r3, #11
 8001320:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	111b      	asrs	r3, r3, #4
 8001326:	4a13      	ldr	r2, [pc, #76]	@ (8001374 <BMP280_compensate_T_int32+0x74>)
 8001328:	8812      	ldrh	r2, [r2, #0]
 800132a:	1a9b      	subs	r3, r3, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	1112      	asrs	r2, r2, #4
 8001330:	4910      	ldr	r1, [pc, #64]	@ (8001374 <BMP280_compensate_T_int32+0x74>)
 8001332:	8809      	ldrh	r1, [r1, #0]
 8001334:	1a52      	subs	r2, r2, r1
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	131b      	asrs	r3, r3, #12
 800133c:	4a0f      	ldr	r2, [pc, #60]	@ (800137c <BMP280_compensate_T_int32+0x7c>)
 800133e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	139b      	asrs	r3, r3, #14
 8001348:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4413      	add	r3, r2
 8001350:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <BMP280_compensate_T_int32+0x80>)
 8001352:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <BMP280_compensate_T_int32+0x80>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3380      	adds	r3, #128	@ 0x80
 8001360:	121b      	asrs	r3, r3, #8
 8001362:	60fb      	str	r3, [r7, #12]
	return T;
 8001364:	68fb      	ldr	r3, [r7, #12]
}
 8001366:	4618      	mov	r0, r3
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000220 	.word	0x20000220
 8001378:	20000224 	.word	0x20000224
 800137c:	20000226 	.word	0x20000226
 8001380:	20000238 	.word	0x20000238

08001384 <BMP280_compensate_P_int64>:

uint32_t BMP280_compensate_P_int64(int32_t adc_P)
{
 8001384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001388:	b0ca      	sub	sp, #296	@ 0x128
 800138a:	af00      	add	r7, sp, #0
 800138c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001390:	4baf      	ldr	r3, [pc, #700]	@ (8001650 <BMP280_compensate_P_int64+0x2cc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	17da      	asrs	r2, r3, #31
 8001396:	461c      	mov	r4, r3
 8001398:	4615      	mov	r5, r2
 800139a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800139e:	f145 3bff 	adc.w	fp, r5, #4294967295
 80013a2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80013a6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013ae:	fb03 f102 	mul.w	r1, r3, r2
 80013b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	18ca      	adds	r2, r1, r3
 80013c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013c4:	fba3 8903 	umull	r8, r9, r3, r3
 80013c8:	eb02 0309 	add.w	r3, r2, r9
 80013cc:	4699      	mov	r9, r3
 80013ce:	4ba1      	ldr	r3, [pc, #644]	@ (8001654 <BMP280_compensate_P_int64+0x2d0>)
 80013d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	17da      	asrs	r2, r3, #31
 80013d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80013dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80013e0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80013e4:	4603      	mov	r3, r0
 80013e6:	fb03 f209 	mul.w	r2, r3, r9
 80013ea:	460b      	mov	r3, r1
 80013ec:	fb08 f303 	mul.w	r3, r8, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	4602      	mov	r2, r0
 80013f4:	fba8 1202 	umull	r1, r2, r8, r2
 80013f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80013fc:	460a      	mov	r2, r1
 80013fe:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001406:	4413      	add	r3, r2
 8001408:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800140c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001410:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001414:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001418:	4b8f      	ldr	r3, [pc, #572]	@ (8001658 <BMP280_compensate_P_int64+0x2d4>)
 800141a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141e:	b21b      	sxth	r3, r3
 8001420:	17da      	asrs	r2, r3, #31
 8001422:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001426:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800142a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800142e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001432:	462a      	mov	r2, r5
 8001434:	fb02 f203 	mul.w	r2, r2, r3
 8001438:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800143c:	4621      	mov	r1, r4
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	441a      	add	r2, r3
 8001444:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001448:	4621      	mov	r1, r4
 800144a:	fba3 1301 	umull	r1, r3, r3, r1
 800144e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001452:	460b      	mov	r3, r1
 8001454:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800145c:	18d3      	adds	r3, r2, r3
 800145e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001462:	f04f 0000 	mov.w	r0, #0
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800146e:	462b      	mov	r3, r5
 8001470:	0459      	lsls	r1, r3, #17
 8001472:	4623      	mov	r3, r4
 8001474:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001478:	4623      	mov	r3, r4
 800147a:	0458      	lsls	r0, r3, #17
 800147c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001480:	1814      	adds	r4, r2, r0
 8001482:	643c      	str	r4, [r7, #64]	@ 0x40
 8001484:	414b      	adcs	r3, r1
 8001486:	647b      	str	r3, [r7, #68]	@ 0x44
 8001488:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800148c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001490:	4b72      	ldr	r3, [pc, #456]	@ (800165c <BMP280_compensate_P_int64+0x2d8>)
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	b21b      	sxth	r3, r3
 8001498:	17da      	asrs	r2, r3, #31
 800149a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800149e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014ae:	00d9      	lsls	r1, r3, #3
 80014b0:	2000      	movs	r0, #0
 80014b2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80014b6:	1814      	adds	r4, r2, r0
 80014b8:	63bc      	str	r4, [r7, #56]	@ 0x38
 80014ba:	414b      	adcs	r3, r1
 80014bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014be:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80014c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80014c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80014ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014ce:	fb03 f102 	mul.w	r1, r3, r2
 80014d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80014d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	18ca      	adds	r2, r1, r3
 80014e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014e4:	fba3 1303 	umull	r1, r3, r3, r3
 80014e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80014ec:	460b      	mov	r3, r1
 80014ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80014f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80014f6:	18d3      	adds	r3, r2, r3
 80014f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80014fc:	4b58      	ldr	r3, [pc, #352]	@ (8001660 <BMP280_compensate_P_int64+0x2dc>)
 80014fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001502:	b21b      	sxth	r3, r3
 8001504:	17da      	asrs	r2, r3, #31
 8001506:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800150a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800150e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001512:	462b      	mov	r3, r5
 8001514:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001518:	4642      	mov	r2, r8
 800151a:	fb02 f203 	mul.w	r2, r2, r3
 800151e:	464b      	mov	r3, r9
 8001520:	4621      	mov	r1, r4
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	4622      	mov	r2, r4
 800152a:	4641      	mov	r1, r8
 800152c:	fba2 1201 	umull	r1, r2, r2, r1
 8001530:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001534:	460a      	mov	r2, r1
 8001536:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800153a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800153e:	4413      	add	r3, r2
 8001540:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001544:	f04f 0000 	mov.w	r0, #0
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001550:	4623      	mov	r3, r4
 8001552:	0a18      	lsrs	r0, r3, #8
 8001554:	462b      	mov	r3, r5
 8001556:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800155a:	462b      	mov	r3, r5
 800155c:	1219      	asrs	r1, r3, #8
 800155e:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <BMP280_compensate_P_int64+0x2e0>)
 8001560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001564:	b21b      	sxth	r3, r3
 8001566:	17da      	asrs	r2, r3, #31
 8001568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800156c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001570:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001574:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001578:	464a      	mov	r2, r9
 800157a:	fb02 f203 	mul.w	r2, r2, r3
 800157e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001582:	4644      	mov	r4, r8
 8001584:	fb04 f303 	mul.w	r3, r4, r3
 8001588:	441a      	add	r2, r3
 800158a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800158e:	4644      	mov	r4, r8
 8001590:	fba3 4304 	umull	r4, r3, r3, r4
 8001594:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001598:	4623      	mov	r3, r4
 800159a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800159e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80015a2:	18d3      	adds	r3, r2, r3
 80015a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80015b4:	464c      	mov	r4, r9
 80015b6:	0323      	lsls	r3, r4, #12
 80015b8:	4644      	mov	r4, r8
 80015ba:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80015be:	4644      	mov	r4, r8
 80015c0:	0322      	lsls	r2, r4, #12
 80015c2:	1884      	adds	r4, r0, r2
 80015c4:	633c      	str	r4, [r7, #48]	@ 0x30
 80015c6:	eb41 0303 	adc.w	r3, r1, r3
 80015ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80015cc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80015d0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80015d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80015d8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80015dc:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80015e0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80015e4:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <BMP280_compensate_P_int64+0x2e4>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2200      	movs	r2, #0
 80015ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015f4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015f8:	462b      	mov	r3, r5
 80015fa:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80015fe:	4642      	mov	r2, r8
 8001600:	fb02 f203 	mul.w	r2, r2, r3
 8001604:	464b      	mov	r3, r9
 8001606:	4621      	mov	r1, r4
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
 800160e:	4622      	mov	r2, r4
 8001610:	4641      	mov	r1, r8
 8001612:	fba2 1201 	umull	r1, r2, r2, r1
 8001616:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800161a:	460a      	mov	r2, r1
 800161c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001620:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001624:	4413      	add	r3, r2
 8001626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001636:	4629      	mov	r1, r5
 8001638:	104a      	asrs	r2, r1, #1
 800163a:	4629      	mov	r1, r5
 800163c:	17cb      	asrs	r3, r1, #31
 800163e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001642:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001646:	4313      	orrs	r3, r2
 8001648:	d110      	bne.n	800166c <BMP280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 800164a:	2300      	movs	r3, #0
 800164c:	e154      	b.n	80018f8 <BMP280_compensate_P_int64+0x574>
 800164e:	bf00      	nop
 8001650:	20000238 	.word	0x20000238
 8001654:	20000230 	.word	0x20000230
 8001658:	2000022e 	.word	0x2000022e
 800165c:	2000022c 	.word	0x2000022c
 8001660:	2000022a 	.word	0x2000022a
 8001664:	20000228 	.word	0x20000228
 8001668:	20000222 	.word	0x20000222
	}
	p = 1048576-adc_P;
 800166c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001670:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001674:	17da      	asrs	r2, r3, #31
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001678:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800167a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800167e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001682:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001686:	105b      	asrs	r3, r3, #1
 8001688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800168c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001690:	07db      	lsls	r3, r3, #31
 8001692:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001696:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800169a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800169e:	4621      	mov	r1, r4
 80016a0:	1a89      	subs	r1, r1, r2
 80016a2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80016a4:	4629      	mov	r1, r5
 80016a6:	eb61 0303 	sbc.w	r3, r1, r3
 80016aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016ac:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016b0:	4622      	mov	r2, r4
 80016b2:	462b      	mov	r3, r5
 80016b4:	1891      	adds	r1, r2, r2
 80016b6:	6239      	str	r1, [r7, #32]
 80016b8:	415b      	adcs	r3, r3
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80016bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016c0:	4621      	mov	r1, r4
 80016c2:	1851      	adds	r1, r2, r1
 80016c4:	61b9      	str	r1, [r7, #24]
 80016c6:	4629      	mov	r1, r5
 80016c8:	414b      	adcs	r3, r1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80016d8:	4649      	mov	r1, r9
 80016da:	018b      	lsls	r3, r1, #6
 80016dc:	4641      	mov	r1, r8
 80016de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e2:	4641      	mov	r1, r8
 80016e4:	018a      	lsls	r2, r1, #6
 80016e6:	4641      	mov	r1, r8
 80016e8:	1889      	adds	r1, r1, r2
 80016ea:	6139      	str	r1, [r7, #16]
 80016ec:	4649      	mov	r1, r9
 80016ee:	eb43 0101 	adc.w	r1, r3, r1
 80016f2:	6179      	str	r1, [r7, #20]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001700:	4649      	mov	r1, r9
 8001702:	008b      	lsls	r3, r1, #2
 8001704:	4641      	mov	r1, r8
 8001706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800170a:	4641      	mov	r1, r8
 800170c:	008a      	lsls	r2, r1, #2
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	4603      	mov	r3, r0
 8001714:	4622      	mov	r2, r4
 8001716:	189b      	adds	r3, r3, r2
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	460b      	mov	r3, r1
 800171c:	462a      	mov	r2, r5
 800171e:	eb42 0303 	adc.w	r3, r2, r3
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001730:	4649      	mov	r1, r9
 8001732:	008b      	lsls	r3, r1, #2
 8001734:	4641      	mov	r1, r8
 8001736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800173a:	4641      	mov	r1, r8
 800173c:	008a      	lsls	r2, r1, #2
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	4603      	mov	r3, r0
 8001744:	4622      	mov	r2, r4
 8001746:	189b      	adds	r3, r3, r2
 8001748:	673b      	str	r3, [r7, #112]	@ 0x70
 800174a:	462b      	mov	r3, r5
 800174c:	460a      	mov	r2, r1
 800174e:	eb42 0303 	adc.w	r3, r2, r3
 8001752:	677b      	str	r3, [r7, #116]	@ 0x74
 8001754:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001758:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800175c:	f7ff fa7c 	bl	8000c58 <__aeabi_ldivmod>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001768:	4b66      	ldr	r3, [pc, #408]	@ (8001904 <BMP280_compensate_P_int64+0x580>)
 800176a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176e:	b21b      	sxth	r3, r3
 8001770:	17da      	asrs	r2, r3, #31
 8001772:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001774:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001776:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800177a:	f04f 0000 	mov.w	r0, #0
 800177e:	f04f 0100 	mov.w	r1, #0
 8001782:	0b50      	lsrs	r0, r2, #13
 8001784:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001788:	1359      	asrs	r1, r3, #13
 800178a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800178e:	462b      	mov	r3, r5
 8001790:	fb00 f203 	mul.w	r2, r0, r3
 8001794:	4623      	mov	r3, r4
 8001796:	fb03 f301 	mul.w	r3, r3, r1
 800179a:	4413      	add	r3, r2
 800179c:	4622      	mov	r2, r4
 800179e:	fba2 1200 	umull	r1, r2, r2, r0
 80017a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80017a6:	460a      	mov	r2, r1
 80017a8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80017ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80017b0:	4413      	add	r3, r2
 80017b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80017b6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80017ba:	f04f 0000 	mov.w	r0, #0
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	0b50      	lsrs	r0, r2, #13
 80017c4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80017c8:	1359      	asrs	r1, r3, #13
 80017ca:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80017ce:	462b      	mov	r3, r5
 80017d0:	fb00 f203 	mul.w	r2, r0, r3
 80017d4:	4623      	mov	r3, r4
 80017d6:	fb03 f301 	mul.w	r3, r3, r1
 80017da:	4413      	add	r3, r2
 80017dc:	4622      	mov	r2, r4
 80017de:	fba2 1200 	umull	r1, r2, r2, r0
 80017e2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80017e6:	460a      	mov	r2, r1
 80017e8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80017ec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80017f0:	4413      	add	r3, r2
 80017f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001802:	4621      	mov	r1, r4
 8001804:	0e4a      	lsrs	r2, r1, #25
 8001806:	4629      	mov	r1, r5
 8001808:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800180c:	4629      	mov	r1, r5
 800180e:	164b      	asrs	r3, r1, #25
 8001810:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001814:	4b3c      	ldr	r3, [pc, #240]	@ (8001908 <BMP280_compensate_P_int64+0x584>)
 8001816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181a:	b21b      	sxth	r3, r3
 800181c:	17da      	asrs	r2, r3, #31
 800181e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001820:	667a      	str	r2, [r7, #100]	@ 0x64
 8001822:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001826:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800182a:	462a      	mov	r2, r5
 800182c:	fb02 f203 	mul.w	r2, r2, r3
 8001830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001834:	4621      	mov	r1, r4
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001840:	4621      	mov	r1, r4
 8001842:	fba2 1201 	umull	r1, r2, r2, r1
 8001846:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800184a:	460a      	mov	r2, r1
 800184c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001850:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001854:	4413      	add	r3, r2
 8001856:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001866:	4621      	mov	r1, r4
 8001868:	0cca      	lsrs	r2, r1, #19
 800186a:	4629      	mov	r1, r5
 800186c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001870:	4629      	mov	r1, r5
 8001872:	14cb      	asrs	r3, r1, #19
 8001874:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001878:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800187c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001880:	1884      	adds	r4, r0, r2
 8001882:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001884:	eb41 0303 	adc.w	r3, r1, r3
 8001888:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800188a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800188e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001892:	4621      	mov	r1, r4
 8001894:	1889      	adds	r1, r1, r2
 8001896:	6539      	str	r1, [r7, #80]	@ 0x50
 8001898:	4629      	mov	r1, r5
 800189a:	eb43 0101 	adc.w	r1, r3, r1
 800189e:	6579      	str	r1, [r7, #84]	@ 0x54
 80018a0:	f04f 0000 	mov.w	r0, #0
 80018a4:	f04f 0100 	mov.w	r1, #0
 80018a8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80018ac:	4623      	mov	r3, r4
 80018ae:	0a18      	lsrs	r0, r3, #8
 80018b0:	462b      	mov	r3, r5
 80018b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018b6:	462b      	mov	r3, r5
 80018b8:	1219      	asrs	r1, r3, #8
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <BMP280_compensate_P_int64+0x588>)
 80018bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	17da      	asrs	r2, r3, #31
 80018c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80018d4:	464c      	mov	r4, r9
 80018d6:	0123      	lsls	r3, r4, #4
 80018d8:	4644      	mov	r4, r8
 80018da:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018de:	4644      	mov	r4, r8
 80018e0:	0122      	lsls	r2, r4, #4
 80018e2:	1884      	adds	r4, r0, r2
 80018e4:	603c      	str	r4, [r7, #0]
 80018e6:	eb41 0303 	adc.w	r3, r1, r3
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018f0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80018f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80018fe:	46bd      	mov	sp, r7
 8001900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001904:	20000236 	.word	0x20000236
 8001908:	20000234 	.word	0x20000234
 800190c:	20000232 	.word	0x20000232

08001910 <BMP280_Get_Press>:


float BMP280_Get_Press()
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
	float Press;
	if(BMP280_ReadRaw() == 0)
 8001916:	f7ff fca9 	bl	800126c <BMP280_ReadRaw>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d11e      	bne.n	800195e <BMP280_Get_Press+0x4e>
	{
		if(pRaw==0x800000)  Press = 0.0;
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <BMP280_Get_Press+0x60>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001928:	d103      	bne.n	8001932 <BMP280_Get_Press+0x22>
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	e015      	b.n	800195e <BMP280_Get_Press+0x4e>
		else
		{
			Press =(BMP280_compensate_P_int64(pRaw))/25600.0;
 8001932:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <BMP280_Get_Press+0x60>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fd24 	bl	8001384 <BMP280_compensate_P_int64>
 800193c:	4603      	mov	r3, r0
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fde8 	bl	8000514 <__aeabi_ui2d>
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <BMP280_Get_Press+0x64>)
 800194a:	f7fe ff87 	bl	800085c <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f7ff f92f 	bl	8000bb8 <__aeabi_d2f>
 800195a:	4603      	mov	r3, r0
 800195c:	607b      	str	r3, [r7, #4]
		}
	}
	return Press;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	ee07 3a90 	vmov	s15, r3
}
 8001964:	eeb0 0a67 	vmov.f32	s0, s15
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	2000021c 	.word	0x2000021c
 8001974:	40d90000 	.word	0x40d90000

08001978 <BMP280_Get_Temp>:
float BMP280_Get_Temp()
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
	float Temp;
	if(BMP280_ReadRaw() == 0)
 800197e:	f7ff fc75 	bl	800126c <BMP280_ReadRaw>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d11e      	bne.n	80019c6 <BMP280_Get_Temp+0x4e>
	{
		if(tRaw==0x800000)  Temp = 0.0;
 8001988:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <BMP280_Get_Temp+0x60>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001990:	d103      	bne.n	800199a <BMP280_Get_Temp+0x22>
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	e015      	b.n	80019c6 <BMP280_Get_Temp+0x4e>
		else
		{
			Temp =(BMP280_compensate_T_int32(tRaw))/100.0;
 800199a:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <BMP280_Get_Temp+0x60>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fcae 	bl	8001300 <BMP280_compensate_T_int32>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdc4 	bl	8000534 <__aeabi_i2d>
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <BMP280_Get_Temp+0x64>)
 80019b2:	f7fe ff53 	bl	800085c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f8fb 	bl	8000bb8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	607b      	str	r3, [r7, #4]
		}
	}
	return Temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	ee07 3a90 	vmov	s15, r3
}
 80019cc:	eeb0 0a67 	vmov.f32	s0, s15
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	20000218 	.word	0x20000218
 80019dc:	40590000 	.word	0x40590000

080019e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	@ 0x28
 80019e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e6:	f107 0314 	add.w	r3, r7, #20
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]
 80019ee:	605a      	str	r2, [r3, #4]
 80019f0:	609a      	str	r2, [r3, #8]
 80019f2:	60da      	str	r2, [r3, #12]
 80019f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019f6:	2300      	movs	r3, #0
 80019f8:	613b      	str	r3, [r7, #16]
 80019fa:	4b2e      	ldr	r3, [pc, #184]	@ (8001ab4 <MX_GPIO_Init+0xd4>)
 80019fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fe:	4a2d      	ldr	r2, [pc, #180]	@ (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a00:	f043 0304 	orr.w	r3, r3, #4
 8001a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a06:	4b2b      	ldr	r3, [pc, #172]	@ (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	f003 0304 	and.w	r3, r3, #4
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	4b27      	ldr	r3, [pc, #156]	@ (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a1a:	4a26      	ldr	r2, [pc, #152]	@ (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a22:	4b24      	ldr	r3, [pc, #144]	@ (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	4b20      	ldr	r3, [pc, #128]	@ (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	4a1f      	ldr	r2, [pc, #124]	@ (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	60bb      	str	r3, [r7, #8]
 8001a48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	607b      	str	r3, [r7, #4]
 8001a4e:	4b19      	ldr	r3, [pc, #100]	@ (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	4a18      	ldr	r2, [pc, #96]	@ (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a54:	f043 0302 	orr.w	r3, r3, #2
 8001a58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a5a:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <MX_GPIO_Init+0xd4>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	f003 0302 	and.w	r3, r3, #2
 8001a62:	607b      	str	r3, [r7, #4]
 8001a64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD1_Pin|BUZZ_Pin, GPIO_PIN_RESET);
 8001a66:	2200      	movs	r2, #0
 8001a68:	f44f 7190 	mov.w	r1, #288	@ 0x120
 8001a6c:	4812      	ldr	r0, [pc, #72]	@ (8001ab8 <MX_GPIO_Init+0xd8>)
 8001a6e:	f001 facb 	bl	8003008 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001a72:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001a78:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001a7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001a82:	f107 0314 	add.w	r3, r7, #20
 8001a86:	4619      	mov	r1, r3
 8001a88:	480c      	ldr	r0, [pc, #48]	@ (8001abc <MX_GPIO_Init+0xdc>)
 8001a8a:	f001 f939 	bl	8002d00 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD1_Pin|BUZZ_Pin;
 8001a8e:	f44f 7390 	mov.w	r3, #288	@ 0x120
 8001a92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a94:	2301      	movs	r3, #1
 8001a96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4804      	ldr	r0, [pc, #16]	@ (8001ab8 <MX_GPIO_Init+0xd8>)
 8001aa8:	f001 f92a 	bl	8002d00 <HAL_GPIO_Init>

}
 8001aac:	bf00      	nop
 8001aae:	3728      	adds	r7, #40	@ 0x28
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40023800 	.word	0x40023800
 8001ab8:	40020000 	.word	0x40020000
 8001abc:	40020800 	.word	0x40020800

08001ac0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ac4:	4b12      	ldr	r3, [pc, #72]	@ (8001b10 <MX_I2C1_Init+0x50>)
 8001ac6:	4a13      	ldr	r2, [pc, #76]	@ (8001b14 <MX_I2C1_Init+0x54>)
 8001ac8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001aca:	4b11      	ldr	r3, [pc, #68]	@ (8001b10 <MX_I2C1_Init+0x50>)
 8001acc:	4a12      	ldr	r2, [pc, #72]	@ (8001b18 <MX_I2C1_Init+0x58>)
 8001ace:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b10 <MX_I2C1_Init+0x50>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8001b10 <MX_I2C1_Init+0x50>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001adc:	4b0c      	ldr	r3, [pc, #48]	@ (8001b10 <MX_I2C1_Init+0x50>)
 8001ade:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001ae2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8001b10 <MX_I2C1_Init+0x50>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aea:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <MX_I2C1_Init+0x50>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001af0:	4b07      	ldr	r3, [pc, #28]	@ (8001b10 <MX_I2C1_Init+0x50>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001af6:	4b06      	ldr	r3, [pc, #24]	@ (8001b10 <MX_I2C1_Init+0x50>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001afc:	4804      	ldr	r0, [pc, #16]	@ (8001b10 <MX_I2C1_Init+0x50>)
 8001afe:	f001 fab7 	bl	8003070 <HAL_I2C_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b08:	f000 fa5c 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b0c:	bf00      	nop
 8001b0e:	bd80      	pop	{r7, pc}
 8001b10:	2000023c 	.word	0x2000023c
 8001b14:	40005400 	.word	0x40005400
 8001b18:	00061a80 	.word	0x00061a80

08001b1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	@ 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a19      	ldr	r2, [pc, #100]	@ (8001ba0 <HAL_I2C_MspInit+0x84>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d12c      	bne.n	8001b98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b3e:	2300      	movs	r3, #0
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b18      	ldr	r3, [pc, #96]	@ (8001ba4 <HAL_I2C_MspInit+0x88>)
 8001b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b46:	4a17      	ldr	r2, [pc, #92]	@ (8001ba4 <HAL_I2C_MspInit+0x88>)
 8001b48:	f043 0302 	orr.w	r3, r3, #2
 8001b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ba4 <HAL_I2C_MspInit+0x88>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	613b      	str	r3, [r7, #16]
 8001b58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b5a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001b5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b60:	2312      	movs	r3, #18
 8001b62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b70:	f107 0314 	add.w	r3, r7, #20
 8001b74:	4619      	mov	r1, r3
 8001b76:	480c      	ldr	r0, [pc, #48]	@ (8001ba8 <HAL_I2C_MspInit+0x8c>)
 8001b78:	f001 f8c2 	bl	8002d00 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	60fb      	str	r3, [r7, #12]
 8001b80:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <HAL_I2C_MspInit+0x88>)
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	4a07      	ldr	r2, [pc, #28]	@ (8001ba4 <HAL_I2C_MspInit+0x88>)
 8001b86:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001b8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b8c:	4b05      	ldr	r3, [pc, #20]	@ (8001ba4 <HAL_I2C_MspInit+0x88>)
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b94:	60fb      	str	r3, [r7, #12]
 8001b96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001b98:	bf00      	nop
 8001b9a:	3728      	adds	r7, #40	@ 0x28
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40005400 	.word	0x40005400
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020400 	.word	0x40020400
 8001bac:	00000000 	.word	0x00000000

08001bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001bb6:	f000 fefb 	bl	80029b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001bba:	f000 f911 	bl	8001de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001bbe:	f7ff ff0f 	bl	80019e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001bc2:	f000 fe59 	bl	8002878 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001bc6:	f7ff ff7b 	bl	8001ac0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001bca:	f000 fd75 	bl	80026b8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001bce:	f000 fdc1 	bl	8002754 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8001bd2:	f000 fa37 	bl	8002044 <ssd1306_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8001bd6:	4870      	ldr	r0, [pc, #448]	@ (8001d98 <main+0x1e8>)
 8001bd8:	f002 ff56 	bl	8004a88 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3);
 8001bdc:	486f      	ldr	r0, [pc, #444]	@ (8001d9c <main+0x1ec>)
 8001bde:	f002 ff53 	bl	8004a88 <HAL_TIM_Base_Start_IT>
  BMP280_Config(OSRS_2, OSRS_16, MODE_NORMAL, T_SB_0p5, IRR_16);
 8001be2:	2304      	movs	r3, #4
 8001be4:	9300      	str	r3, [sp, #0]
 8001be6:	2300      	movs	r3, #0
 8001be8:	2203      	movs	r2, #3
 8001bea:	2105      	movs	r1, #5
 8001bec:	2002      	movs	r0, #2
 8001bee:	f7ff fa97 	bl	8001120 <BMP280_Config>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Temp1 = BMP280_Get_Temp();
 8001bf2:	f7ff fec1 	bl	8001978 <BMP280_Get_Temp>
 8001bf6:	eef0 7a40 	vmov.f32	s15, s0
 8001bfa:	4b69      	ldr	r3, [pc, #420]	@ (8001da0 <main+0x1f0>)
 8001bfc:	edc3 7a00 	vstr	s15, [r3]
	  Press1 = BMP280_Get_Press();
 8001c00:	f7ff fe86 	bl	8001910 <BMP280_Get_Press>
 8001c04:	eef0 7a40 	vmov.f32	s15, s0
 8001c08:	4b66      	ldr	r3, [pc, #408]	@ (8001da4 <main+0x1f4>)
 8001c0a:	edc3 7a00 	vstr	s15, [r3]
	  Alt1 = Calculate_Height(Press1);
 8001c0e:	4b65      	ldr	r3, [pc, #404]	@ (8001da4 <main+0x1f4>)
 8001c10:	edd3 7a00 	vldr	s15, [r3]
 8001c14:	eeb0 0a67 	vmov.f32	s0, s15
 8001c18:	f000 f94a 	bl	8001eb0 <Calculate_Height>
 8001c1c:	eef0 7a40 	vmov.f32	s15, s0
 8001c20:	4b61      	ldr	r3, [pc, #388]	@ (8001da8 <main+0x1f8>)
 8001c22:	edc3 7a00 	vstr	s15, [r3]
	  sprintf(temp,"sicaklik= %.2f",Temp1);
 8001c26:	4b5e      	ldr	r3, [pc, #376]	@ (8001da0 <main+0x1f0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7fe fc94 	bl	8000558 <__aeabi_f2d>
 8001c30:	4602      	mov	r2, r0
 8001c32:	460b      	mov	r3, r1
 8001c34:	495d      	ldr	r1, [pc, #372]	@ (8001dac <main+0x1fc>)
 8001c36:	485e      	ldr	r0, [pc, #376]	@ (8001db0 <main+0x200>)
 8001c38:	f004 fc36 	bl	80064a8 <siprintf>
	  sprintf(press,"basinc = %.2f",Press1);
 8001c3c:	4b59      	ldr	r3, [pc, #356]	@ (8001da4 <main+0x1f4>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fc89 	bl	8000558 <__aeabi_f2d>
 8001c46:	4602      	mov	r2, r0
 8001c48:	460b      	mov	r3, r1
 8001c4a:	495a      	ldr	r1, [pc, #360]	@ (8001db4 <main+0x204>)
 8001c4c:	485a      	ldr	r0, [pc, #360]	@ (8001db8 <main+0x208>)
 8001c4e:	f004 fc2b 	bl	80064a8 <siprintf>
	  sprintf(alt,"yukseklik = %.5f",Alt1);
 8001c52:	4b55      	ldr	r3, [pc, #340]	@ (8001da8 <main+0x1f8>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7fe fc7e 	bl	8000558 <__aeabi_f2d>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	460b      	mov	r3, r1
 8001c60:	4956      	ldr	r1, [pc, #344]	@ (8001dbc <main+0x20c>)
 8001c62:	4857      	ldr	r0, [pc, #348]	@ (8001dc0 <main+0x210>)
 8001c64:	f004 fc20 	bl	80064a8 <siprintf>
	  sprintf(velo,"hiz = %.2f",vel);
 8001c68:	4b56      	ldr	r3, [pc, #344]	@ (8001dc4 <main+0x214>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc73 	bl	8000558 <__aeabi_f2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4954      	ldr	r1, [pc, #336]	@ (8001dc8 <main+0x218>)
 8001c78:	4854      	ldr	r0, [pc, #336]	@ (8001dcc <main+0x21c>)
 8001c7a:	f004 fc15 	bl	80064a8 <siprintf>
	  ssd1306_Fill(Black);
 8001c7e:	2000      	movs	r0, #0
 8001c80:	f000 fa4a 	bl	8002118 <ssd1306_Fill>
	  ssd1306_SetCursor(2,8);
 8001c84:	2108      	movs	r1, #8
 8001c86:	2002      	movs	r0, #2
 8001c88:	f000 fb88 	bl	800239c <ssd1306_SetCursor>
	  ssd1306_WriteString(temp, Font_7x10, White);
 8001c8c:	4a50      	ldr	r2, [pc, #320]	@ (8001dd0 <main+0x220>)
 8001c8e:	2301      	movs	r3, #1
 8001c90:	ca06      	ldmia	r2, {r1, r2}
 8001c92:	4847      	ldr	r0, [pc, #284]	@ (8001db0 <main+0x200>)
 8001c94:	f000 fb5c 	bl	8002350 <ssd1306_WriteString>
	  ssd1306_SetCursor(2,20);
 8001c98:	2114      	movs	r1, #20
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f000 fb7e 	bl	800239c <ssd1306_SetCursor>
	  ssd1306_WriteString(press, Font_7x10, White);
 8001ca0:	4a4b      	ldr	r2, [pc, #300]	@ (8001dd0 <main+0x220>)
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	ca06      	ldmia	r2, {r1, r2}
 8001ca6:	4844      	ldr	r0, [pc, #272]	@ (8001db8 <main+0x208>)
 8001ca8:	f000 fb52 	bl	8002350 <ssd1306_WriteString>
	  ssd1306_SetCursor(2,32);
 8001cac:	2120      	movs	r1, #32
 8001cae:	2002      	movs	r0, #2
 8001cb0:	f000 fb74 	bl	800239c <ssd1306_SetCursor>
	  ssd1306_WriteString(alt, Font_7x10, White);
 8001cb4:	4a46      	ldr	r2, [pc, #280]	@ (8001dd0 <main+0x220>)
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	ca06      	ldmia	r2, {r1, r2}
 8001cba:	4841      	ldr	r0, [pc, #260]	@ (8001dc0 <main+0x210>)
 8001cbc:	f000 fb48 	bl	8002350 <ssd1306_WriteString>
	  ssd1306_SetCursor(2,44);
 8001cc0:	212c      	movs	r1, #44	@ 0x2c
 8001cc2:	2002      	movs	r0, #2
 8001cc4:	f000 fb6a 	bl	800239c <ssd1306_SetCursor>
	  ssd1306_WriteString(velo, Font_7x10, White);
 8001cc8:	4a41      	ldr	r2, [pc, #260]	@ (8001dd0 <main+0x220>)
 8001cca:	2301      	movs	r3, #1
 8001ccc:	ca06      	ldmia	r2, {r1, r2}
 8001cce:	483f      	ldr	r0, [pc, #252]	@ (8001dcc <main+0x21c>)
 8001cd0:	f000 fb3e 	bl	8002350 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();
 8001cd4:	f000 fa38 	bl	8002148 <ssd1306_UpdateScreen>
	  //ssd1306_TestAll();
	  HAL_UART_Transmit(&huart2, temp, strlen(temp), 10000);
 8001cd8:	4835      	ldr	r0, [pc, #212]	@ (8001db0 <main+0x200>)
 8001cda:	f7fe fad1 	bl	8000280 <strlen>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ce6:	4932      	ldr	r1, [pc, #200]	@ (8001db0 <main+0x200>)
 8001ce8:	483a      	ldr	r0, [pc, #232]	@ (8001dd4 <main+0x224>)
 8001cea:	f003 fb07 	bl	80052fc <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, press, strlen(press), 10000);
 8001cee:	4832      	ldr	r0, [pc, #200]	@ (8001db8 <main+0x208>)
 8001cf0:	f7fe fac6 	bl	8000280 <strlen>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001cfc:	492e      	ldr	r1, [pc, #184]	@ (8001db8 <main+0x208>)
 8001cfe:	4835      	ldr	r0, [pc, #212]	@ (8001dd4 <main+0x224>)
 8001d00:	f003 fafc 	bl	80052fc <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, alt, strlen(press), 10000);
 8001d04:	482c      	ldr	r0, [pc, #176]	@ (8001db8 <main+0x208>)
 8001d06:	f7fe fabb 	bl	8000280 <strlen>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001d12:	492b      	ldr	r1, [pc, #172]	@ (8001dc0 <main+0x210>)
 8001d14:	482f      	ldr	r0, [pc, #188]	@ (8001dd4 <main+0x224>)
 8001d16:	f003 faf1 	bl	80052fc <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart2, velo, strlen(velo), 10000);
 8001d1a:	482c      	ldr	r0, [pc, #176]	@ (8001dcc <main+0x21c>)
 8001d1c:	f7fe fab0 	bl	8000280 <strlen>
 8001d20:	4603      	mov	r3, r0
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001d28:	4928      	ldr	r1, [pc, #160]	@ (8001dcc <main+0x21c>)
 8001d2a:	482a      	ldr	r0, [pc, #168]	@ (8001dd4 <main+0x224>)
 8001d2c:	f003 fae6 	bl	80052fc <HAL_UART_Transmit>
	  if (vel < -1) {
 8001d30:	4b24      	ldr	r3, [pc, #144]	@ (8001dc4 <main+0x214>)
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001d3a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d42:	d509      	bpl.n	8001d58 <main+0x1a8>
		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 1);
 8001d44:	2201      	movs	r2, #1
 8001d46:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d4a:	4823      	ldr	r0, [pc, #140]	@ (8001dd8 <main+0x228>)
 8001d4c:	f001 f95c 	bl	8003008 <HAL_GPIO_WritePin>
		  BUZ = false;
 8001d50:	4b22      	ldr	r3, [pc, #136]	@ (8001ddc <main+0x22c>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	701a      	strb	r2, [r3, #0]
 8001d56:	e74c      	b.n	8001bf2 <main+0x42>
	  }
	  else if (vel >=0.6) {
 8001d58:	4b1a      	ldr	r3, [pc, #104]	@ (8001dc4 <main+0x214>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7fe fbfb 	bl	8000558 <__aeabi_f2d>
 8001d62:	a30b      	add	r3, pc, #44	@ (adr r3, 8001d90 <main+0x1e0>)
 8001d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d68:	f7fe fed4 	bl	8000b14 <__aeabi_dcmpge>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <main+0x1ca>
		  BUZ = true;
 8001d72:	4b1a      	ldr	r3, [pc, #104]	@ (8001ddc <main+0x22c>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e73b      	b.n	8001bf2 <main+0x42>
	  }
	  else {
		  HAL_GPIO_WritePin(BUZZ_GPIO_Port, BUZZ_Pin, 0);
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d80:	4815      	ldr	r0, [pc, #84]	@ (8001dd8 <main+0x228>)
 8001d82:	f001 f941 	bl	8003008 <HAL_GPIO_WritePin>
		  BUZ = false;
 8001d86:	4b15      	ldr	r3, [pc, #84]	@ (8001ddc <main+0x22c>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	701a      	strb	r2, [r3, #0]
	  Temp1 = BMP280_Get_Temp();
 8001d8c:	e731      	b.n	8001bf2 <main+0x42>
 8001d8e:	bf00      	nop
 8001d90:	33333333 	.word	0x33333333
 8001d94:	3fe33333 	.word	0x3fe33333
 8001d98:	2000084c 	.word	0x2000084c
 8001d9c:	20000894 	.word	0x20000894
 8001da0:	20000294 	.word	0x20000294
 8001da4:	20000298 	.word	0x20000298
 8001da8:	2000029c 	.word	0x2000029c
 8001dac:	080095d8 	.word	0x080095d8
 8001db0:	200002a4 	.word	0x200002a4
 8001db4:	080095e8 	.word	0x080095e8
 8001db8:	20000308 	.word	0x20000308
 8001dbc:	080095f8 	.word	0x080095f8
 8001dc0:	2000036c 	.word	0x2000036c
 8001dc4:	200002a0 	.word	0x200002a0
 8001dc8:	0800960c 	.word	0x0800960c
 8001dcc:	200003d0 	.word	0x200003d0
 8001dd0:	2000000c 	.word	0x2000000c
 8001dd4:	200008dc 	.word	0x200008dc
 8001dd8:	40020000 	.word	0x40020000
 8001ddc:	20000290 	.word	0x20000290

08001de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b094      	sub	sp, #80	@ 0x50
 8001de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de6:	f107 0320 	add.w	r3, r7, #32
 8001dea:	2230      	movs	r2, #48	@ 0x30
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 fbd7 	bl	80065a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	4b27      	ldr	r3, [pc, #156]	@ (8001ea8 <SystemClock_Config+0xc8>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	4a26      	ldr	r2, [pc, #152]	@ (8001ea8 <SystemClock_Config+0xc8>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e12:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e14:	4b24      	ldr	r3, [pc, #144]	@ (8001ea8 <SystemClock_Config+0xc8>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	4b21      	ldr	r3, [pc, #132]	@ (8001eac <SystemClock_Config+0xcc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a20      	ldr	r2, [pc, #128]	@ (8001eac <SystemClock_Config+0xcc>)
 8001e2a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b1e      	ldr	r3, [pc, #120]	@ (8001eac <SystemClock_Config+0xcc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e44:	2310      	movs	r3, #16
 8001e46:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e50:	2308      	movs	r3, #8
 8001e52:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e54:	2364      	movs	r3, #100	@ 0x64
 8001e56:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e60:	f107 0320 	add.w	r3, r7, #32
 8001e64:	4618      	mov	r0, r3
 8001e66:	f002 f927 	bl	80040b8 <HAL_RCC_OscConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e70:	f000 f8a8 	bl	8001fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e74:	230f      	movs	r3, #15
 8001e76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	2103      	movs	r1, #3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f002 fb89 	bl	80045a8 <HAL_RCC_ClockConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e9c:	f000 f892 	bl	8001fc4 <Error_Handler>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3750      	adds	r7, #80	@ 0x50
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40007000 	.word	0x40007000

08001eb0 <Calculate_Height>:

/* USER CODE BEGIN 4 */
float Calculate_Height (float prs){
 8001eb0:	b5b0      	push	{r4, r5, r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	ed87 0a01 	vstr	s0, [r7, #4]
	float tmp = pow((prs/sea_level),con1);
 8001eba:	4b19      	ldr	r3, [pc, #100]	@ (8001f20 <Calculate_Height+0x70>)
 8001ebc:	edd3 7a00 	vldr	s15, [r3]
 8001ec0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001ec4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001ec8:	ee16 0a90 	vmov	r0, s13
 8001ecc:	f7fe fb44 	bl	8000558 <__aeabi_f2d>
 8001ed0:	4604      	mov	r4, r0
 8001ed2:	460d      	mov	r5, r1
 8001ed4:	4b13      	ldr	r3, [pc, #76]	@ (8001f24 <Calculate_Height+0x74>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fb3d 	bl	8000558 <__aeabi_f2d>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	ec43 2b11 	vmov	d1, r2, r3
 8001ee6:	ec45 4b10 	vmov	d0, r4, r5
 8001eea:	f006 fc09 	bl	8008700 <pow>
 8001eee:	ec53 2b10 	vmov	r2, r3, d0
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	f7fe fe5f 	bl	8000bb8 <__aeabi_d2f>
 8001efa:	4603      	mov	r3, r0
 8001efc:	60fb      	str	r3, [r7, #12]
	return  con2*(1-tmp);
 8001efe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001f02:	edd7 7a03 	vldr	s15, [r7, #12]
 8001f06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f0a:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <Calculate_Height+0x78>)
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8001f14:	eeb0 0a67 	vmov.f32	s0, s15
 8001f18:	3710      	adds	r7, #16
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001f1e:	bf00      	nop
 8001f20:	20000008 	.word	0x20000008
 8001f24:	20000000 	.word	0x20000000
 8001f28:	20000004 	.word	0x20000004

08001f2c <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
		if (htim->Instance==TIM2) {
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3c:	d11c      	bne.n	8001f78 <HAL_TIM_PeriodElapsedCallback+0x4c>
			Curh = Alt1;
 8001f3e:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a19      	ldr	r2, [pc, #100]	@ (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001f44:	6013      	str	r3, [r2, #0]
			dish = Curh - Preh;
 8001f46:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001f48:	ed93 7a00 	vldr	s14, [r3]
 8001f4c:	4b17      	ldr	r3, [pc, #92]	@ (8001fac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f4e:	edd3 7a00 	vldr	s15, [r3]
 8001f52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f56:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001f58:	edc3 7a00 	vstr	s15, [r3]
			vel = dish/0.25;
 8001f5c:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001f5e:	ed93 7a00 	vldr	s14, [r3]
 8001f62:	eef5 6a00 	vmov.f32	s13, #80	@ 0x3e800000  0.250
 8001f66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f6a:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001f6c:	edc3 7a00 	vstr	s15, [r3]
			Preh = Curh;
 8001f70:	4b0d      	ldr	r3, [pc, #52]	@ (8001fa8 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a0d      	ldr	r2, [pc, #52]	@ (8001fac <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001f76:	6013      	str	r3, [r2, #0]
		}
		if (htim->Instance==TIM3) {
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a0e      	ldr	r2, [pc, #56]	@ (8001fb8 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d10c      	bne.n	8001f9c <HAL_TIM_PeriodElapsedCallback+0x70>
			HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001f82:	2120      	movs	r1, #32
 8001f84:	480d      	ldr	r0, [pc, #52]	@ (8001fbc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001f86:	f001 f858 	bl	800303a <HAL_GPIO_TogglePin>
			if (BUZ) {
 8001f8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc0 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d004      	beq.n	8001f9c <HAL_TIM_PeriodElapsedCallback+0x70>
				HAL_GPIO_TogglePin(BUZZ_GPIO_Port, BUZZ_Pin);
 8001f92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f96:	4809      	ldr	r0, [pc, #36]	@ (8001fbc <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001f98:	f001 f84f 	bl	800303a <HAL_GPIO_TogglePin>
			}

		}
}
 8001f9c:	bf00      	nop
 8001f9e:	3708      	adds	r7, #8
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	2000029c 	.word	0x2000029c
 8001fa8:	20000438 	.word	0x20000438
 8001fac:	20000434 	.word	0x20000434
 8001fb0:	2000043c 	.word	0x2000043c
 8001fb4:	200002a0 	.word	0x200002a0
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	40020000 	.word	0x40020000
 8001fc0:	20000290 	.word	0x20000290

08001fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fc8:	b672      	cpsid	i
}
 8001fca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fcc:	bf00      	nop
 8001fce:	e7fd      	b.n	8001fcc <Error_Handler+0x8>

08001fd0 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8001fd4:	bf00      	nop
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr
	...

08001fe0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af04      	add	r7, sp, #16
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001fea:	f04f 33ff 	mov.w	r3, #4294967295
 8001fee:	9302      	str	r3, [sp, #8]
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	1dfb      	adds	r3, r7, #7
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	2178      	movs	r1, #120	@ 0x78
 8001ffe:	4803      	ldr	r0, [pc, #12]	@ (800200c <ssd1306_WriteCommand+0x2c>)
 8002000:	f001 f97a 	bl	80032f8 <HAL_I2C_Mem_Write>
}
 8002004:	bf00      	nop
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000023c 	.word	0x2000023c

08002010 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af04      	add	r7, sp, #16
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	b29b      	uxth	r3, r3
 800201e:	f04f 32ff 	mov.w	r2, #4294967295
 8002022:	9202      	str	r2, [sp, #8]
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2301      	movs	r3, #1
 800202c:	2240      	movs	r2, #64	@ 0x40
 800202e:	2178      	movs	r1, #120	@ 0x78
 8002030:	4803      	ldr	r0, [pc, #12]	@ (8002040 <ssd1306_WriteData+0x30>)
 8002032:	f001 f961 	bl	80032f8 <HAL_I2C_Mem_Write>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	2000023c 	.word	0x2000023c

08002044 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002048:	f7ff ffc2 	bl	8001fd0 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 800204c:	2064      	movs	r0, #100	@ 0x64
 800204e:	f000 fd21 	bl	8002a94 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8002052:	2000      	movs	r0, #0
 8002054:	f000 f9ce 	bl	80023f4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002058:	2020      	movs	r0, #32
 800205a:	f7ff ffc1 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800205e:	2000      	movs	r0, #0
 8002060:	f7ff ffbe 	bl	8001fe0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8002064:	20b0      	movs	r0, #176	@ 0xb0
 8002066:	f7ff ffbb 	bl	8001fe0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800206a:	20c8      	movs	r0, #200	@ 0xc8
 800206c:	f7ff ffb8 	bl	8001fe0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff ffb5 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8002076:	2010      	movs	r0, #16
 8002078:	f7ff ffb2 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800207c:	2040      	movs	r0, #64	@ 0x40
 800207e:	f7ff ffaf 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8002082:	20ff      	movs	r0, #255	@ 0xff
 8002084:	f000 f9a2 	bl	80023cc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002088:	20a1      	movs	r0, #161	@ 0xa1
 800208a:	f7ff ffa9 	bl	8001fe0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800208e:	20a6      	movs	r0, #166	@ 0xa6
 8002090:	f7ff ffa6 	bl	8001fe0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8002094:	20a8      	movs	r0, #168	@ 0xa8
 8002096:	f7ff ffa3 	bl	8001fe0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 800209a:	203f      	movs	r0, #63	@ 0x3f
 800209c:	f7ff ffa0 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80020a0:	20a4      	movs	r0, #164	@ 0xa4
 80020a2:	f7ff ff9d 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80020a6:	20d3      	movs	r0, #211	@ 0xd3
 80020a8:	f7ff ff9a 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff ff97 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80020b2:	20d5      	movs	r0, #213	@ 0xd5
 80020b4:	f7ff ff94 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80020b8:	20f0      	movs	r0, #240	@ 0xf0
 80020ba:	f7ff ff91 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80020be:	20d9      	movs	r0, #217	@ 0xd9
 80020c0:	f7ff ff8e 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80020c4:	2022      	movs	r0, #34	@ 0x22
 80020c6:	f7ff ff8b 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80020ca:	20da      	movs	r0, #218	@ 0xda
 80020cc:	f7ff ff88 	bl	8001fe0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80020d0:	2012      	movs	r0, #18
 80020d2:	f7ff ff85 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80020d6:	20db      	movs	r0, #219	@ 0xdb
 80020d8:	f7ff ff82 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80020dc:	2020      	movs	r0, #32
 80020de:	f7ff ff7f 	bl	8001fe0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80020e2:	208d      	movs	r0, #141	@ 0x8d
 80020e4:	f7ff ff7c 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80020e8:	2014      	movs	r0, #20
 80020ea:	f7ff ff79 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80020ee:	2001      	movs	r0, #1
 80020f0:	f000 f980 	bl	80023f4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80020f4:	2000      	movs	r0, #0
 80020f6:	f000 f80f 	bl	8002118 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80020fa:	f000 f825 	bl	8002148 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80020fe:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <ssd1306_Init+0xd0>)
 8002100:	2200      	movs	r2, #0
 8002102:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8002104:	4b03      	ldr	r3, [pc, #12]	@ (8002114 <ssd1306_Init+0xd0>)
 8002106:	2200      	movs	r2, #0
 8002108:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800210a:	4b02      	ldr	r3, [pc, #8]	@ (8002114 <ssd1306_Init+0xd0>)
 800210c:	2201      	movs	r2, #1
 800210e:	711a      	strb	r2, [r3, #4]
}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20000840 	.word	0x20000840

08002118 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	4603      	mov	r3, r0
 8002120:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <ssd1306_Fill+0x14>
 8002128:	2300      	movs	r3, #0
 800212a:	e000      	b.n	800212e <ssd1306_Fill+0x16>
 800212c:	23ff      	movs	r3, #255	@ 0xff
 800212e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002132:	4619      	mov	r1, r3
 8002134:	4803      	ldr	r0, [pc, #12]	@ (8002144 <ssd1306_Fill+0x2c>)
 8002136:	f004 fa34 	bl	80065a2 <memset>
}
 800213a:	bf00      	nop
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}
 8002142:	bf00      	nop
 8002144:	20000440 	.word	0x20000440

08002148 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800214e:	2300      	movs	r3, #0
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	e016      	b.n	8002182 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	3b50      	subs	r3, #80	@ 0x50
 8002158:	b2db      	uxtb	r3, r3
 800215a:	4618      	mov	r0, r3
 800215c:	f7ff ff40 	bl	8001fe0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002160:	2000      	movs	r0, #0
 8002162:	f7ff ff3d 	bl	8001fe0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8002166:	2010      	movs	r0, #16
 8002168:	f7ff ff3a 	bl	8001fe0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800216c:	79fb      	ldrb	r3, [r7, #7]
 800216e:	01db      	lsls	r3, r3, #7
 8002170:	4a08      	ldr	r2, [pc, #32]	@ (8002194 <ssd1306_UpdateScreen+0x4c>)
 8002172:	4413      	add	r3, r2
 8002174:	2180      	movs	r1, #128	@ 0x80
 8002176:	4618      	mov	r0, r3
 8002178:	f7ff ff4a 	bl	8002010 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	3301      	adds	r3, #1
 8002180:	71fb      	strb	r3, [r7, #7]
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	2b07      	cmp	r3, #7
 8002186:	d9e5      	bls.n	8002154 <ssd1306_UpdateScreen+0xc>
    }
}
 8002188:	bf00      	nop
 800218a:	bf00      	nop
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	20000440 	.word	0x20000440

08002198 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	71fb      	strb	r3, [r7, #7]
 80021a2:	460b      	mov	r3, r1
 80021a4:	71bb      	strb	r3, [r7, #6]
 80021a6:	4613      	mov	r3, r2
 80021a8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	db3d      	blt.n	800222e <ssd1306_DrawPixel+0x96>
 80021b2:	79bb      	ldrb	r3, [r7, #6]
 80021b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80021b6:	d83a      	bhi.n	800222e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80021b8:	797b      	ldrb	r3, [r7, #5]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d11a      	bne.n	80021f4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80021be:	79fa      	ldrb	r2, [r7, #7]
 80021c0:	79bb      	ldrb	r3, [r7, #6]
 80021c2:	08db      	lsrs	r3, r3, #3
 80021c4:	b2d8      	uxtb	r0, r3
 80021c6:	4603      	mov	r3, r0
 80021c8:	01db      	lsls	r3, r3, #7
 80021ca:	4413      	add	r3, r2
 80021cc:	4a1b      	ldr	r2, [pc, #108]	@ (800223c <ssd1306_DrawPixel+0xa4>)
 80021ce:	5cd3      	ldrb	r3, [r2, r3]
 80021d0:	b25a      	sxtb	r2, r3
 80021d2:	79bb      	ldrb	r3, [r7, #6]
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	2101      	movs	r1, #1
 80021da:	fa01 f303 	lsl.w	r3, r1, r3
 80021de:	b25b      	sxtb	r3, r3
 80021e0:	4313      	orrs	r3, r2
 80021e2:	b259      	sxtb	r1, r3
 80021e4:	79fa      	ldrb	r2, [r7, #7]
 80021e6:	4603      	mov	r3, r0
 80021e8:	01db      	lsls	r3, r3, #7
 80021ea:	4413      	add	r3, r2
 80021ec:	b2c9      	uxtb	r1, r1
 80021ee:	4a13      	ldr	r2, [pc, #76]	@ (800223c <ssd1306_DrawPixel+0xa4>)
 80021f0:	54d1      	strb	r1, [r2, r3]
 80021f2:	e01d      	b.n	8002230 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80021f4:	79fa      	ldrb	r2, [r7, #7]
 80021f6:	79bb      	ldrb	r3, [r7, #6]
 80021f8:	08db      	lsrs	r3, r3, #3
 80021fa:	b2d8      	uxtb	r0, r3
 80021fc:	4603      	mov	r3, r0
 80021fe:	01db      	lsls	r3, r3, #7
 8002200:	4413      	add	r3, r2
 8002202:	4a0e      	ldr	r2, [pc, #56]	@ (800223c <ssd1306_DrawPixel+0xa4>)
 8002204:	5cd3      	ldrb	r3, [r2, r3]
 8002206:	b25a      	sxtb	r2, r3
 8002208:	79bb      	ldrb	r3, [r7, #6]
 800220a:	f003 0307 	and.w	r3, r3, #7
 800220e:	2101      	movs	r1, #1
 8002210:	fa01 f303 	lsl.w	r3, r1, r3
 8002214:	b25b      	sxtb	r3, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	b25b      	sxtb	r3, r3
 800221a:	4013      	ands	r3, r2
 800221c:	b259      	sxtb	r1, r3
 800221e:	79fa      	ldrb	r2, [r7, #7]
 8002220:	4603      	mov	r3, r0
 8002222:	01db      	lsls	r3, r3, #7
 8002224:	4413      	add	r3, r2
 8002226:	b2c9      	uxtb	r1, r1
 8002228:	4a04      	ldr	r2, [pc, #16]	@ (800223c <ssd1306_DrawPixel+0xa4>)
 800222a:	54d1      	strb	r1, [r2, r3]
 800222c:	e000      	b.n	8002230 <ssd1306_DrawPixel+0x98>
        return;
 800222e:	bf00      	nop
    }
}
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000440 	.word	0x20000440

08002240 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8002240:	b590      	push	{r4, r7, lr}
 8002242:	b089      	sub	sp, #36	@ 0x24
 8002244:	af00      	add	r7, sp, #0
 8002246:	4604      	mov	r4, r0
 8002248:	1d38      	adds	r0, r7, #4
 800224a:	e880 0006 	stmia.w	r0, {r1, r2}
 800224e:	461a      	mov	r2, r3
 8002250:	4623      	mov	r3, r4
 8002252:	73fb      	strb	r3, [r7, #15]
 8002254:	4613      	mov	r3, r2
 8002256:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8002258:	7bfb      	ldrb	r3, [r7, #15]
 800225a:	2b1f      	cmp	r3, #31
 800225c:	d902      	bls.n	8002264 <ssd1306_WriteChar+0x24>
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b7e      	cmp	r3, #126	@ 0x7e
 8002262:	d901      	bls.n	8002268 <ssd1306_WriteChar+0x28>
        return 0;
 8002264:	2300      	movs	r3, #0
 8002266:	e06c      	b.n	8002342 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002268:	4b38      	ldr	r3, [pc, #224]	@ (800234c <ssd1306_WriteChar+0x10c>)
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	461a      	mov	r2, r3
 800226e:	793b      	ldrb	r3, [r7, #4]
 8002270:	4413      	add	r3, r2
 8002272:	2b80      	cmp	r3, #128	@ 0x80
 8002274:	dc06      	bgt.n	8002284 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8002276:	4b35      	ldr	r3, [pc, #212]	@ (800234c <ssd1306_WriteChar+0x10c>)
 8002278:	885b      	ldrh	r3, [r3, #2]
 800227a:	461a      	mov	r2, r3
 800227c:	797b      	ldrb	r3, [r7, #5]
 800227e:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8002280:	2b40      	cmp	r3, #64	@ 0x40
 8002282:	dd01      	ble.n	8002288 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8002284:	2300      	movs	r3, #0
 8002286:	e05c      	b.n	8002342 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8002288:	2300      	movs	r3, #0
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	e04c      	b.n	8002328 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	3b20      	subs	r3, #32
 8002294:	7979      	ldrb	r1, [r7, #5]
 8002296:	fb01 f303 	mul.w	r3, r1, r3
 800229a:	4619      	mov	r1, r3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	440b      	add	r3, r1
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	4413      	add	r3, r2
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
 80022ac:	e034      	b.n	8002318 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d012      	beq.n	80022e4 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80022be:	4b23      	ldr	r3, [pc, #140]	@ (800234c <ssd1306_WriteChar+0x10c>)
 80022c0:	881b      	ldrh	r3, [r3, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	4413      	add	r3, r2
 80022ca:	b2d8      	uxtb	r0, r3
 80022cc:	4b1f      	ldr	r3, [pc, #124]	@ (800234c <ssd1306_WriteChar+0x10c>)
 80022ce:	885b      	ldrh	r3, [r3, #2]
 80022d0:	b2da      	uxtb	r2, r3
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	4413      	add	r3, r2
 80022d8:	b2db      	uxtb	r3, r3
 80022da:	7bba      	ldrb	r2, [r7, #14]
 80022dc:	4619      	mov	r1, r3
 80022de:	f7ff ff5b 	bl	8002198 <ssd1306_DrawPixel>
 80022e2:	e016      	b.n	8002312 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80022e4:	4b19      	ldr	r3, [pc, #100]	@ (800234c <ssd1306_WriteChar+0x10c>)
 80022e6:	881b      	ldrh	r3, [r3, #0]
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	b2db      	uxtb	r3, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	b2d8      	uxtb	r0, r3
 80022f2:	4b16      	ldr	r3, [pc, #88]	@ (800234c <ssd1306_WriteChar+0x10c>)
 80022f4:	885b      	ldrh	r3, [r3, #2]
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	69fb      	ldr	r3, [r7, #28]
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	4413      	add	r3, r2
 80022fe:	b2d9      	uxtb	r1, r3
 8002300:	7bbb      	ldrb	r3, [r7, #14]
 8002302:	2b00      	cmp	r3, #0
 8002304:	bf0c      	ite	eq
 8002306:	2301      	moveq	r3, #1
 8002308:	2300      	movne	r3, #0
 800230a:	b2db      	uxtb	r3, r3
 800230c:	461a      	mov	r2, r3
 800230e:	f7ff ff43 	bl	8002198 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	3301      	adds	r3, #1
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	793b      	ldrb	r3, [r7, #4]
 800231a:	461a      	mov	r2, r3
 800231c:	69bb      	ldr	r3, [r7, #24]
 800231e:	4293      	cmp	r3, r2
 8002320:	d3c5      	bcc.n	80022ae <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3301      	adds	r3, #1
 8002326:	61fb      	str	r3, [r7, #28]
 8002328:	797b      	ldrb	r3, [r7, #5]
 800232a:	461a      	mov	r2, r3
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	4293      	cmp	r3, r2
 8002330:	d3ad      	bcc.n	800228e <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8002332:	4b06      	ldr	r3, [pc, #24]	@ (800234c <ssd1306_WriteChar+0x10c>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	793a      	ldrb	r2, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b03      	ldr	r3, [pc, #12]	@ (800234c <ssd1306_WriteChar+0x10c>)
 800233e:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002340:	7bfb      	ldrb	r3, [r7, #15]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3724      	adds	r7, #36	@ 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd90      	pop	{r4, r7, pc}
 800234a:	bf00      	nop
 800234c:	20000840 	.word	0x20000840

08002350 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8002350:	b580      	push	{r7, lr}
 8002352:	b084      	sub	sp, #16
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	1d38      	adds	r0, r7, #4
 800235a:	e880 0006 	stmia.w	r0, {r1, r2}
 800235e:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8002360:	e012      	b.n	8002388 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	7818      	ldrb	r0, [r3, #0]
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	1d3a      	adds	r2, r7, #4
 800236a:	ca06      	ldmia	r2, {r1, r2}
 800236c:	f7ff ff68 	bl	8002240 <ssd1306_WriteChar>
 8002370:	4603      	mov	r3, r0
 8002372:	461a      	mov	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d002      	beq.n	8002382 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	e008      	b.n	8002394 <ssd1306_WriteString+0x44>
        }
        str++;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	3301      	adds	r3, #1
 8002386:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	781b      	ldrb	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1e8      	bne.n	8002362 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	781b      	ldrb	r3, [r3, #0]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	460a      	mov	r2, r1
 80023a6:	71fb      	strb	r3, [r7, #7]
 80023a8:	4613      	mov	r3, r2
 80023aa:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80023ac:	79fb      	ldrb	r3, [r7, #7]
 80023ae:	b29a      	uxth	r2, r3
 80023b0:	4b05      	ldr	r3, [pc, #20]	@ (80023c8 <ssd1306_SetCursor+0x2c>)
 80023b2:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80023b4:	79bb      	ldrb	r3, [r7, #6]
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	4b03      	ldr	r3, [pc, #12]	@ (80023c8 <ssd1306_SetCursor+0x2c>)
 80023ba:	805a      	strh	r2, [r3, #2]
}
 80023bc:	bf00      	nop
 80023be:	370c      	adds	r7, #12
 80023c0:	46bd      	mov	sp, r7
 80023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c6:	4770      	bx	lr
 80023c8:	20000840 	.word	0x20000840

080023cc <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b084      	sub	sp, #16
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80023d6:	2381      	movs	r3, #129	@ 0x81
 80023d8:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fdff 	bl	8001fe0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fdfb 	bl	8001fe0 <ssd1306_WriteCommand>
}
 80023ea:	bf00      	nop
 80023ec:	3710      	adds	r7, #16
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
	...

080023f4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80023fe:	79fb      	ldrb	r3, [r7, #7]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d005      	beq.n	8002410 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8002404:	23af      	movs	r3, #175	@ 0xaf
 8002406:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8002408:	4b08      	ldr	r3, [pc, #32]	@ (800242c <ssd1306_SetDisplayOn+0x38>)
 800240a:	2201      	movs	r2, #1
 800240c:	715a      	strb	r2, [r3, #5]
 800240e:	e004      	b.n	800241a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8002410:	23ae      	movs	r3, #174	@ 0xae
 8002412:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8002414:	4b05      	ldr	r3, [pc, #20]	@ (800242c <ssd1306_SetDisplayOn+0x38>)
 8002416:	2200      	movs	r2, #0
 8002418:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800241a:	7bfb      	ldrb	r3, [r7, #15]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fddf 	bl	8001fe0 <ssd1306_WriteCommand>
}
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20000840 	.word	0x20000840

08002430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	607b      	str	r3, [r7, #4]
 800243a:	4b10      	ldr	r3, [pc, #64]	@ (800247c <HAL_MspInit+0x4c>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	4a0f      	ldr	r2, [pc, #60]	@ (800247c <HAL_MspInit+0x4c>)
 8002440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002444:	6453      	str	r3, [r2, #68]	@ 0x44
 8002446:	4b0d      	ldr	r3, [pc, #52]	@ (800247c <HAL_MspInit+0x4c>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244e:	607b      	str	r3, [r7, #4]
 8002450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	603b      	str	r3, [r7, #0]
 8002456:	4b09      	ldr	r3, [pc, #36]	@ (800247c <HAL_MspInit+0x4c>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	4a08      	ldr	r2, [pc, #32]	@ (800247c <HAL_MspInit+0x4c>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002460:	6413      	str	r3, [r2, #64]	@ 0x40
 8002462:	4b06      	ldr	r3, [pc, #24]	@ (800247c <HAL_MspInit+0x4c>)
 8002464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800246a:	603b      	str	r3, [r7, #0]
 800246c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800246e:	2005      	movs	r0, #5
 8002470:	f000 fc04 	bl	8002c7c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800

08002480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <NMI_Handler+0x4>

08002488 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248c:	bf00      	nop
 800248e:	e7fd      	b.n	800248c <HardFault_Handler+0x4>

08002490 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002490:	b480      	push	{r7}
 8002492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002494:	bf00      	nop
 8002496:	e7fd      	b.n	8002494 <MemManage_Handler+0x4>

08002498 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800249c:	bf00      	nop
 800249e:	e7fd      	b.n	800249c <BusFault_Handler+0x4>

080024a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024a4:	bf00      	nop
 80024a6:	e7fd      	b.n	80024a4 <UsageFault_Handler+0x4>

080024a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024a8:	b480      	push	{r7}
 80024aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024b6:	b480      	push	{r7}
 80024b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024ba:	bf00      	nop
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024c8:	bf00      	nop
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024d6:	f000 fabd 	bl	8002a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
	...

080024e0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024e4:	4802      	ldr	r0, [pc, #8]	@ (80024f0 <TIM2_IRQHandler+0x10>)
 80024e6:	f002 fb31 	bl	8004b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80024ea:	bf00      	nop
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000084c 	.word	0x2000084c

080024f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024f8:	4802      	ldr	r0, [pc, #8]	@ (8002504 <TIM3_IRQHandler+0x10>)
 80024fa:	f002 fb27 	bl	8004b4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000894 	.word	0x20000894

08002508 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return 1;
 800250c:	2301      	movs	r3, #1
}
 800250e:	4618      	mov	r0, r3
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <_kill>:

int _kill(int pid, int sig)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002522:	f004 f891 	bl	8006648 <__errno>
 8002526:	4603      	mov	r3, r0
 8002528:	2216      	movs	r2, #22
 800252a:	601a      	str	r2, [r3, #0]
  return -1;
 800252c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}

08002538 <_exit>:

void _exit (int status)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002540:	f04f 31ff 	mov.w	r1, #4294967295
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f7ff ffe7 	bl	8002518 <_kill>
  while (1) {}    /* Make sure we hang here */
 800254a:	bf00      	nop
 800254c:	e7fd      	b.n	800254a <_exit+0x12>

0800254e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	60f8      	str	r0, [r7, #12]
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	e00a      	b.n	8002576 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002560:	f3af 8000 	nop.w
 8002564:	4601      	mov	r1, r0
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	1c5a      	adds	r2, r3, #1
 800256a:	60ba      	str	r2, [r7, #8]
 800256c:	b2ca      	uxtb	r2, r1
 800256e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	3301      	adds	r3, #1
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	429a      	cmp	r2, r3
 800257c:	dbf0      	blt.n	8002560 <_read+0x12>
  }

  return len;
 800257e:	687b      	ldr	r3, [r7, #4]
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	60f8      	str	r0, [r7, #12]
 8002590:	60b9      	str	r1, [r7, #8]
 8002592:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002594:	2300      	movs	r3, #0
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	e009      	b.n	80025ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	1c5a      	adds	r2, r3, #1
 800259e:	60ba      	str	r2, [r7, #8]
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	3301      	adds	r3, #1
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	697a      	ldr	r2, [r7, #20]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	429a      	cmp	r2, r3
 80025b4:	dbf1      	blt.n	800259a <_write+0x12>
  }
  return len;
 80025b6:	687b      	ldr	r3, [r7, #4]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <_close>:

int _close(int file)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	370c      	adds	r7, #12
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e8:	605a      	str	r2, [r3, #4]
  return 0;
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <_isatty>:

int _isatty(int file)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002600:	2301      	movs	r3, #1
}
 8002602:	4618      	mov	r0, r3
 8002604:	370c      	adds	r7, #12
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr

0800260e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	60f8      	str	r0, [r7, #12]
 8002616:	60b9      	str	r1, [r7, #8]
 8002618:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3714      	adds	r7, #20
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002630:	4a14      	ldr	r2, [pc, #80]	@ (8002684 <_sbrk+0x5c>)
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <_sbrk+0x60>)
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800263c:	4b13      	ldr	r3, [pc, #76]	@ (800268c <_sbrk+0x64>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002644:	4b11      	ldr	r3, [pc, #68]	@ (800268c <_sbrk+0x64>)
 8002646:	4a12      	ldr	r2, [pc, #72]	@ (8002690 <_sbrk+0x68>)
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800264a:	4b10      	ldr	r3, [pc, #64]	@ (800268c <_sbrk+0x64>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	4413      	add	r3, r2
 8002652:	693a      	ldr	r2, [r7, #16]
 8002654:	429a      	cmp	r2, r3
 8002656:	d207      	bcs.n	8002668 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002658:	f003 fff6 	bl	8006648 <__errno>
 800265c:	4603      	mov	r3, r0
 800265e:	220c      	movs	r2, #12
 8002660:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002662:	f04f 33ff 	mov.w	r3, #4294967295
 8002666:	e009      	b.n	800267c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002668:	4b08      	ldr	r3, [pc, #32]	@ (800268c <_sbrk+0x64>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266e:	4b07      	ldr	r3, [pc, #28]	@ (800268c <_sbrk+0x64>)
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4413      	add	r3, r2
 8002676:	4a05      	ldr	r2, [pc, #20]	@ (800268c <_sbrk+0x64>)
 8002678:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800267a:	68fb      	ldr	r3, [r7, #12]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20020000 	.word	0x20020000
 8002688:	00000400 	.word	0x00000400
 800268c:	20000848 	.word	0x20000848
 8002690:	20000a78 	.word	0x20000a78

08002694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002698:	4b06      	ldr	r3, [pc, #24]	@ (80026b4 <SystemInit+0x20>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269e:	4a05      	ldr	r2, [pc, #20]	@ (80026b4 <SystemInit+0x20>)
 80026a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b086      	sub	sp, #24
 80026bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80026be:	f107 0308 	add.w	r3, r7, #8
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]
 80026c6:	605a      	str	r2, [r3, #4]
 80026c8:	609a      	str	r2, [r3, #8]
 80026ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026cc:	463b      	mov	r3, r7
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80026d4:	4b1e      	ldr	r3, [pc, #120]	@ (8002750 <MX_TIM2_Init+0x98>)
 80026d6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80026da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9999;
 80026dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002750 <MX_TIM2_Init+0x98>)
 80026de:	f242 720f 	movw	r2, #9999	@ 0x270f
 80026e2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002750 <MX_TIM2_Init+0x98>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2499;
 80026ea:	4b19      	ldr	r3, [pc, #100]	@ (8002750 <MX_TIM2_Init+0x98>)
 80026ec:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80026f0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026f2:	4b17      	ldr	r3, [pc, #92]	@ (8002750 <MX_TIM2_Init+0x98>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026f8:	4b15      	ldr	r3, [pc, #84]	@ (8002750 <MX_TIM2_Init+0x98>)
 80026fa:	2200      	movs	r2, #0
 80026fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026fe:	4814      	ldr	r0, [pc, #80]	@ (8002750 <MX_TIM2_Init+0x98>)
 8002700:	f002 f972 	bl	80049e8 <HAL_TIM_Base_Init>
 8002704:	4603      	mov	r3, r0
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800270a:	f7ff fc5b 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800270e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002712:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002714:	f107 0308 	add.w	r3, r7, #8
 8002718:	4619      	mov	r1, r3
 800271a:	480d      	ldr	r0, [pc, #52]	@ (8002750 <MX_TIM2_Init+0x98>)
 800271c:	f002 fb06 	bl	8004d2c <HAL_TIM_ConfigClockSource>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002726:	f7ff fc4d 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800272a:	2300      	movs	r3, #0
 800272c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800272e:	2300      	movs	r3, #0
 8002730:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002732:	463b      	mov	r3, r7
 8002734:	4619      	mov	r1, r3
 8002736:	4806      	ldr	r0, [pc, #24]	@ (8002750 <MX_TIM2_Init+0x98>)
 8002738:	f002 fd0e 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 800273c:	4603      	mov	r3, r0
 800273e:	2b00      	cmp	r3, #0
 8002740:	d001      	beq.n	8002746 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002742:	f7ff fc3f 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002746:	bf00      	nop
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	2000084c 	.word	0x2000084c

08002754 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800275a:	f107 0308 	add.w	r3, r7, #8
 800275e:	2200      	movs	r2, #0
 8002760:	601a      	str	r2, [r3, #0]
 8002762:	605a      	str	r2, [r3, #4]
 8002764:	609a      	str	r2, [r3, #8]
 8002766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002768:	463b      	mov	r3, r7
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002770:	4b1d      	ldr	r3, [pc, #116]	@ (80027e8 <MX_TIM3_Init+0x94>)
 8002772:	4a1e      	ldr	r2, [pc, #120]	@ (80027ec <MX_TIM3_Init+0x98>)
 8002774:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9999;
 8002776:	4b1c      	ldr	r3, [pc, #112]	@ (80027e8 <MX_TIM3_Init+0x94>)
 8002778:	f242 720f 	movw	r2, #9999	@ 0x270f
 800277c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800277e:	4b1a      	ldr	r3, [pc, #104]	@ (80027e8 <MX_TIM3_Init+0x94>)
 8002780:	2200      	movs	r2, #0
 8002782:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8002784:	4b18      	ldr	r3, [pc, #96]	@ (80027e8 <MX_TIM3_Init+0x94>)
 8002786:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800278a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800278c:	4b16      	ldr	r3, [pc, #88]	@ (80027e8 <MX_TIM3_Init+0x94>)
 800278e:	2200      	movs	r2, #0
 8002790:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002792:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <MX_TIM3_Init+0x94>)
 8002794:	2200      	movs	r2, #0
 8002796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002798:	4813      	ldr	r0, [pc, #76]	@ (80027e8 <MX_TIM3_Init+0x94>)
 800279a:	f002 f925 	bl	80049e8 <HAL_TIM_Base_Init>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80027a4:	f7ff fc0e 	bl	8001fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80027ac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027ae:	f107 0308 	add.w	r3, r7, #8
 80027b2:	4619      	mov	r1, r3
 80027b4:	480c      	ldr	r0, [pc, #48]	@ (80027e8 <MX_TIM3_Init+0x94>)
 80027b6:	f002 fab9 	bl	8004d2c <HAL_TIM_ConfigClockSource>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80027c0:	f7ff fc00 	bl	8001fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027c4:	2300      	movs	r3, #0
 80027c6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027cc:	463b      	mov	r3, r7
 80027ce:	4619      	mov	r1, r3
 80027d0:	4805      	ldr	r0, [pc, #20]	@ (80027e8 <MX_TIM3_Init+0x94>)
 80027d2:	f002 fcc1 	bl	8005158 <HAL_TIMEx_MasterConfigSynchronization>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80027dc:	f7ff fbf2 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027e0:	bf00      	nop
 80027e2:	3718      	adds	r7, #24
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000894 	.word	0x20000894
 80027ec:	40000400 	.word	0x40000400

080027f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002800:	d116      	bne.n	8002830 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b1a      	ldr	r3, [pc, #104]	@ (8002870 <HAL_TIM_Base_MspInit+0x80>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280a:	4a19      	ldr	r2, [pc, #100]	@ (8002870 <HAL_TIM_Base_MspInit+0x80>)
 800280c:	f043 0301 	orr.w	r3, r3, #1
 8002810:	6413      	str	r3, [r2, #64]	@ 0x40
 8002812:	4b17      	ldr	r3, [pc, #92]	@ (8002870 <HAL_TIM_Base_MspInit+0x80>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 800281e:	2200      	movs	r2, #0
 8002820:	2101      	movs	r1, #1
 8002822:	201c      	movs	r0, #28
 8002824:	f000 fa35 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002828:	201c      	movs	r0, #28
 800282a:	f000 fa4e 	bl	8002cca <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800282e:	e01a      	b.n	8002866 <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0f      	ldr	r2, [pc, #60]	@ (8002874 <HAL_TIM_Base_MspInit+0x84>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d115      	bne.n	8002866 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	60bb      	str	r3, [r7, #8]
 800283e:	4b0c      	ldr	r3, [pc, #48]	@ (8002870 <HAL_TIM_Base_MspInit+0x80>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	4a0b      	ldr	r2, [pc, #44]	@ (8002870 <HAL_TIM_Base_MspInit+0x80>)
 8002844:	f043 0302 	orr.w	r3, r3, #2
 8002848:	6413      	str	r3, [r2, #64]	@ 0x40
 800284a:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <HAL_TIM_Base_MspInit+0x80>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	60bb      	str	r3, [r7, #8]
 8002854:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2101      	movs	r1, #1
 800285a:	201d      	movs	r0, #29
 800285c:	f000 fa19 	bl	8002c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002860:	201d      	movs	r0, #29
 8002862:	f000 fa32 	bl	8002cca <HAL_NVIC_EnableIRQ>
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40000400 	.word	0x40000400

08002878 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800287c:	4b11      	ldr	r3, [pc, #68]	@ (80028c4 <MX_USART2_UART_Init+0x4c>)
 800287e:	4a12      	ldr	r2, [pc, #72]	@ (80028c8 <MX_USART2_UART_Init+0x50>)
 8002880:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002882:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <MX_USART2_UART_Init+0x4c>)
 8002884:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002888:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800288a:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <MX_USART2_UART_Init+0x4c>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002890:	4b0c      	ldr	r3, [pc, #48]	@ (80028c4 <MX_USART2_UART_Init+0x4c>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002896:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <MX_USART2_UART_Init+0x4c>)
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800289c:	4b09      	ldr	r3, [pc, #36]	@ (80028c4 <MX_USART2_UART_Init+0x4c>)
 800289e:	220c      	movs	r2, #12
 80028a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028a2:	4b08      	ldr	r3, [pc, #32]	@ (80028c4 <MX_USART2_UART_Init+0x4c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028a8:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <MX_USART2_UART_Init+0x4c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80028ae:	4805      	ldr	r0, [pc, #20]	@ (80028c4 <MX_USART2_UART_Init+0x4c>)
 80028b0:	f002 fcd4 	bl	800525c <HAL_UART_Init>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80028ba:	f7ff fb83 	bl	8001fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80028be:	bf00      	nop
 80028c0:	bd80      	pop	{r7, pc}
 80028c2:	bf00      	nop
 80028c4:	200008dc 	.word	0x200008dc
 80028c8:	40004400 	.word	0x40004400

080028cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b08a      	sub	sp, #40	@ 0x28
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d4:	f107 0314 	add.w	r3, r7, #20
 80028d8:	2200      	movs	r2, #0
 80028da:	601a      	str	r2, [r3, #0]
 80028dc:	605a      	str	r2, [r3, #4]
 80028de:	609a      	str	r2, [r3, #8]
 80028e0:	60da      	str	r2, [r3, #12]
 80028e2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a19      	ldr	r2, [pc, #100]	@ (8002950 <HAL_UART_MspInit+0x84>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d12b      	bne.n	8002946 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	4b18      	ldr	r3, [pc, #96]	@ (8002954 <HAL_UART_MspInit+0x88>)
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	4a17      	ldr	r2, [pc, #92]	@ (8002954 <HAL_UART_MspInit+0x88>)
 80028f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80028fe:	4b15      	ldr	r3, [pc, #84]	@ (8002954 <HAL_UART_MspInit+0x88>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002906:	613b      	str	r3, [r7, #16]
 8002908:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <HAL_UART_MspInit+0x88>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002912:	4a10      	ldr	r2, [pc, #64]	@ (8002954 <HAL_UART_MspInit+0x88>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6313      	str	r3, [r2, #48]	@ 0x30
 800291a:	4b0e      	ldr	r3, [pc, #56]	@ (8002954 <HAL_UART_MspInit+0x88>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002926:	230c      	movs	r3, #12
 8002928:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292a:	2302      	movs	r3, #2
 800292c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800292e:	2300      	movs	r3, #0
 8002930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002932:	2303      	movs	r3, #3
 8002934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002936:	2307      	movs	r3, #7
 8002938:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293a:	f107 0314 	add.w	r3, r7, #20
 800293e:	4619      	mov	r1, r3
 8002940:	4805      	ldr	r0, [pc, #20]	@ (8002958 <HAL_UART_MspInit+0x8c>)
 8002942:	f000 f9dd 	bl	8002d00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002946:	bf00      	nop
 8002948:	3728      	adds	r7, #40	@ 0x28
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	40004400 	.word	0x40004400
 8002954:	40023800 	.word	0x40023800
 8002958:	40020000 	.word	0x40020000

0800295c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800295c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002994 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002960:	f7ff fe98 	bl	8002694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002964:	480c      	ldr	r0, [pc, #48]	@ (8002998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002966:	490d      	ldr	r1, [pc, #52]	@ (800299c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002968:	4a0d      	ldr	r2, [pc, #52]	@ (80029a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800296a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800296c:	e002      	b.n	8002974 <LoopCopyDataInit>

0800296e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800296e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002972:	3304      	adds	r3, #4

08002974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002978:	d3f9      	bcc.n	800296e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800297a:	4a0a      	ldr	r2, [pc, #40]	@ (80029a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800297c:	4c0a      	ldr	r4, [pc, #40]	@ (80029a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800297e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002980:	e001      	b.n	8002986 <LoopFillZerobss>

08002982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002984:	3204      	adds	r2, #4

08002986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002988:	d3fb      	bcc.n	8002982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800298a:	f003 fe63 	bl	8006654 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800298e:	f7ff f90f 	bl	8001bb0 <main>
  bx  lr    
 8002992:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800299c:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80029a0:	0800a150 	.word	0x0800a150
  ldr r2, =_sbss
 80029a4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80029a8:	20000a74 	.word	0x20000a74

080029ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029ac:	e7fe      	b.n	80029ac <ADC_IRQHandler>
	...

080029b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029b4:	4b0e      	ldr	r3, [pc, #56]	@ (80029f0 <HAL_Init+0x40>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a0d      	ldr	r2, [pc, #52]	@ (80029f0 <HAL_Init+0x40>)
 80029ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80029be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029c0:	4b0b      	ldr	r3, [pc, #44]	@ (80029f0 <HAL_Init+0x40>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a0a      	ldr	r2, [pc, #40]	@ (80029f0 <HAL_Init+0x40>)
 80029c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80029ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029cc:	4b08      	ldr	r3, [pc, #32]	@ (80029f0 <HAL_Init+0x40>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a07      	ldr	r2, [pc, #28]	@ (80029f0 <HAL_Init+0x40>)
 80029d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029d8:	2003      	movs	r0, #3
 80029da:	f000 f94f 	bl	8002c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029de:	2000      	movs	r0, #0
 80029e0:	f000 f808 	bl	80029f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029e4:	f7ff fd24 	bl	8002430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029e8:	2300      	movs	r3, #0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023c00 	.word	0x40023c00

080029f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029fc:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <HAL_InitTick+0x54>)
 80029fe:	681a      	ldr	r2, [r3, #0]
 8002a00:	4b12      	ldr	r3, [pc, #72]	@ (8002a4c <HAL_InitTick+0x58>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	4619      	mov	r1, r3
 8002a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 f967 	bl	8002ce6 <HAL_SYSTICK_Config>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d001      	beq.n	8002a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e00e      	b.n	8002a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b0f      	cmp	r3, #15
 8002a26:	d80a      	bhi.n	8002a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a28:	2200      	movs	r2, #0
 8002a2a:	6879      	ldr	r1, [r7, #4]
 8002a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a30:	f000 f92f 	bl	8002c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a34:	4a06      	ldr	r2, [pc, #24]	@ (8002a50 <HAL_InitTick+0x5c>)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	e000      	b.n	8002a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	20000014 	.word	0x20000014
 8002a4c:	2000001c 	.word	0x2000001c
 8002a50:	20000018 	.word	0x20000018

08002a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a58:	4b06      	ldr	r3, [pc, #24]	@ (8002a74 <HAL_IncTick+0x20>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	4b06      	ldr	r3, [pc, #24]	@ (8002a78 <HAL_IncTick+0x24>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4413      	add	r3, r2
 8002a64:	4a04      	ldr	r2, [pc, #16]	@ (8002a78 <HAL_IncTick+0x24>)
 8002a66:	6013      	str	r3, [r2, #0]
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	2000001c 	.word	0x2000001c
 8002a78:	20000924 	.word	0x20000924

08002a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a80:	4b03      	ldr	r3, [pc, #12]	@ (8002a90 <HAL_GetTick+0x14>)
 8002a82:	681b      	ldr	r3, [r3, #0]
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr
 8002a8e:	bf00      	nop
 8002a90:	20000924 	.word	0x20000924

08002a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a9c:	f7ff ffee 	bl	8002a7c <HAL_GetTick>
 8002aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d005      	beq.n	8002aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002aae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ad8 <HAL_Delay+0x44>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002aba:	bf00      	nop
 8002abc:	f7ff ffde 	bl	8002a7c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68bb      	ldr	r3, [r7, #8]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d8f7      	bhi.n	8002abc <HAL_Delay+0x28>
  {
  }
}
 8002acc:	bf00      	nop
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	2000001c 	.word	0x2000001c

08002adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002aec:	4b0c      	ldr	r3, [pc, #48]	@ (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002af2:	68ba      	ldr	r2, [r7, #8]
 8002af4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002af8:	4013      	ands	r3, r2
 8002afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b04:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b08:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b0e:	4a04      	ldr	r2, [pc, #16]	@ (8002b20 <__NVIC_SetPriorityGrouping+0x44>)
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	60d3      	str	r3, [r2, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000ed00 	.word	0xe000ed00

08002b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b28:	4b04      	ldr	r3, [pc, #16]	@ (8002b3c <__NVIC_GetPriorityGrouping+0x18>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	0a1b      	lsrs	r3, r3, #8
 8002b2e:	f003 0307 	and.w	r3, r3, #7
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr
 8002b3c:	e000ed00 	.word	0xe000ed00

08002b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b40:	b480      	push	{r7}
 8002b42:	b083      	sub	sp, #12
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	4603      	mov	r3, r0
 8002b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	db0b      	blt.n	8002b6a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b52:	79fb      	ldrb	r3, [r7, #7]
 8002b54:	f003 021f 	and.w	r2, r3, #31
 8002b58:	4907      	ldr	r1, [pc, #28]	@ (8002b78 <__NVIC_EnableIRQ+0x38>)
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2001      	movs	r0, #1
 8002b62:	fa00 f202 	lsl.w	r2, r0, r2
 8002b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b6a:	bf00      	nop
 8002b6c:	370c      	adds	r7, #12
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
 8002b76:	bf00      	nop
 8002b78:	e000e100 	.word	0xe000e100

08002b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	6039      	str	r1, [r7, #0]
 8002b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	db0a      	blt.n	8002ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	b2da      	uxtb	r2, r3
 8002b94:	490c      	ldr	r1, [pc, #48]	@ (8002bc8 <__NVIC_SetPriority+0x4c>)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	0112      	lsls	r2, r2, #4
 8002b9c:	b2d2      	uxtb	r2, r2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ba4:	e00a      	b.n	8002bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	b2da      	uxtb	r2, r3
 8002baa:	4908      	ldr	r1, [pc, #32]	@ (8002bcc <__NVIC_SetPriority+0x50>)
 8002bac:	79fb      	ldrb	r3, [r7, #7]
 8002bae:	f003 030f 	and.w	r3, r3, #15
 8002bb2:	3b04      	subs	r3, #4
 8002bb4:	0112      	lsls	r2, r2, #4
 8002bb6:	b2d2      	uxtb	r2, r2
 8002bb8:	440b      	add	r3, r1
 8002bba:	761a      	strb	r2, [r3, #24]
}
 8002bbc:	bf00      	nop
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000e100 	.word	0xe000e100
 8002bcc:	e000ed00 	.word	0xe000ed00

08002bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b089      	sub	sp, #36	@ 0x24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	f1c3 0307 	rsb	r3, r3, #7
 8002bea:	2b04      	cmp	r3, #4
 8002bec:	bf28      	it	cs
 8002bee:	2304      	movcs	r3, #4
 8002bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	3304      	adds	r3, #4
 8002bf6:	2b06      	cmp	r3, #6
 8002bf8:	d902      	bls.n	8002c00 <NVIC_EncodePriority+0x30>
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3b03      	subs	r3, #3
 8002bfe:	e000      	b.n	8002c02 <NVIC_EncodePriority+0x32>
 8002c00:	2300      	movs	r3, #0
 8002c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c04:	f04f 32ff 	mov.w	r2, #4294967295
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	43da      	mvns	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	401a      	ands	r2, r3
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c18:	f04f 31ff 	mov.w	r1, #4294967295
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c22:	43d9      	mvns	r1, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c28:	4313      	orrs	r3, r2
         );
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3724      	adds	r7, #36	@ 0x24
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
	...

08002c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c48:	d301      	bcc.n	8002c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e00f      	b.n	8002c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c78 <SysTick_Config+0x40>)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c56:	210f      	movs	r1, #15
 8002c58:	f04f 30ff 	mov.w	r0, #4294967295
 8002c5c:	f7ff ff8e 	bl	8002b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c60:	4b05      	ldr	r3, [pc, #20]	@ (8002c78 <SysTick_Config+0x40>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c66:	4b04      	ldr	r3, [pc, #16]	@ (8002c78 <SysTick_Config+0x40>)
 8002c68:	2207      	movs	r2, #7
 8002c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c6c:	2300      	movs	r3, #0
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
 8002c76:	bf00      	nop
 8002c78:	e000e010 	.word	0xe000e010

08002c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff29 	bl	8002adc <__NVIC_SetPriorityGrouping>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b086      	sub	sp, #24
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	4603      	mov	r3, r0
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	607a      	str	r2, [r7, #4]
 8002c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ca4:	f7ff ff3e 	bl	8002b24 <__NVIC_GetPriorityGrouping>
 8002ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	68b9      	ldr	r1, [r7, #8]
 8002cae:	6978      	ldr	r0, [r7, #20]
 8002cb0:	f7ff ff8e 	bl	8002bd0 <NVIC_EncodePriority>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff5d 	bl	8002b7c <__NVIC_SetPriority>
}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}

08002cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cca:	b580      	push	{r7, lr}
 8002ccc:	b082      	sub	sp, #8
 8002cce:	af00      	add	r7, sp, #0
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7ff ff31 	bl	8002b40 <__NVIC_EnableIRQ>
}
 8002cde:	bf00      	nop
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7ff ffa2 	bl	8002c38 <SysTick_Config>
 8002cf4:	4603      	mov	r3, r0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
	...

08002d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b089      	sub	sp, #36	@ 0x24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d12:	2300      	movs	r3, #0
 8002d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d16:	2300      	movs	r3, #0
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	e159      	b.n	8002fd0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	429a      	cmp	r2, r3
 8002d36:	f040 8148 	bne.w	8002fca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	f003 0303 	and.w	r3, r3, #3
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d005      	beq.n	8002d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d130      	bne.n	8002db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689b      	ldr	r3, [r3, #8]
 8002d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43db      	mvns	r3, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4013      	ands	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	68da      	ldr	r2, [r3, #12]
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d88:	2201      	movs	r2, #1
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	f003 0201 	and.w	r2, r3, #1
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f003 0303 	and.w	r3, r3, #3
 8002dbc:	2b03      	cmp	r3, #3
 8002dbe:	d017      	beq.n	8002df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	2203      	movs	r2, #3
 8002dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd0:	43db      	mvns	r3, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	689a      	ldr	r2, [r3, #8]
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	69ba      	ldr	r2, [r7, #24]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0303 	and.w	r3, r3, #3
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d123      	bne.n	8002e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	08da      	lsrs	r2, r3, #3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3208      	adds	r2, #8
 8002e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	220f      	movs	r2, #15
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	691a      	ldr	r2, [r3, #16]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	009b      	lsls	r3, r3, #2
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	08da      	lsrs	r2, r3, #3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3208      	adds	r2, #8
 8002e3e:	69b9      	ldr	r1, [r7, #24]
 8002e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	005b      	lsls	r3, r3, #1
 8002e4e:	2203      	movs	r2, #3
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	43db      	mvns	r3, r3
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4013      	ands	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f003 0203 	and.w	r2, r3, #3
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80a2 	beq.w	8002fca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e86:	2300      	movs	r3, #0
 8002e88:	60fb      	str	r3, [r7, #12]
 8002e8a:	4b57      	ldr	r3, [pc, #348]	@ (8002fe8 <HAL_GPIO_Init+0x2e8>)
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	4a56      	ldr	r2, [pc, #344]	@ (8002fe8 <HAL_GPIO_Init+0x2e8>)
 8002e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e96:	4b54      	ldr	r3, [pc, #336]	@ (8002fe8 <HAL_GPIO_Init+0x2e8>)
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e9e:	60fb      	str	r3, [r7, #12]
 8002ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002ea2:	4a52      	ldr	r2, [pc, #328]	@ (8002fec <HAL_GPIO_Init+0x2ec>)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	089b      	lsrs	r3, r3, #2
 8002ea8:	3302      	adds	r3, #2
 8002eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f003 0303 	and.w	r3, r3, #3
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	220f      	movs	r2, #15
 8002eba:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a49      	ldr	r2, [pc, #292]	@ (8002ff0 <HAL_GPIO_Init+0x2f0>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d019      	beq.n	8002f02 <HAL_GPIO_Init+0x202>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4a48      	ldr	r2, [pc, #288]	@ (8002ff4 <HAL_GPIO_Init+0x2f4>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d013      	beq.n	8002efe <HAL_GPIO_Init+0x1fe>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a47      	ldr	r2, [pc, #284]	@ (8002ff8 <HAL_GPIO_Init+0x2f8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d00d      	beq.n	8002efa <HAL_GPIO_Init+0x1fa>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a46      	ldr	r2, [pc, #280]	@ (8002ffc <HAL_GPIO_Init+0x2fc>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d007      	beq.n	8002ef6 <HAL_GPIO_Init+0x1f6>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a45      	ldr	r2, [pc, #276]	@ (8003000 <HAL_GPIO_Init+0x300>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d101      	bne.n	8002ef2 <HAL_GPIO_Init+0x1f2>
 8002eee:	2304      	movs	r3, #4
 8002ef0:	e008      	b.n	8002f04 <HAL_GPIO_Init+0x204>
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	e006      	b.n	8002f04 <HAL_GPIO_Init+0x204>
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e004      	b.n	8002f04 <HAL_GPIO_Init+0x204>
 8002efa:	2302      	movs	r3, #2
 8002efc:	e002      	b.n	8002f04 <HAL_GPIO_Init+0x204>
 8002efe:	2301      	movs	r3, #1
 8002f00:	e000      	b.n	8002f04 <HAL_GPIO_Init+0x204>
 8002f02:	2300      	movs	r3, #0
 8002f04:	69fa      	ldr	r2, [r7, #28]
 8002f06:	f002 0203 	and.w	r2, r2, #3
 8002f0a:	0092      	lsls	r2, r2, #2
 8002f0c:	4093      	lsls	r3, r2
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f14:	4935      	ldr	r1, [pc, #212]	@ (8002fec <HAL_GPIO_Init+0x2ec>)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	089b      	lsrs	r3, r3, #2
 8002f1a:	3302      	adds	r3, #2
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f22:	4b38      	ldr	r3, [pc, #224]	@ (8003004 <HAL_GPIO_Init+0x304>)
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f46:	4a2f      	ldr	r2, [pc, #188]	@ (8003004 <HAL_GPIO_Init+0x304>)
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8003004 <HAL_GPIO_Init+0x304>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	43db      	mvns	r3, r3
 8002f56:	69ba      	ldr	r2, [r7, #24]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d003      	beq.n	8002f70 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f70:	4a24      	ldr	r2, [pc, #144]	@ (8003004 <HAL_GPIO_Init+0x304>)
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f76:	4b23      	ldr	r3, [pc, #140]	@ (8003004 <HAL_GPIO_Init+0x304>)
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	4313      	orrs	r3, r2
 8002f98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f9a:	4a1a      	ldr	r2, [pc, #104]	@ (8003004 <HAL_GPIO_Init+0x304>)
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fa0:	4b18      	ldr	r3, [pc, #96]	@ (8003004 <HAL_GPIO_Init+0x304>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	4013      	ands	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d003      	beq.n	8002fc4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fbc:	69ba      	ldr	r2, [r7, #24]
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fc4:	4a0f      	ldr	r2, [pc, #60]	@ (8003004 <HAL_GPIO_Init+0x304>)
 8002fc6:	69bb      	ldr	r3, [r7, #24]
 8002fc8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	2b0f      	cmp	r3, #15
 8002fd4:	f67f aea2 	bls.w	8002d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fd8:	bf00      	nop
 8002fda:	bf00      	nop
 8002fdc:	3724      	adds	r7, #36	@ 0x24
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	40013800 	.word	0x40013800
 8002ff0:	40020000 	.word	0x40020000
 8002ff4:	40020400 	.word	0x40020400
 8002ff8:	40020800 	.word	0x40020800
 8002ffc:	40020c00 	.word	0x40020c00
 8003000:	40021000 	.word	0x40021000
 8003004:	40013c00 	.word	0x40013c00

08003008 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
 8003010:	460b      	mov	r3, r1
 8003012:	807b      	strh	r3, [r7, #2]
 8003014:	4613      	mov	r3, r2
 8003016:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003018:	787b      	ldrb	r3, [r7, #1]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d003      	beq.n	8003026 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800301e:	887a      	ldrh	r2, [r7, #2]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003024:	e003      	b.n	800302e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	041a      	lsls	r2, r3, #16
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	619a      	str	r2, [r3, #24]
}
 800302e:	bf00      	nop
 8003030:	370c      	adds	r7, #12
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800303a:	b480      	push	{r7}
 800303c:	b085      	sub	sp, #20
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
 8003042:	460b      	mov	r3, r1
 8003044:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800304c:	887a      	ldrh	r2, [r7, #2]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4013      	ands	r3, r2
 8003052:	041a      	lsls	r2, r3, #16
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	43d9      	mvns	r1, r3
 8003058:	887b      	ldrh	r3, [r7, #2]
 800305a:	400b      	ands	r3, r1
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	619a      	str	r2, [r3, #24]
}
 8003062:	bf00      	nop
 8003064:	3714      	adds	r7, #20
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr
	...

08003070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d101      	bne.n	8003082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800307e:	2301      	movs	r3, #1
 8003080:	e12b      	b.n	80032da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d106      	bne.n	800309c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f7fe fd40 	bl	8001b1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2224      	movs	r2, #36	@ 0x24
 80030a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0201 	bic.w	r2, r2, #1
 80030b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030d4:	f001 fc60 	bl	8004998 <HAL_RCC_GetPCLK1Freq>
 80030d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	4a81      	ldr	r2, [pc, #516]	@ (80032e4 <HAL_I2C_Init+0x274>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d807      	bhi.n	80030f4 <HAL_I2C_Init+0x84>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4a80      	ldr	r2, [pc, #512]	@ (80032e8 <HAL_I2C_Init+0x278>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	bf94      	ite	ls
 80030ec:	2301      	movls	r3, #1
 80030ee:	2300      	movhi	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	e006      	b.n	8003102 <HAL_I2C_Init+0x92>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a7d      	ldr	r2, [pc, #500]	@ (80032ec <HAL_I2C_Init+0x27c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	bf94      	ite	ls
 80030fc:	2301      	movls	r3, #1
 80030fe:	2300      	movhi	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e0e7      	b.n	80032da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	4a78      	ldr	r2, [pc, #480]	@ (80032f0 <HAL_I2C_Init+0x280>)
 800310e:	fba2 2303 	umull	r2, r3, r2, r3
 8003112:	0c9b      	lsrs	r3, r3, #18
 8003114:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	430a      	orrs	r2, r1
 8003128:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	6a1b      	ldr	r3, [r3, #32]
 8003130:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	4a6a      	ldr	r2, [pc, #424]	@ (80032e4 <HAL_I2C_Init+0x274>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d802      	bhi.n	8003144 <HAL_I2C_Init+0xd4>
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	3301      	adds	r3, #1
 8003142:	e009      	b.n	8003158 <HAL_I2C_Init+0xe8>
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	4a69      	ldr	r2, [pc, #420]	@ (80032f4 <HAL_I2C_Init+0x284>)
 8003150:	fba2 2303 	umull	r2, r3, r2, r3
 8003154:	099b      	lsrs	r3, r3, #6
 8003156:	3301      	adds	r3, #1
 8003158:	687a      	ldr	r2, [r7, #4]
 800315a:	6812      	ldr	r2, [r2, #0]
 800315c:	430b      	orrs	r3, r1
 800315e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800316a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	495c      	ldr	r1, [pc, #368]	@ (80032e4 <HAL_I2C_Init+0x274>)
 8003174:	428b      	cmp	r3, r1
 8003176:	d819      	bhi.n	80031ac <HAL_I2C_Init+0x13c>
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	1e59      	subs	r1, r3, #1
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	fbb1 f3f3 	udiv	r3, r1, r3
 8003186:	1c59      	adds	r1, r3, #1
 8003188:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800318c:	400b      	ands	r3, r1
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_I2C_Init+0x138>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1e59      	subs	r1, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	005b      	lsls	r3, r3, #1
 800319c:	fbb1 f3f3 	udiv	r3, r1, r3
 80031a0:	3301      	adds	r3, #1
 80031a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a6:	e051      	b.n	800324c <HAL_I2C_Init+0x1dc>
 80031a8:	2304      	movs	r3, #4
 80031aa:	e04f      	b.n	800324c <HAL_I2C_Init+0x1dc>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d111      	bne.n	80031d8 <HAL_I2C_Init+0x168>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	1e58      	subs	r0, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6859      	ldr	r1, [r3, #4]
 80031bc:	460b      	mov	r3, r1
 80031be:	005b      	lsls	r3, r3, #1
 80031c0:	440b      	add	r3, r1
 80031c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031c6:	3301      	adds	r3, #1
 80031c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	bf0c      	ite	eq
 80031d0:	2301      	moveq	r3, #1
 80031d2:	2300      	movne	r3, #0
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	e012      	b.n	80031fe <HAL_I2C_Init+0x18e>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	1e58      	subs	r0, r3, #1
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6859      	ldr	r1, [r3, #4]
 80031e0:	460b      	mov	r3, r1
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	0099      	lsls	r1, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ee:	3301      	adds	r3, #1
 80031f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf0c      	ite	eq
 80031f8:	2301      	moveq	r3, #1
 80031fa:	2300      	movne	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <HAL_I2C_Init+0x196>
 8003202:	2301      	movs	r3, #1
 8003204:	e022      	b.n	800324c <HAL_I2C_Init+0x1dc>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d10e      	bne.n	800322c <HAL_I2C_Init+0x1bc>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	1e58      	subs	r0, r3, #1
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6859      	ldr	r1, [r3, #4]
 8003216:	460b      	mov	r3, r1
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	440b      	add	r3, r1
 800321c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003220:	3301      	adds	r3, #1
 8003222:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003226:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800322a:	e00f      	b.n	800324c <HAL_I2C_Init+0x1dc>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1e58      	subs	r0, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	0099      	lsls	r1, r3, #2
 800323c:	440b      	add	r3, r1
 800323e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003242:	3301      	adds	r3, #1
 8003244:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003248:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	6809      	ldr	r1, [r1, #0]
 8003250:	4313      	orrs	r3, r2
 8003252:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	69da      	ldr	r2, [r3, #28]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800327a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6911      	ldr	r1, [r2, #16]
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	68d2      	ldr	r2, [r2, #12]
 8003286:	4311      	orrs	r1, r2
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	6812      	ldr	r2, [r2, #0]
 800328c:	430b      	orrs	r3, r1
 800328e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	699b      	ldr	r3, [r3, #24]
 80032a2:	431a      	orrs	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	430a      	orrs	r2, r1
 80032aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0201 	orr.w	r2, r2, #1
 80032ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2220      	movs	r2, #32
 80032c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3710      	adds	r7, #16
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	000186a0 	.word	0x000186a0
 80032e8:	001e847f 	.word	0x001e847f
 80032ec:	003d08ff 	.word	0x003d08ff
 80032f0:	431bde83 	.word	0x431bde83
 80032f4:	10624dd3 	.word	0x10624dd3

080032f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b088      	sub	sp, #32
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	4608      	mov	r0, r1
 8003302:	4611      	mov	r1, r2
 8003304:	461a      	mov	r2, r3
 8003306:	4603      	mov	r3, r0
 8003308:	817b      	strh	r3, [r7, #10]
 800330a:	460b      	mov	r3, r1
 800330c:	813b      	strh	r3, [r7, #8]
 800330e:	4613      	mov	r3, r2
 8003310:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003312:	f7ff fbb3 	bl	8002a7c <HAL_GetTick>
 8003316:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b20      	cmp	r3, #32
 8003322:	f040 80d9 	bne.w	80034d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	9300      	str	r3, [sp, #0]
 800332a:	2319      	movs	r3, #25
 800332c:	2201      	movs	r2, #1
 800332e:	496d      	ldr	r1, [pc, #436]	@ (80034e4 <HAL_I2C_Mem_Write+0x1ec>)
 8003330:	68f8      	ldr	r0, [r7, #12]
 8003332:	f000 fc8b 	bl	8003c4c <I2C_WaitOnFlagUntilTimeout>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d001      	beq.n	8003340 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800333c:	2302      	movs	r3, #2
 800333e:	e0cc      	b.n	80034da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003346:	2b01      	cmp	r3, #1
 8003348:	d101      	bne.n	800334e <HAL_I2C_Mem_Write+0x56>
 800334a:	2302      	movs	r3, #2
 800334c:	e0c5      	b.n	80034da <HAL_I2C_Mem_Write+0x1e2>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2201      	movs	r2, #1
 8003352:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0301 	and.w	r3, r3, #1
 8003360:	2b01      	cmp	r3, #1
 8003362:	d007      	beq.n	8003374 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003382:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2221      	movs	r2, #33	@ 0x21
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2240      	movs	r2, #64	@ 0x40
 8003390:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2200      	movs	r2, #0
 8003398:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a3a      	ldr	r2, [r7, #32]
 800339e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80033a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033aa:	b29a      	uxth	r2, r3
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	4a4d      	ldr	r2, [pc, #308]	@ (80034e8 <HAL_I2C_Mem_Write+0x1f0>)
 80033b4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033b6:	88f8      	ldrh	r0, [r7, #6]
 80033b8:	893a      	ldrh	r2, [r7, #8]
 80033ba:	8979      	ldrh	r1, [r7, #10]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	9301      	str	r3, [sp, #4]
 80033c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	4603      	mov	r3, r0
 80033c6:	68f8      	ldr	r0, [r7, #12]
 80033c8:	f000 fac2 	bl	8003950 <I2C_RequestMemoryWrite>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d052      	beq.n	8003478 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e081      	b.n	80034da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 fd50 	bl	8003e80 <I2C_WaitOnTXEFlagUntilTimeout>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d00d      	beq.n	8003402 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ea:	2b04      	cmp	r3, #4
 80033ec:	d107      	bne.n	80033fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e06b      	b.n	80034da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	781a      	ldrb	r2, [r3, #0]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341c:	3b01      	subs	r3, #1
 800341e:	b29a      	uxth	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003428:	b29b      	uxth	r3, r3
 800342a:	3b01      	subs	r3, #1
 800342c:	b29a      	uxth	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	695b      	ldr	r3, [r3, #20]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b04      	cmp	r3, #4
 800343e:	d11b      	bne.n	8003478 <HAL_I2C_Mem_Write+0x180>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d017      	beq.n	8003478 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344c:	781a      	ldrb	r2, [r3, #0]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003458:	1c5a      	adds	r2, r3, #1
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003462:	3b01      	subs	r3, #1
 8003464:	b29a      	uxth	r2, r3
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800346e:	b29b      	uxth	r3, r3
 8003470:	3b01      	subs	r3, #1
 8003472:	b29a      	uxth	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1aa      	bne.n	80033d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003484:	68f8      	ldr	r0, [r7, #12]
 8003486:	f000 fd43 	bl	8003f10 <I2C_WaitOnBTFFlagUntilTimeout>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d00d      	beq.n	80034ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003494:	2b04      	cmp	r3, #4
 8003496:	d107      	bne.n	80034a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e016      	b.n	80034da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034d4:	2300      	movs	r3, #0
 80034d6:	e000      	b.n	80034da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80034d8:	2302      	movs	r3, #2
  }
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	00100002 	.word	0x00100002
 80034e8:	ffff0000 	.word	0xffff0000

080034ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08c      	sub	sp, #48	@ 0x30
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	4608      	mov	r0, r1
 80034f6:	4611      	mov	r1, r2
 80034f8:	461a      	mov	r2, r3
 80034fa:	4603      	mov	r3, r0
 80034fc:	817b      	strh	r3, [r7, #10]
 80034fe:	460b      	mov	r3, r1
 8003500:	813b      	strh	r3, [r7, #8]
 8003502:	4613      	mov	r3, r2
 8003504:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003506:	f7ff fab9 	bl	8002a7c <HAL_GetTick>
 800350a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b20      	cmp	r3, #32
 8003516:	f040 8214 	bne.w	8003942 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	2319      	movs	r3, #25
 8003520:	2201      	movs	r2, #1
 8003522:	497b      	ldr	r1, [pc, #492]	@ (8003710 <HAL_I2C_Mem_Read+0x224>)
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fb91 	bl	8003c4c <I2C_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003530:	2302      	movs	r3, #2
 8003532:	e207      	b.n	8003944 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800353a:	2b01      	cmp	r3, #1
 800353c:	d101      	bne.n	8003542 <HAL_I2C_Mem_Read+0x56>
 800353e:	2302      	movs	r3, #2
 8003540:	e200      	b.n	8003944 <HAL_I2C_Mem_Read+0x458>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	2201      	movs	r2, #1
 8003546:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b01      	cmp	r3, #1
 8003556:	d007      	beq.n	8003568 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0201 	orr.w	r2, r2, #1
 8003566:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003576:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2222      	movs	r2, #34	@ 0x22
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2240      	movs	r2, #64	@ 0x40
 8003584:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003592:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003598:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	4a5b      	ldr	r2, [pc, #364]	@ (8003714 <HAL_I2C_Mem_Read+0x228>)
 80035a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035aa:	88f8      	ldrh	r0, [r7, #6]
 80035ac:	893a      	ldrh	r2, [r7, #8]
 80035ae:	8979      	ldrh	r1, [r7, #10]
 80035b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b2:	9301      	str	r3, [sp, #4]
 80035b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b6:	9300      	str	r3, [sp, #0]
 80035b8:	4603      	mov	r3, r0
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 fa5e 	bl	8003a7c <I2C_RequestMemoryRead>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d001      	beq.n	80035ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e1bc      	b.n	8003944 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d113      	bne.n	80035fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035d2:	2300      	movs	r3, #0
 80035d4:	623b      	str	r3, [r7, #32]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	695b      	ldr	r3, [r3, #20]
 80035dc:	623b      	str	r3, [r7, #32]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	623b      	str	r3, [r7, #32]
 80035e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e190      	b.n	800391c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d11b      	bne.n	800363a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	681a      	ldr	r2, [r3, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003610:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003612:	2300      	movs	r3, #0
 8003614:	61fb      	str	r3, [r7, #28]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	695b      	ldr	r3, [r3, #20]
 800361c:	61fb      	str	r3, [r7, #28]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	61fb      	str	r3, [r7, #28]
 8003626:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003636:	601a      	str	r2, [r3, #0]
 8003638:	e170      	b.n	800391c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800363e:	2b02      	cmp	r3, #2
 8003640:	d11b      	bne.n	800367a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003650:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003660:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	61bb      	str	r3, [r7, #24]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	699b      	ldr	r3, [r3, #24]
 8003674:	61bb      	str	r3, [r7, #24]
 8003676:	69bb      	ldr	r3, [r7, #24]
 8003678:	e150      	b.n	800391c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800367a:	2300      	movs	r3, #0
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	699b      	ldr	r3, [r3, #24]
 800368c:	617b      	str	r3, [r7, #20]
 800368e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003690:	e144      	b.n	800391c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003696:	2b03      	cmp	r3, #3
 8003698:	f200 80f1 	bhi.w	800387e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d123      	bne.n	80036ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80036a8:	68f8      	ldr	r0, [r7, #12]
 80036aa:	f000 fc79 	bl	8003fa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036ae:	4603      	mov	r3, r0
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d001      	beq.n	80036b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e145      	b.n	8003944 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	691a      	ldr	r2, [r3, #16]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c2:	b2d2      	uxtb	r2, r2
 80036c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ca:	1c5a      	adds	r2, r3, #1
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d4:	3b01      	subs	r3, #1
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	3b01      	subs	r3, #1
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036ea:	e117      	b.n	800391c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d14e      	bne.n	8003792 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f6:	9300      	str	r3, [sp, #0]
 80036f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036fa:	2200      	movs	r2, #0
 80036fc:	4906      	ldr	r1, [pc, #24]	@ (8003718 <HAL_I2C_Mem_Read+0x22c>)
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 faa4 	bl	8003c4c <I2C_WaitOnFlagUntilTimeout>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d008      	beq.n	800371c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e11a      	b.n	8003944 <HAL_I2C_Mem_Read+0x458>
 800370e:	bf00      	nop
 8003710:	00100002 	.word	0x00100002
 8003714:	ffff0000 	.word	0xffff0000
 8003718:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800372a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	691a      	ldr	r2, [r3, #16]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003736:	b2d2      	uxtb	r2, r2
 8003738:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373e:	1c5a      	adds	r2, r3, #1
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003754:	b29b      	uxth	r3, r3
 8003756:	3b01      	subs	r3, #1
 8003758:	b29a      	uxth	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	b2d2      	uxtb	r2, r2
 800376a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003770:	1c5a      	adds	r2, r3, #1
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800377a:	3b01      	subs	r3, #1
 800377c:	b29a      	uxth	r2, r3
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003786:	b29b      	uxth	r3, r3
 8003788:	3b01      	subs	r3, #1
 800378a:	b29a      	uxth	r2, r3
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003790:	e0c4      	b.n	800391c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	9300      	str	r3, [sp, #0]
 8003796:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003798:	2200      	movs	r2, #0
 800379a:	496c      	ldr	r1, [pc, #432]	@ (800394c <HAL_I2C_Mem_Read+0x460>)
 800379c:	68f8      	ldr	r0, [r7, #12]
 800379e:	f000 fa55 	bl	8003c4c <I2C_WaitOnFlagUntilTimeout>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e0cb      	b.n	8003944 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	691a      	ldr	r2, [r3, #16]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	b2d2      	uxtb	r2, r2
 80037c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	1c5a      	adds	r2, r3, #1
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d8:	3b01      	subs	r3, #1
 80037da:	b29a      	uxth	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	2200      	movs	r2, #0
 80037f6:	4955      	ldr	r1, [pc, #340]	@ (800394c <HAL_I2C_Mem_Read+0x460>)
 80037f8:	68f8      	ldr	r0, [r7, #12]
 80037fa:	f000 fa27 	bl	8003c4c <I2C_WaitOnFlagUntilTimeout>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	e09d      	b.n	8003944 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003816:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	691a      	ldr	r2, [r3, #16]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003822:	b2d2      	uxtb	r2, r2
 8003824:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003834:	3b01      	subs	r3, #1
 8003836:	b29a      	uxth	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003840:	b29b      	uxth	r3, r3
 8003842:	3b01      	subs	r3, #1
 8003844:	b29a      	uxth	r2, r3
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	691a      	ldr	r2, [r3, #16]
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003854:	b2d2      	uxtb	r2, r2
 8003856:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800385c:	1c5a      	adds	r2, r3, #1
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003872:	b29b      	uxth	r3, r3
 8003874:	3b01      	subs	r3, #1
 8003876:	b29a      	uxth	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800387c:	e04e      	b.n	800391c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003880:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003882:	68f8      	ldr	r0, [r7, #12]
 8003884:	f000 fb8c 	bl	8003fa0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003888:	4603      	mov	r3, r0
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e058      	b.n	8003944 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389c:	b2d2      	uxtb	r2, r2
 800389e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038ae:	3b01      	subs	r3, #1
 80038b0:	b29a      	uxth	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	3b01      	subs	r3, #1
 80038be:	b29a      	uxth	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d124      	bne.n	800391c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d107      	bne.n	80038ea <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	691a      	ldr	r2, [r3, #16]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f4:	b2d2      	uxtb	r2, r2
 80038f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038fc:	1c5a      	adds	r2, r3, #1
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003906:	3b01      	subs	r3, #1
 8003908:	b29a      	uxth	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003920:	2b00      	cmp	r3, #0
 8003922:	f47f aeb6 	bne.w	8003692 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2220      	movs	r2, #32
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	2200      	movs	r2, #0
 800393a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800393e:	2300      	movs	r3, #0
 8003940:	e000      	b.n	8003944 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003942:	2302      	movs	r3, #2
  }
}
 8003944:	4618      	mov	r0, r3
 8003946:	3728      	adds	r7, #40	@ 0x28
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	00010004 	.word	0x00010004

08003950 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b088      	sub	sp, #32
 8003954:	af02      	add	r7, sp, #8
 8003956:	60f8      	str	r0, [r7, #12]
 8003958:	4608      	mov	r0, r1
 800395a:	4611      	mov	r1, r2
 800395c:	461a      	mov	r2, r3
 800395e:	4603      	mov	r3, r0
 8003960:	817b      	strh	r3, [r7, #10]
 8003962:	460b      	mov	r3, r1
 8003964:	813b      	strh	r3, [r7, #8]
 8003966:	4613      	mov	r3, r2
 8003968:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003978:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800397a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	2200      	movs	r2, #0
 8003982:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f960 	bl	8003c4c <I2C_WaitOnFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d00d      	beq.n	80039ae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80039a0:	d103      	bne.n	80039aa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80039a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e05f      	b.n	8003a6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039ae:	897b      	ldrh	r3, [r7, #10]
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80039bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c0:	6a3a      	ldr	r2, [r7, #32]
 80039c2:	492d      	ldr	r1, [pc, #180]	@ (8003a78 <I2C_RequestMemoryWrite+0x128>)
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 f9bb 	bl	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e04c      	b.n	8003a6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039d4:	2300      	movs	r3, #0
 80039d6:	617b      	str	r3, [r7, #20]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	617b      	str	r3, [r7, #20]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	617b      	str	r3, [r7, #20]
 80039e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ec:	6a39      	ldr	r1, [r7, #32]
 80039ee:	68f8      	ldr	r0, [r7, #12]
 80039f0:	f000 fa46 	bl	8003e80 <I2C_WaitOnTXEFlagUntilTimeout>
 80039f4:	4603      	mov	r3, r0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00d      	beq.n	8003a16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	2b04      	cmp	r3, #4
 8003a00:	d107      	bne.n	8003a12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e02b      	b.n	8003a6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003a16:	88fb      	ldrh	r3, [r7, #6]
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	d105      	bne.n	8003a28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a1c:	893b      	ldrh	r3, [r7, #8]
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	611a      	str	r2, [r3, #16]
 8003a26:	e021      	b.n	8003a6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a28:	893b      	ldrh	r3, [r7, #8]
 8003a2a:	0a1b      	lsrs	r3, r3, #8
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a38:	6a39      	ldr	r1, [r7, #32]
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f000 fa20 	bl	8003e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a40:	4603      	mov	r3, r0
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d00d      	beq.n	8003a62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	d107      	bne.n	8003a5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	681a      	ldr	r2, [r3, #0]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e005      	b.n	8003a6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a62:	893b      	ldrh	r3, [r7, #8]
 8003a64:	b2da      	uxtb	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3718      	adds	r7, #24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	00010002 	.word	0x00010002

08003a7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b088      	sub	sp, #32
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	4608      	mov	r0, r1
 8003a86:	4611      	mov	r1, r2
 8003a88:	461a      	mov	r2, r3
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	817b      	strh	r3, [r7, #10]
 8003a8e:	460b      	mov	r3, r1
 8003a90:	813b      	strh	r3, [r7, #8]
 8003a92:	4613      	mov	r3, r2
 8003a94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003aa4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ab4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ab8:	9300      	str	r3, [sp, #0]
 8003aba:	6a3b      	ldr	r3, [r7, #32]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f8c2 	bl	8003c4c <I2C_WaitOnFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003adc:	d103      	bne.n	8003ae6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ae4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e0aa      	b.n	8003c40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003aea:	897b      	ldrh	r3, [r7, #10]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	461a      	mov	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003af8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	6a3a      	ldr	r2, [r7, #32]
 8003afe:	4952      	ldr	r1, [pc, #328]	@ (8003c48 <I2C_RequestMemoryRead+0x1cc>)
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f91d 	bl	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b06:	4603      	mov	r3, r0
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d001      	beq.n	8003b10 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e097      	b.n	8003c40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b10:	2300      	movs	r3, #0
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	617b      	str	r3, [r7, #20]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b28:	6a39      	ldr	r1, [r7, #32]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f9a8 	bl	8003e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00d      	beq.n	8003b52 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	2b04      	cmp	r3, #4
 8003b3c:	d107      	bne.n	8003b4e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e076      	b.n	8003c40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003b52:	88fb      	ldrh	r3, [r7, #6]
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d105      	bne.n	8003b64 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b58:	893b      	ldrh	r3, [r7, #8]
 8003b5a:	b2da      	uxtb	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	611a      	str	r2, [r3, #16]
 8003b62:	e021      	b.n	8003ba8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003b64:	893b      	ldrh	r3, [r7, #8]
 8003b66:	0a1b      	lsrs	r3, r3, #8
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b74:	6a39      	ldr	r1, [r7, #32]
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f000 f982 	bl	8003e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00d      	beq.n	8003b9e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d107      	bne.n	8003b9a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e050      	b.n	8003c40 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003b9e:	893b      	ldrh	r3, [r7, #8]
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ba8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003baa:	6a39      	ldr	r1, [r7, #32]
 8003bac:	68f8      	ldr	r0, [r7, #12]
 8003bae:	f000 f967 	bl	8003e80 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00d      	beq.n	8003bd4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bbc:	2b04      	cmp	r3, #4
 8003bbe:	d107      	bne.n	8003bd0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e035      	b.n	8003c40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003be2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003be4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	6a3b      	ldr	r3, [r7, #32]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003bf0:	68f8      	ldr	r0, [r7, #12]
 8003bf2:	f000 f82b 	bl	8003c4c <I2C_WaitOnFlagUntilTimeout>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d00d      	beq.n	8003c18 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c0a:	d103      	bne.n	8003c14 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003c12:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e013      	b.n	8003c40 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003c18:	897b      	ldrh	r3, [r7, #10]
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f043 0301 	orr.w	r3, r3, #1
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c2a:	6a3a      	ldr	r2, [r7, #32]
 8003c2c:	4906      	ldr	r1, [pc, #24]	@ (8003c48 <I2C_RequestMemoryRead+0x1cc>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f886 	bl	8003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e000      	b.n	8003c40 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	00010002 	.word	0x00010002

08003c4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c5c:	e048      	b.n	8003cf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d044      	beq.n	8003cf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c66:	f7fe ff09 	bl	8002a7c <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d139      	bne.n	8003cf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	0c1b      	lsrs	r3, r3, #16
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d10d      	bne.n	8003ca2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	43da      	mvns	r2, r3
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	4013      	ands	r3, r2
 8003c92:	b29b      	uxth	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	bf0c      	ite	eq
 8003c98:	2301      	moveq	r3, #1
 8003c9a:	2300      	movne	r3, #0
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	461a      	mov	r2, r3
 8003ca0:	e00c      	b.n	8003cbc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	43da      	mvns	r2, r3
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	4013      	ands	r3, r2
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	bf0c      	ite	eq
 8003cb4:	2301      	moveq	r3, #1
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	b2db      	uxtb	r3, r3
 8003cba:	461a      	mov	r2, r3
 8003cbc:	79fb      	ldrb	r3, [r7, #7]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d116      	bne.n	8003cf0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2220      	movs	r2, #32
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cdc:	f043 0220 	orr.w	r2, r3, #32
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e023      	b.n	8003d38 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	0c1b      	lsrs	r3, r3, #16
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d10d      	bne.n	8003d16 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	695b      	ldr	r3, [r3, #20]
 8003d00:	43da      	mvns	r2, r3
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4013      	ands	r3, r2
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	e00c      	b.n	8003d30 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	699b      	ldr	r3, [r3, #24]
 8003d1c:	43da      	mvns	r2, r3
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	4013      	ands	r3, r2
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	bf0c      	ite	eq
 8003d28:	2301      	moveq	r3, #1
 8003d2a:	2300      	movne	r3, #0
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	461a      	mov	r2, r3
 8003d30:	79fb      	ldrb	r3, [r7, #7]
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d093      	beq.n	8003c5e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	3710      	adds	r7, #16
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	bd80      	pop	{r7, pc}

08003d40 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b084      	sub	sp, #16
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
 8003d4c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d4e:	e071      	b.n	8003e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	695b      	ldr	r3, [r3, #20]
 8003d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d5e:	d123      	bne.n	8003da8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	681a      	ldr	r2, [r3, #0]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d6e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003d78:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2220      	movs	r2, #32
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d94:	f043 0204 	orr.w	r2, r3, #4
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e067      	b.n	8003e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dae:	d041      	beq.n	8003e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db0:	f7fe fe64 	bl	8002a7c <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d302      	bcc.n	8003dc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d136      	bne.n	8003e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	0c1b      	lsrs	r3, r3, #16
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d10c      	bne.n	8003dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	695b      	ldr	r3, [r3, #20]
 8003dd6:	43da      	mvns	r2, r3
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4013      	ands	r3, r2
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	bf14      	ite	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	2300      	moveq	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	e00b      	b.n	8003e02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	699b      	ldr	r3, [r3, #24]
 8003df0:	43da      	mvns	r2, r3
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	4013      	ands	r3, r2
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d016      	beq.n	8003e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2220      	movs	r2, #32
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e20:	f043 0220 	orr.w	r2, r3, #32
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	e021      	b.n	8003e78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	0c1b      	lsrs	r3, r3, #16
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d10c      	bne.n	8003e58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	43da      	mvns	r2, r3
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4013      	ands	r3, r2
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	bf14      	ite	ne
 8003e50:	2301      	movne	r3, #1
 8003e52:	2300      	moveq	r3, #0
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	e00b      	b.n	8003e70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	43da      	mvns	r2, r3
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	4013      	ands	r3, r2
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	bf14      	ite	ne
 8003e6a:	2301      	movne	r3, #1
 8003e6c:	2300      	moveq	r3, #0
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	f47f af6d 	bne.w	8003d50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e8c:	e034      	b.n	8003ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 f8e3 	bl	800405a <I2C_IsAcknowledgeFailed>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d001      	beq.n	8003e9e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e034      	b.n	8003f08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ea4:	d028      	beq.n	8003ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ea6:	f7fe fde9 	bl	8002a7c <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	68ba      	ldr	r2, [r7, #8]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d302      	bcc.n	8003ebc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11d      	bne.n	8003ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ec6:	2b80      	cmp	r3, #128	@ 0x80
 8003ec8:	d016      	beq.n	8003ef8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee4:	f043 0220 	orr.w	r2, r3, #32
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e007      	b.n	8003f08 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	695b      	ldr	r3, [r3, #20]
 8003efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f02:	2b80      	cmp	r3, #128	@ 0x80
 8003f04:	d1c3      	bne.n	8003e8e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f06:	2300      	movs	r3, #0
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f1c:	e034      	b.n	8003f88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f000 f89b 	bl	800405a <I2C_IsAcknowledgeFailed>
 8003f24:	4603      	mov	r3, r0
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e034      	b.n	8003f98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f34:	d028      	beq.n	8003f88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f36:	f7fe fda1 	bl	8002a7c <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	68ba      	ldr	r2, [r7, #8]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d302      	bcc.n	8003f4c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d11d      	bne.n	8003f88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	695b      	ldr	r3, [r3, #20]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d016      	beq.n	8003f88 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2220      	movs	r2, #32
 8003f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f74:	f043 0220 	orr.w	r2, r3, #32
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e007      	b.n	8003f98 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d1c3      	bne.n	8003f1e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3710      	adds	r7, #16
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003fac:	e049      	b.n	8004042 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b10      	cmp	r3, #16
 8003fba:	d119      	bne.n	8003ff0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f06f 0210 	mvn.w	r2, #16
 8003fc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e030      	b.n	8004052 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ff0:	f7fe fd44 	bl	8002a7c <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	429a      	cmp	r2, r3
 8003ffe:	d302      	bcc.n	8004006 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d11d      	bne.n	8004042 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004010:	2b40      	cmp	r3, #64	@ 0x40
 8004012:	d016      	beq.n	8004042 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2220      	movs	r2, #32
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800402e:	f043 0220 	orr.w	r2, r3, #32
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e007      	b.n	8004052 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695b      	ldr	r3, [r3, #20]
 8004048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800404c:	2b40      	cmp	r3, #64	@ 0x40
 800404e:	d1ae      	bne.n	8003fae <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	695b      	ldr	r3, [r3, #20]
 8004068:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800406c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004070:	d11b      	bne.n	80040aa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800407a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	f043 0204 	orr.w	r2, r3, #4
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b086      	sub	sp, #24
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e267      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d075      	beq.n	80041c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040d6:	4b88      	ldr	r3, [pc, #544]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 030c 	and.w	r3, r3, #12
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d00c      	beq.n	80040fc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040e2:	4b85      	ldr	r3, [pc, #532]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040ea:	2b08      	cmp	r3, #8
 80040ec:	d112      	bne.n	8004114 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040ee:	4b82      	ldr	r3, [pc, #520]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040fa:	d10b      	bne.n	8004114 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040fc:	4b7e      	ldr	r3, [pc, #504]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004104:	2b00      	cmp	r3, #0
 8004106:	d05b      	beq.n	80041c0 <HAL_RCC_OscConfig+0x108>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d157      	bne.n	80041c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e242      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800411c:	d106      	bne.n	800412c <HAL_RCC_OscConfig+0x74>
 800411e:	4b76      	ldr	r3, [pc, #472]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a75      	ldr	r2, [pc, #468]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 8004124:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	e01d      	b.n	8004168 <HAL_RCC_OscConfig+0xb0>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004134:	d10c      	bne.n	8004150 <HAL_RCC_OscConfig+0x98>
 8004136:	4b70      	ldr	r3, [pc, #448]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	4a6f      	ldr	r2, [pc, #444]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 800413c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004140:	6013      	str	r3, [r2, #0]
 8004142:	4b6d      	ldr	r3, [pc, #436]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a6c      	ldr	r2, [pc, #432]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 8004148:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e00b      	b.n	8004168 <HAL_RCC_OscConfig+0xb0>
 8004150:	4b69      	ldr	r3, [pc, #420]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a68      	ldr	r2, [pc, #416]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 8004156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800415a:	6013      	str	r3, [r2, #0]
 800415c:	4b66      	ldr	r3, [pc, #408]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a65      	ldr	r2, [pc, #404]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 8004162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d013      	beq.n	8004198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004170:	f7fe fc84 	bl	8002a7c <HAL_GetTick>
 8004174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004176:	e008      	b.n	800418a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004178:	f7fe fc80 	bl	8002a7c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	@ 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e207      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800418a:	4b5b      	ldr	r3, [pc, #364]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCC_OscConfig+0xc0>
 8004196:	e014      	b.n	80041c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004198:	f7fe fc70 	bl	8002a7c <HAL_GetTick>
 800419c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800419e:	e008      	b.n	80041b2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041a0:	f7fe fc6c 	bl	8002a7c <HAL_GetTick>
 80041a4:	4602      	mov	r2, r0
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	2b64      	cmp	r3, #100	@ 0x64
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e1f3      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041b2:	4b51      	ldr	r3, [pc, #324]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1f0      	bne.n	80041a0 <HAL_RCC_OscConfig+0xe8>
 80041be:	e000      	b.n	80041c2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d063      	beq.n	8004296 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041ce:	4b4a      	ldr	r3, [pc, #296]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f003 030c 	and.w	r3, r3, #12
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00b      	beq.n	80041f2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041da:	4b47      	ldr	r3, [pc, #284]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041e2:	2b08      	cmp	r3, #8
 80041e4:	d11c      	bne.n	8004220 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041e6:	4b44      	ldr	r3, [pc, #272]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d116      	bne.n	8004220 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041f2:	4b41      	ldr	r3, [pc, #260]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d005      	beq.n	800420a <HAL_RCC_OscConfig+0x152>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	68db      	ldr	r3, [r3, #12]
 8004202:	2b01      	cmp	r3, #1
 8004204:	d001      	beq.n	800420a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e1c7      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800420a:	4b3b      	ldr	r3, [pc, #236]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	691b      	ldr	r3, [r3, #16]
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	4937      	ldr	r1, [pc, #220]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 800421a:	4313      	orrs	r3, r2
 800421c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800421e:	e03a      	b.n	8004296 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d020      	beq.n	800426a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004228:	4b34      	ldr	r3, [pc, #208]	@ (80042fc <HAL_RCC_OscConfig+0x244>)
 800422a:	2201      	movs	r2, #1
 800422c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fe fc25 	bl	8002a7c <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004236:	f7fe fc21 	bl	8002a7c <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e1a8      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004248:	4b2b      	ldr	r3, [pc, #172]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004254:	4b28      	ldr	r3, [pc, #160]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	00db      	lsls	r3, r3, #3
 8004262:	4925      	ldr	r1, [pc, #148]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 8004264:	4313      	orrs	r3, r2
 8004266:	600b      	str	r3, [r1, #0]
 8004268:	e015      	b.n	8004296 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800426a:	4b24      	ldr	r3, [pc, #144]	@ (80042fc <HAL_RCC_OscConfig+0x244>)
 800426c:	2200      	movs	r2, #0
 800426e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004270:	f7fe fc04 	bl	8002a7c <HAL_GetTick>
 8004274:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004276:	e008      	b.n	800428a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004278:	f7fe fc00 	bl	8002a7c <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	693b      	ldr	r3, [r7, #16]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	2b02      	cmp	r3, #2
 8004284:	d901      	bls.n	800428a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004286:	2303      	movs	r3, #3
 8004288:	e187      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800428a:	4b1b      	ldr	r3, [pc, #108]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d1f0      	bne.n	8004278 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0308 	and.w	r3, r3, #8
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d036      	beq.n	8004310 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d016      	beq.n	80042d8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042aa:	4b15      	ldr	r3, [pc, #84]	@ (8004300 <HAL_RCC_OscConfig+0x248>)
 80042ac:	2201      	movs	r2, #1
 80042ae:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042b0:	f7fe fbe4 	bl	8002a7c <HAL_GetTick>
 80042b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042b6:	e008      	b.n	80042ca <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042b8:	f7fe fbe0 	bl	8002a7c <HAL_GetTick>
 80042bc:	4602      	mov	r2, r0
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	1ad3      	subs	r3, r2, r3
 80042c2:	2b02      	cmp	r3, #2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e167      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ca:	4b0b      	ldr	r3, [pc, #44]	@ (80042f8 <HAL_RCC_OscConfig+0x240>)
 80042cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0f0      	beq.n	80042b8 <HAL_RCC_OscConfig+0x200>
 80042d6:	e01b      	b.n	8004310 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042d8:	4b09      	ldr	r3, [pc, #36]	@ (8004300 <HAL_RCC_OscConfig+0x248>)
 80042da:	2200      	movs	r2, #0
 80042dc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042de:	f7fe fbcd 	bl	8002a7c <HAL_GetTick>
 80042e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042e4:	e00e      	b.n	8004304 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042e6:	f7fe fbc9 	bl	8002a7c <HAL_GetTick>
 80042ea:	4602      	mov	r2, r0
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	1ad3      	subs	r3, r2, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d907      	bls.n	8004304 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e150      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
 80042f8:	40023800 	.word	0x40023800
 80042fc:	42470000 	.word	0x42470000
 8004300:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004304:	4b88      	ldr	r3, [pc, #544]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 8004306:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004308:	f003 0302 	and.w	r3, r3, #2
 800430c:	2b00      	cmp	r3, #0
 800430e:	d1ea      	bne.n	80042e6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 8097 	beq.w	800444c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800431e:	2300      	movs	r3, #0
 8004320:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004322:	4b81      	ldr	r3, [pc, #516]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 8004324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800432a:	2b00      	cmp	r3, #0
 800432c:	d10f      	bne.n	800434e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800432e:	2300      	movs	r3, #0
 8004330:	60bb      	str	r3, [r7, #8]
 8004332:	4b7d      	ldr	r3, [pc, #500]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	4a7c      	ldr	r2, [pc, #496]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 8004338:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800433c:	6413      	str	r3, [r2, #64]	@ 0x40
 800433e:	4b7a      	ldr	r3, [pc, #488]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004346:	60bb      	str	r3, [r7, #8]
 8004348:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800434a:	2301      	movs	r3, #1
 800434c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800434e:	4b77      	ldr	r3, [pc, #476]	@ (800452c <HAL_RCC_OscConfig+0x474>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004356:	2b00      	cmp	r3, #0
 8004358:	d118      	bne.n	800438c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800435a:	4b74      	ldr	r3, [pc, #464]	@ (800452c <HAL_RCC_OscConfig+0x474>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a73      	ldr	r2, [pc, #460]	@ (800452c <HAL_RCC_OscConfig+0x474>)
 8004360:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004364:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004366:	f7fe fb89 	bl	8002a7c <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800436e:	f7fe fb85 	bl	8002a7c <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e10c      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004380:	4b6a      	ldr	r3, [pc, #424]	@ (800452c <HAL_RCC_OscConfig+0x474>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004388:	2b00      	cmp	r3, #0
 800438a:	d0f0      	beq.n	800436e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b01      	cmp	r3, #1
 8004392:	d106      	bne.n	80043a2 <HAL_RCC_OscConfig+0x2ea>
 8004394:	4b64      	ldr	r3, [pc, #400]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 8004396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004398:	4a63      	ldr	r2, [pc, #396]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 800439a:	f043 0301 	orr.w	r3, r3, #1
 800439e:	6713      	str	r3, [r2, #112]	@ 0x70
 80043a0:	e01c      	b.n	80043dc <HAL_RCC_OscConfig+0x324>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	2b05      	cmp	r3, #5
 80043a8:	d10c      	bne.n	80043c4 <HAL_RCC_OscConfig+0x30c>
 80043aa:	4b5f      	ldr	r3, [pc, #380]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ae:	4a5e      	ldr	r2, [pc, #376]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 80043b0:	f043 0304 	orr.w	r3, r3, #4
 80043b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80043b6:	4b5c      	ldr	r3, [pc, #368]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 80043b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043ba:	4a5b      	ldr	r2, [pc, #364]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 80043bc:	f043 0301 	orr.w	r3, r3, #1
 80043c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80043c2:	e00b      	b.n	80043dc <HAL_RCC_OscConfig+0x324>
 80043c4:	4b58      	ldr	r3, [pc, #352]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 80043c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043c8:	4a57      	ldr	r2, [pc, #348]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 80043ca:	f023 0301 	bic.w	r3, r3, #1
 80043ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80043d0:	4b55      	ldr	r3, [pc, #340]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 80043d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043d4:	4a54      	ldr	r2, [pc, #336]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 80043d6:	f023 0304 	bic.w	r3, r3, #4
 80043da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d015      	beq.n	8004410 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e4:	f7fe fb4a 	bl	8002a7c <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ea:	e00a      	b.n	8004402 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043ec:	f7fe fb46 	bl	8002a7c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e0cb      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004402:	4b49      	ldr	r3, [pc, #292]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 8004404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d0ee      	beq.n	80043ec <HAL_RCC_OscConfig+0x334>
 800440e:	e014      	b.n	800443a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004410:	f7fe fb34 	bl	8002a7c <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004416:	e00a      	b.n	800442e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004418:	f7fe fb30 	bl	8002a7c <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e0b5      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800442e:	4b3e      	ldr	r3, [pc, #248]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1ee      	bne.n	8004418 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800443a:	7dfb      	ldrb	r3, [r7, #23]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004440:	4b39      	ldr	r3, [pc, #228]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 8004442:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004444:	4a38      	ldr	r2, [pc, #224]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 8004446:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800444a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	699b      	ldr	r3, [r3, #24]
 8004450:	2b00      	cmp	r3, #0
 8004452:	f000 80a1 	beq.w	8004598 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004456:	4b34      	ldr	r3, [pc, #208]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b08      	cmp	r3, #8
 8004460:	d05c      	beq.n	800451c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	699b      	ldr	r3, [r3, #24]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d141      	bne.n	80044ee <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446a:	4b31      	ldr	r3, [pc, #196]	@ (8004530 <HAL_RCC_OscConfig+0x478>)
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004470:	f7fe fb04 	bl	8002a7c <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004478:	f7fe fb00 	bl	8002a7c <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e087      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800448a:	4b27      	ldr	r3, [pc, #156]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	69da      	ldr	r2, [r3, #28]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	431a      	orrs	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	019b      	lsls	r3, r3, #6
 80044a6:	431a      	orrs	r2, r3
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ac:	085b      	lsrs	r3, r3, #1
 80044ae:	3b01      	subs	r3, #1
 80044b0:	041b      	lsls	r3, r3, #16
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044b8:	061b      	lsls	r3, r3, #24
 80044ba:	491b      	ldr	r1, [pc, #108]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004530 <HAL_RCC_OscConfig+0x478>)
 80044c2:	2201      	movs	r2, #1
 80044c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044c6:	f7fe fad9 	bl	8002a7c <HAL_GetTick>
 80044ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044cc:	e008      	b.n	80044e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044ce:	f7fe fad5 	bl	8002a7c <HAL_GetTick>
 80044d2:	4602      	mov	r2, r0
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1ad3      	subs	r3, r2, r3
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d901      	bls.n	80044e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044dc:	2303      	movs	r3, #3
 80044de:	e05c      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e0:	4b11      	ldr	r3, [pc, #68]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d0f0      	beq.n	80044ce <HAL_RCC_OscConfig+0x416>
 80044ec:	e054      	b.n	8004598 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b10      	ldr	r3, [pc, #64]	@ (8004530 <HAL_RCC_OscConfig+0x478>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fe fac2 	bl	8002a7c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fc:	f7fe fabe 	bl	8002a7c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e045      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450e:	4b06      	ldr	r3, [pc, #24]	@ (8004528 <HAL_RCC_OscConfig+0x470>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x444>
 800451a:	e03d      	b.n	8004598 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d107      	bne.n	8004534 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004524:	2301      	movs	r3, #1
 8004526:	e038      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
 8004528:	40023800 	.word	0x40023800
 800452c:	40007000 	.word	0x40007000
 8004530:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004534:	4b1b      	ldr	r3, [pc, #108]	@ (80045a4 <HAL_RCC_OscConfig+0x4ec>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	2b01      	cmp	r3, #1
 8004540:	d028      	beq.n	8004594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800454c:	429a      	cmp	r2, r3
 800454e:	d121      	bne.n	8004594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800455a:	429a      	cmp	r2, r3
 800455c:	d11a      	bne.n	8004594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800455e:	68fa      	ldr	r2, [r7, #12]
 8004560:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800456a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800456c:	4293      	cmp	r3, r2
 800456e:	d111      	bne.n	8004594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800457a:	085b      	lsrs	r3, r3, #1
 800457c:	3b01      	subs	r3, #1
 800457e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004580:	429a      	cmp	r2, r3
 8004582:	d107      	bne.n	8004594 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800458e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004590:	429a      	cmp	r2, r3
 8004592:	d001      	beq.n	8004598 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e000      	b.n	800459a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	40023800 	.word	0x40023800

080045a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b084      	sub	sp, #16
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e0cc      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045bc:	4b68      	ldr	r3, [pc, #416]	@ (8004760 <HAL_RCC_ClockConfig+0x1b8>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d90c      	bls.n	80045e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ca:	4b65      	ldr	r3, [pc, #404]	@ (8004760 <HAL_RCC_ClockConfig+0x1b8>)
 80045cc:	683a      	ldr	r2, [r7, #0]
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045d2:	4b63      	ldr	r3, [pc, #396]	@ (8004760 <HAL_RCC_ClockConfig+0x1b8>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0307 	and.w	r3, r3, #7
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d001      	beq.n	80045e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e0b8      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0302 	and.w	r3, r3, #2
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d020      	beq.n	8004632 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 0304 	and.w	r3, r3, #4
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d005      	beq.n	8004608 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045fc:	4b59      	ldr	r3, [pc, #356]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	4a58      	ldr	r2, [pc, #352]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 8004602:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004606:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0308 	and.w	r3, r3, #8
 8004610:	2b00      	cmp	r3, #0
 8004612:	d005      	beq.n	8004620 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004614:	4b53      	ldr	r3, [pc, #332]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4a52      	ldr	r2, [pc, #328]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 800461a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800461e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004620:	4b50      	ldr	r3, [pc, #320]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	494d      	ldr	r1, [pc, #308]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 800462e:	4313      	orrs	r3, r2
 8004630:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d044      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	2b01      	cmp	r3, #1
 8004644:	d107      	bne.n	8004656 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	4b47      	ldr	r3, [pc, #284]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d119      	bne.n	8004686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e07f      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d003      	beq.n	8004666 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004662:	2b03      	cmp	r3, #3
 8004664:	d107      	bne.n	8004676 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004666:	4b3f      	ldr	r3, [pc, #252]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d109      	bne.n	8004686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e06f      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004676:	4b3b      	ldr	r3, [pc, #236]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d101      	bne.n	8004686 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	e067      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004686:	4b37      	ldr	r3, [pc, #220]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	f023 0203 	bic.w	r2, r3, #3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	4934      	ldr	r1, [pc, #208]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 8004694:	4313      	orrs	r3, r2
 8004696:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004698:	f7fe f9f0 	bl	8002a7c <HAL_GetTick>
 800469c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800469e:	e00a      	b.n	80046b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046a0:	f7fe f9ec 	bl	8002a7c <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d901      	bls.n	80046b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046b2:	2303      	movs	r3, #3
 80046b4:	e04f      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046b6:	4b2b      	ldr	r3, [pc, #172]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 020c 	and.w	r2, r3, #12
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d1eb      	bne.n	80046a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046c8:	4b25      	ldr	r3, [pc, #148]	@ (8004760 <HAL_RCC_ClockConfig+0x1b8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 0307 	and.w	r3, r3, #7
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d20c      	bcs.n	80046f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046d6:	4b22      	ldr	r3, [pc, #136]	@ (8004760 <HAL_RCC_ClockConfig+0x1b8>)
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	b2d2      	uxtb	r2, r2
 80046dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046de:	4b20      	ldr	r3, [pc, #128]	@ (8004760 <HAL_RCC_ClockConfig+0x1b8>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d001      	beq.n	80046f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e032      	b.n	8004756 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0304 	and.w	r3, r3, #4
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d008      	beq.n	800470e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046fc:	4b19      	ldr	r3, [pc, #100]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	4916      	ldr	r1, [pc, #88]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 800470a:	4313      	orrs	r3, r2
 800470c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0308 	and.w	r3, r3, #8
 8004716:	2b00      	cmp	r3, #0
 8004718:	d009      	beq.n	800472e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800471a:	4b12      	ldr	r3, [pc, #72]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	490e      	ldr	r1, [pc, #56]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 800472a:	4313      	orrs	r3, r2
 800472c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800472e:	f000 f821 	bl	8004774 <HAL_RCC_GetSysClockFreq>
 8004732:	4602      	mov	r2, r0
 8004734:	4b0b      	ldr	r3, [pc, #44]	@ (8004764 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	091b      	lsrs	r3, r3, #4
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	490a      	ldr	r1, [pc, #40]	@ (8004768 <HAL_RCC_ClockConfig+0x1c0>)
 8004740:	5ccb      	ldrb	r3, [r1, r3]
 8004742:	fa22 f303 	lsr.w	r3, r2, r3
 8004746:	4a09      	ldr	r2, [pc, #36]	@ (800476c <HAL_RCC_ClockConfig+0x1c4>)
 8004748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800474a:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <HAL_RCC_ClockConfig+0x1c8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fe f950 	bl	80029f4 <HAL_InitTick>

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3710      	adds	r7, #16
 800475a:	46bd      	mov	sp, r7
 800475c:	bd80      	pop	{r7, pc}
 800475e:	bf00      	nop
 8004760:	40023c00 	.word	0x40023c00
 8004764:	40023800 	.word	0x40023800
 8004768:	08009d84 	.word	0x08009d84
 800476c:	20000014 	.word	0x20000014
 8004770:	20000018 	.word	0x20000018

08004774 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004774:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004778:	b094      	sub	sp, #80	@ 0x50
 800477a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004780:	2300      	movs	r3, #0
 8004782:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004784:	2300      	movs	r3, #0
 8004786:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004788:	2300      	movs	r3, #0
 800478a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800478c:	4b79      	ldr	r3, [pc, #484]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x200>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f003 030c 	and.w	r3, r3, #12
 8004794:	2b08      	cmp	r3, #8
 8004796:	d00d      	beq.n	80047b4 <HAL_RCC_GetSysClockFreq+0x40>
 8004798:	2b08      	cmp	r3, #8
 800479a:	f200 80e1 	bhi.w	8004960 <HAL_RCC_GetSysClockFreq+0x1ec>
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d002      	beq.n	80047a8 <HAL_RCC_GetSysClockFreq+0x34>
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d003      	beq.n	80047ae <HAL_RCC_GetSysClockFreq+0x3a>
 80047a6:	e0db      	b.n	8004960 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047a8:	4b73      	ldr	r3, [pc, #460]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x204>)
 80047aa:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80047ac:	e0db      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047ae:	4b73      	ldr	r3, [pc, #460]	@ (800497c <HAL_RCC_GetSysClockFreq+0x208>)
 80047b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047b2:	e0d8      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x200>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047bc:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047be:	4b6d      	ldr	r3, [pc, #436]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d063      	beq.n	8004892 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ca:	4b6a      	ldr	r3, [pc, #424]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x200>)
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	099b      	lsrs	r3, r3, #6
 80047d0:	2200      	movs	r2, #0
 80047d2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80047d4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80047d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80047de:	2300      	movs	r3, #0
 80047e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80047e6:	4622      	mov	r2, r4
 80047e8:	462b      	mov	r3, r5
 80047ea:	f04f 0000 	mov.w	r0, #0
 80047ee:	f04f 0100 	mov.w	r1, #0
 80047f2:	0159      	lsls	r1, r3, #5
 80047f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047f8:	0150      	lsls	r0, r2, #5
 80047fa:	4602      	mov	r2, r0
 80047fc:	460b      	mov	r3, r1
 80047fe:	4621      	mov	r1, r4
 8004800:	1a51      	subs	r1, r2, r1
 8004802:	6139      	str	r1, [r7, #16]
 8004804:	4629      	mov	r1, r5
 8004806:	eb63 0301 	sbc.w	r3, r3, r1
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	f04f 0200 	mov.w	r2, #0
 8004810:	f04f 0300 	mov.w	r3, #0
 8004814:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004818:	4659      	mov	r1, fp
 800481a:	018b      	lsls	r3, r1, #6
 800481c:	4651      	mov	r1, sl
 800481e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004822:	4651      	mov	r1, sl
 8004824:	018a      	lsls	r2, r1, #6
 8004826:	4651      	mov	r1, sl
 8004828:	ebb2 0801 	subs.w	r8, r2, r1
 800482c:	4659      	mov	r1, fp
 800482e:	eb63 0901 	sbc.w	r9, r3, r1
 8004832:	f04f 0200 	mov.w	r2, #0
 8004836:	f04f 0300 	mov.w	r3, #0
 800483a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800483e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004842:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004846:	4690      	mov	r8, r2
 8004848:	4699      	mov	r9, r3
 800484a:	4623      	mov	r3, r4
 800484c:	eb18 0303 	adds.w	r3, r8, r3
 8004850:	60bb      	str	r3, [r7, #8]
 8004852:	462b      	mov	r3, r5
 8004854:	eb49 0303 	adc.w	r3, r9, r3
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	f04f 0200 	mov.w	r2, #0
 800485e:	f04f 0300 	mov.w	r3, #0
 8004862:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004866:	4629      	mov	r1, r5
 8004868:	024b      	lsls	r3, r1, #9
 800486a:	4621      	mov	r1, r4
 800486c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004870:	4621      	mov	r1, r4
 8004872:	024a      	lsls	r2, r1, #9
 8004874:	4610      	mov	r0, r2
 8004876:	4619      	mov	r1, r3
 8004878:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800487a:	2200      	movs	r2, #0
 800487c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800487e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004880:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004884:	f7fc fa38 	bl	8000cf8 <__aeabi_uldivmod>
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4613      	mov	r3, r2
 800488e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004890:	e058      	b.n	8004944 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004892:	4b38      	ldr	r3, [pc, #224]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x200>)
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	099b      	lsrs	r3, r3, #6
 8004898:	2200      	movs	r2, #0
 800489a:	4618      	mov	r0, r3
 800489c:	4611      	mov	r1, r2
 800489e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80048a2:	623b      	str	r3, [r7, #32]
 80048a4:	2300      	movs	r3, #0
 80048a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80048ac:	4642      	mov	r2, r8
 80048ae:	464b      	mov	r3, r9
 80048b0:	f04f 0000 	mov.w	r0, #0
 80048b4:	f04f 0100 	mov.w	r1, #0
 80048b8:	0159      	lsls	r1, r3, #5
 80048ba:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048be:	0150      	lsls	r0, r2, #5
 80048c0:	4602      	mov	r2, r0
 80048c2:	460b      	mov	r3, r1
 80048c4:	4641      	mov	r1, r8
 80048c6:	ebb2 0a01 	subs.w	sl, r2, r1
 80048ca:	4649      	mov	r1, r9
 80048cc:	eb63 0b01 	sbc.w	fp, r3, r1
 80048d0:	f04f 0200 	mov.w	r2, #0
 80048d4:	f04f 0300 	mov.w	r3, #0
 80048d8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048dc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048e0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048e4:	ebb2 040a 	subs.w	r4, r2, sl
 80048e8:	eb63 050b 	sbc.w	r5, r3, fp
 80048ec:	f04f 0200 	mov.w	r2, #0
 80048f0:	f04f 0300 	mov.w	r3, #0
 80048f4:	00eb      	lsls	r3, r5, #3
 80048f6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048fa:	00e2      	lsls	r2, r4, #3
 80048fc:	4614      	mov	r4, r2
 80048fe:	461d      	mov	r5, r3
 8004900:	4643      	mov	r3, r8
 8004902:	18e3      	adds	r3, r4, r3
 8004904:	603b      	str	r3, [r7, #0]
 8004906:	464b      	mov	r3, r9
 8004908:	eb45 0303 	adc.w	r3, r5, r3
 800490c:	607b      	str	r3, [r7, #4]
 800490e:	f04f 0200 	mov.w	r2, #0
 8004912:	f04f 0300 	mov.w	r3, #0
 8004916:	e9d7 4500 	ldrd	r4, r5, [r7]
 800491a:	4629      	mov	r1, r5
 800491c:	028b      	lsls	r3, r1, #10
 800491e:	4621      	mov	r1, r4
 8004920:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004924:	4621      	mov	r1, r4
 8004926:	028a      	lsls	r2, r1, #10
 8004928:	4610      	mov	r0, r2
 800492a:	4619      	mov	r1, r3
 800492c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800492e:	2200      	movs	r2, #0
 8004930:	61bb      	str	r3, [r7, #24]
 8004932:	61fa      	str	r2, [r7, #28]
 8004934:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004938:	f7fc f9de 	bl	8000cf8 <__aeabi_uldivmod>
 800493c:	4602      	mov	r2, r0
 800493e:	460b      	mov	r3, r1
 8004940:	4613      	mov	r3, r2
 8004942:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004944:	4b0b      	ldr	r3, [pc, #44]	@ (8004974 <HAL_RCC_GetSysClockFreq+0x200>)
 8004946:	685b      	ldr	r3, [r3, #4]
 8004948:	0c1b      	lsrs	r3, r3, #16
 800494a:	f003 0303 	and.w	r3, r3, #3
 800494e:	3301      	adds	r3, #1
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8004954:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004958:	fbb2 f3f3 	udiv	r3, r2, r3
 800495c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800495e:	e002      	b.n	8004966 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004960:	4b05      	ldr	r3, [pc, #20]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x204>)
 8004962:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004964:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004966:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004968:	4618      	mov	r0, r3
 800496a:	3750      	adds	r7, #80	@ 0x50
 800496c:	46bd      	mov	sp, r7
 800496e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004972:	bf00      	nop
 8004974:	40023800 	.word	0x40023800
 8004978:	00f42400 	.word	0x00f42400
 800497c:	007a1200 	.word	0x007a1200

08004980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004980:	b480      	push	{r7}
 8004982:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004984:	4b03      	ldr	r3, [pc, #12]	@ (8004994 <HAL_RCC_GetHCLKFreq+0x14>)
 8004986:	681b      	ldr	r3, [r3, #0]
}
 8004988:	4618      	mov	r0, r3
 800498a:	46bd      	mov	sp, r7
 800498c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004990:	4770      	bx	lr
 8004992:	bf00      	nop
 8004994:	20000014 	.word	0x20000014

08004998 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800499c:	f7ff fff0 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 80049a0:	4602      	mov	r2, r0
 80049a2:	4b05      	ldr	r3, [pc, #20]	@ (80049b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	0a9b      	lsrs	r3, r3, #10
 80049a8:	f003 0307 	and.w	r3, r3, #7
 80049ac:	4903      	ldr	r1, [pc, #12]	@ (80049bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80049ae:	5ccb      	ldrb	r3, [r1, r3]
 80049b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b4:	4618      	mov	r0, r3
 80049b6:	bd80      	pop	{r7, pc}
 80049b8:	40023800 	.word	0x40023800
 80049bc:	08009d94 	.word	0x08009d94

080049c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049c4:	f7ff ffdc 	bl	8004980 <HAL_RCC_GetHCLKFreq>
 80049c8:	4602      	mov	r2, r0
 80049ca:	4b05      	ldr	r3, [pc, #20]	@ (80049e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	0b5b      	lsrs	r3, r3, #13
 80049d0:	f003 0307 	and.w	r3, r3, #7
 80049d4:	4903      	ldr	r1, [pc, #12]	@ (80049e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049d6:	5ccb      	ldrb	r3, [r1, r3]
 80049d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049dc:	4618      	mov	r0, r3
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	40023800 	.word	0x40023800
 80049e4:	08009d94 	.word	0x08009d94

080049e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d101      	bne.n	80049fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e041      	b.n	8004a7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fd feee 	bl	80027f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681a      	ldr	r2, [r3, #0]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3304      	adds	r3, #4
 8004a24:	4619      	mov	r1, r3
 8004a26:	4610      	mov	r0, r2
 8004a28:	f000 fa70 	bl	8004f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2201      	movs	r2, #1
 8004a30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2201      	movs	r2, #1
 8004a38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2201      	movs	r2, #1
 8004a50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2201      	movs	r2, #1
 8004a58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2201      	movs	r2, #1
 8004a78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b085      	sub	sp, #20
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a96:	b2db      	uxtb	r3, r3
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d001      	beq.n	8004aa0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e044      	b.n	8004b2a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2202      	movs	r2, #2
 8004aa4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	68da      	ldr	r2, [r3, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f042 0201 	orr.w	r2, r2, #1
 8004ab6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1e      	ldr	r2, [pc, #120]	@ (8004b38 <HAL_TIM_Base_Start_IT+0xb0>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d018      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004aca:	d013      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x6c>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8004b3c <HAL_TIM_Base_Start_IT+0xb4>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00e      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a19      	ldr	r2, [pc, #100]	@ (8004b40 <HAL_TIM_Base_Start_IT+0xb8>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d009      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x6c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a17      	ldr	r2, [pc, #92]	@ (8004b44 <HAL_TIM_Base_Start_IT+0xbc>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_TIM_Base_Start_IT+0x6c>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a16      	ldr	r2, [pc, #88]	@ (8004b48 <HAL_TIM_Base_Start_IT+0xc0>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d111      	bne.n	8004b18 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2b06      	cmp	r3, #6
 8004b04:	d010      	beq.n	8004b28 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b16:	e007      	b.n	8004b28 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40014000 	.word	0x40014000

08004b4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d020      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d01b      	beq.n	8004bb0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f06f 0202 	mvn.w	r2, #2
 8004b80:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2201      	movs	r2, #1
 8004b86:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	f003 0303 	and.w	r3, r3, #3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d003      	beq.n	8004b9e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f999 	bl	8004ece <HAL_TIM_IC_CaptureCallback>
 8004b9c:	e005      	b.n	8004baa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f98b 	bl	8004eba <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ba4:	6878      	ldr	r0, [r7, #4]
 8004ba6:	f000 f99c 	bl	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	f003 0304 	and.w	r3, r3, #4
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d020      	beq.n	8004bfc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	f003 0304 	and.w	r3, r3, #4
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d01b      	beq.n	8004bfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f06f 0204 	mvn.w	r2, #4
 8004bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2202      	movs	r2, #2
 8004bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	699b      	ldr	r3, [r3, #24]
 8004bda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f000 f973 	bl	8004ece <HAL_TIM_IC_CaptureCallback>
 8004be8:	e005      	b.n	8004bf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bea:	6878      	ldr	r0, [r7, #4]
 8004bec:	f000 f965 	bl	8004eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f976 	bl	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	f003 0308 	and.w	r3, r3, #8
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d020      	beq.n	8004c48 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f003 0308 	and.w	r3, r3, #8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d01b      	beq.n	8004c48 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f06f 0208 	mvn.w	r2, #8
 8004c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	2204      	movs	r2, #4
 8004c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	f003 0303 	and.w	r3, r3, #3
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f94d 	bl	8004ece <HAL_TIM_IC_CaptureCallback>
 8004c34:	e005      	b.n	8004c42 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f93f 	bl	8004eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f950 	bl	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	f003 0310 	and.w	r3, r3, #16
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d020      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	f003 0310 	and.w	r3, r3, #16
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d01b      	beq.n	8004c94 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f06f 0210 	mvn.w	r2, #16
 8004c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2208      	movs	r2, #8
 8004c6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	69db      	ldr	r3, [r3, #28]
 8004c72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d003      	beq.n	8004c82 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f000 f927 	bl	8004ece <HAL_TIM_IC_CaptureCallback>
 8004c80:	e005      	b.n	8004c8e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f919 	bl	8004eba <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f92a 	bl	8004ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00c      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f003 0301 	and.w	r3, r3, #1
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d007      	beq.n	8004cb8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f06f 0201 	mvn.w	r2, #1
 8004cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f7fd f93a 	bl	8001f2c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00c      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d007      	beq.n	8004cdc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fab6 	bl	8005248 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00c      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d007      	beq.n	8004d00 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f8fb 	bl	8004ef6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	f003 0320 	and.w	r3, r3, #32
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00c      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d007      	beq.n	8004d24 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f06f 0220 	mvn.w	r2, #32
 8004d1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 fa88 	bl	8005234 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d24:	bf00      	nop
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d101      	bne.n	8004d48 <HAL_TIM_ConfigClockSource+0x1c>
 8004d44:	2302      	movs	r3, #2
 8004d46:	e0b4      	b.n	8004eb2 <HAL_TIM_ConfigClockSource+0x186>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2202      	movs	r2, #2
 8004d54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d60:	68bb      	ldr	r3, [r7, #8]
 8004d62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004d6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	68ba      	ldr	r2, [r7, #8]
 8004d76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d80:	d03e      	beq.n	8004e00 <HAL_TIM_ConfigClockSource+0xd4>
 8004d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d86:	f200 8087 	bhi.w	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004d8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d8e:	f000 8086 	beq.w	8004e9e <HAL_TIM_ConfigClockSource+0x172>
 8004d92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d96:	d87f      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004d98:	2b70      	cmp	r3, #112	@ 0x70
 8004d9a:	d01a      	beq.n	8004dd2 <HAL_TIM_ConfigClockSource+0xa6>
 8004d9c:	2b70      	cmp	r3, #112	@ 0x70
 8004d9e:	d87b      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004da0:	2b60      	cmp	r3, #96	@ 0x60
 8004da2:	d050      	beq.n	8004e46 <HAL_TIM_ConfigClockSource+0x11a>
 8004da4:	2b60      	cmp	r3, #96	@ 0x60
 8004da6:	d877      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004da8:	2b50      	cmp	r3, #80	@ 0x50
 8004daa:	d03c      	beq.n	8004e26 <HAL_TIM_ConfigClockSource+0xfa>
 8004dac:	2b50      	cmp	r3, #80	@ 0x50
 8004dae:	d873      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004db0:	2b40      	cmp	r3, #64	@ 0x40
 8004db2:	d058      	beq.n	8004e66 <HAL_TIM_ConfigClockSource+0x13a>
 8004db4:	2b40      	cmp	r3, #64	@ 0x40
 8004db6:	d86f      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004db8:	2b30      	cmp	r3, #48	@ 0x30
 8004dba:	d064      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x15a>
 8004dbc:	2b30      	cmp	r3, #48	@ 0x30
 8004dbe:	d86b      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc0:	2b20      	cmp	r3, #32
 8004dc2:	d060      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x15a>
 8004dc4:	2b20      	cmp	r3, #32
 8004dc6:	d867      	bhi.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d05c      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x15a>
 8004dcc:	2b10      	cmp	r3, #16
 8004dce:	d05a      	beq.n	8004e86 <HAL_TIM_ConfigClockSource+0x15a>
 8004dd0:	e062      	b.n	8004e98 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004de2:	f000 f999 	bl	8005118 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004df4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68ba      	ldr	r2, [r7, #8]
 8004dfc:	609a      	str	r2, [r3, #8]
      break;
 8004dfe:	e04f      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004e10:	f000 f982 	bl	8005118 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	689a      	ldr	r2, [r3, #8]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004e22:	609a      	str	r2, [r3, #8]
      break;
 8004e24:	e03c      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e32:	461a      	mov	r2, r3
 8004e34:	f000 f8f6 	bl	8005024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2150      	movs	r1, #80	@ 0x50
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f000 f94f 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e44:	e02c      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e52:	461a      	mov	r2, r3
 8004e54:	f000 f915 	bl	8005082 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2160      	movs	r1, #96	@ 0x60
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 f93f 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e64:	e01c      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e72:	461a      	mov	r2, r3
 8004e74:	f000 f8d6 	bl	8005024 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2140      	movs	r1, #64	@ 0x40
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 f92f 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e84:	e00c      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4619      	mov	r1, r3
 8004e90:	4610      	mov	r0, r2
 8004e92:	f000 f926 	bl	80050e2 <TIM_ITRx_SetConfig>
      break;
 8004e96:	e003      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004e98:	2301      	movs	r3, #1
 8004e9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e9c:	e000      	b.n	8004ea0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004e9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	3710      	adds	r7, #16
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}

08004eba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b083      	sub	sp, #12
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ec2:	bf00      	nop
 8004ec4:	370c      	adds	r7, #12
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b083      	sub	sp, #12
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee2:	b480      	push	{r7}
 8004ee4:	b083      	sub	sp, #12
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004eea:	bf00      	nop
 8004eec:	370c      	adds	r7, #12
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b083      	sub	sp, #12
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004efe:	bf00      	nop
 8004f00:	370c      	adds	r7, #12
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr
	...

08004f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b085      	sub	sp, #20
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a3a      	ldr	r2, [pc, #232]	@ (8005008 <TIM_Base_SetConfig+0xfc>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d00f      	beq.n	8004f44 <TIM_Base_SetConfig+0x38>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f2a:	d00b      	beq.n	8004f44 <TIM_Base_SetConfig+0x38>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	4a37      	ldr	r2, [pc, #220]	@ (800500c <TIM_Base_SetConfig+0x100>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d007      	beq.n	8004f44 <TIM_Base_SetConfig+0x38>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a36      	ldr	r2, [pc, #216]	@ (8005010 <TIM_Base_SetConfig+0x104>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d003      	beq.n	8004f44 <TIM_Base_SetConfig+0x38>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a35      	ldr	r2, [pc, #212]	@ (8005014 <TIM_Base_SetConfig+0x108>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d108      	bne.n	8004f56 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	4a2b      	ldr	r2, [pc, #172]	@ (8005008 <TIM_Base_SetConfig+0xfc>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d01b      	beq.n	8004f96 <TIM_Base_SetConfig+0x8a>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f64:	d017      	beq.n	8004f96 <TIM_Base_SetConfig+0x8a>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a28      	ldr	r2, [pc, #160]	@ (800500c <TIM_Base_SetConfig+0x100>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d013      	beq.n	8004f96 <TIM_Base_SetConfig+0x8a>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a27      	ldr	r2, [pc, #156]	@ (8005010 <TIM_Base_SetConfig+0x104>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00f      	beq.n	8004f96 <TIM_Base_SetConfig+0x8a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a26      	ldr	r2, [pc, #152]	@ (8005014 <TIM_Base_SetConfig+0x108>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00b      	beq.n	8004f96 <TIM_Base_SetConfig+0x8a>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a25      	ldr	r2, [pc, #148]	@ (8005018 <TIM_Base_SetConfig+0x10c>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d007      	beq.n	8004f96 <TIM_Base_SetConfig+0x8a>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a24      	ldr	r2, [pc, #144]	@ (800501c <TIM_Base_SetConfig+0x110>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d003      	beq.n	8004f96 <TIM_Base_SetConfig+0x8a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a23      	ldr	r2, [pc, #140]	@ (8005020 <TIM_Base_SetConfig+0x114>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d108      	bne.n	8004fa8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f9c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	68db      	ldr	r3, [r3, #12]
 8004fa2:	68fa      	ldr	r2, [r7, #12]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	4a0e      	ldr	r2, [pc, #56]	@ (8005008 <TIM_Base_SetConfig+0xfc>)
 8004fd0:	4293      	cmp	r3, r2
 8004fd2:	d103      	bne.n	8004fdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d105      	bne.n	8004ffa <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	f023 0201 	bic.w	r2, r3, #1
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	611a      	str	r2, [r3, #16]
  }
}
 8004ffa:	bf00      	nop
 8004ffc:	3714      	adds	r7, #20
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	40010000 	.word	0x40010000
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800
 8005014:	40000c00 	.word	0x40000c00
 8005018:	40014000 	.word	0x40014000
 800501c:	40014400 	.word	0x40014400
 8005020:	40014800 	.word	0x40014800

08005024 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	60b9      	str	r1, [r7, #8]
 800502e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	f023 0201 	bic.w	r2, r3, #1
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005048:	693b      	ldr	r3, [r7, #16]
 800504a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800504e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	011b      	lsls	r3, r3, #4
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	4313      	orrs	r3, r2
 8005058:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	f023 030a 	bic.w	r3, r3, #10
 8005060:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	4313      	orrs	r3, r2
 8005068:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005080:	4770      	bx	lr

08005082 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005082:	b480      	push	{r7}
 8005084:	b087      	sub	sp, #28
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f023 0210 	bic.w	r2, r3, #16
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	699b      	ldr	r3, [r3, #24]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80050ac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	031b      	lsls	r3, r3, #12
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050b8:	697b      	ldr	r3, [r7, #20]
 80050ba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80050be:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	011b      	lsls	r3, r3, #4
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	697a      	ldr	r2, [r7, #20]
 80050d4:	621a      	str	r2, [r3, #32]
}
 80050d6:	bf00      	nop
 80050d8:	371c      	adds	r7, #28
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b085      	sub	sp, #20
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050fa:	683a      	ldr	r2, [r7, #0]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	4313      	orrs	r3, r2
 8005100:	f043 0307 	orr.w	r3, r3, #7
 8005104:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	609a      	str	r2, [r3, #8]
}
 800510c:	bf00      	nop
 800510e:	3714      	adds	r7, #20
 8005110:	46bd      	mov	sp, r7
 8005112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005116:	4770      	bx	lr

08005118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005118:	b480      	push	{r7}
 800511a:	b087      	sub	sp, #28
 800511c:	af00      	add	r7, sp, #0
 800511e:	60f8      	str	r0, [r7, #12]
 8005120:	60b9      	str	r1, [r7, #8]
 8005122:	607a      	str	r2, [r7, #4]
 8005124:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005132:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	021a      	lsls	r2, r3, #8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	431a      	orrs	r2, r3
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4313      	orrs	r3, r2
 8005140:	697a      	ldr	r2, [r7, #20]
 8005142:	4313      	orrs	r3, r2
 8005144:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	609a      	str	r2, [r3, #8]
}
 800514c:	bf00      	nop
 800514e:	371c      	adds	r7, #28
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005158:	b480      	push	{r7}
 800515a:	b085      	sub	sp, #20
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005168:	2b01      	cmp	r3, #1
 800516a:	d101      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800516c:	2302      	movs	r3, #2
 800516e:	e050      	b.n	8005212 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	4313      	orrs	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68fa      	ldr	r2, [r7, #12]
 80051a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	4a1c      	ldr	r2, [pc, #112]	@ (8005220 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d018      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051bc:	d013      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4a18      	ldr	r2, [pc, #96]	@ (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d00e      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a16      	ldr	r2, [pc, #88]	@ (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d009      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a15      	ldr	r2, [pc, #84]	@ (800522c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d004      	beq.n	80051e6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a13      	ldr	r2, [pc, #76]	@ (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d10c      	bne.n	8005200 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80051ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	4313      	orrs	r3, r2
 80051f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68ba      	ldr	r2, [r7, #8]
 80051fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3714      	adds	r7, #20
 8005216:	46bd      	mov	sp, r7
 8005218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	40010000 	.word	0x40010000
 8005224:	40000400 	.word	0x40000400
 8005228:	40000800 	.word	0x40000800
 800522c:	40000c00 	.word	0x40000c00
 8005230:	40014000 	.word	0x40014000

08005234 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d101      	bne.n	800526e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e042      	b.n	80052f4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005274:	b2db      	uxtb	r3, r3
 8005276:	2b00      	cmp	r3, #0
 8005278:	d106      	bne.n	8005288 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f7fd fb22 	bl	80028cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2224      	movs	r2, #36	@ 0x24
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800529e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 f973 	bl	800558c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	691a      	ldr	r2, [r3, #16]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80052b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	695a      	ldr	r2, [r3, #20]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80052c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68da      	ldr	r2, [r3, #12]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80052d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2220      	movs	r2, #32
 80052e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2200      	movs	r2, #0
 80052f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3708      	adds	r7, #8
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b08a      	sub	sp, #40	@ 0x28
 8005300:	af02      	add	r7, sp, #8
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	4613      	mov	r3, r2
 800530a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800530c:	2300      	movs	r3, #0
 800530e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005316:	b2db      	uxtb	r3, r3
 8005318:	2b20      	cmp	r3, #32
 800531a:	d175      	bne.n	8005408 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <HAL_UART_Transmit+0x2c>
 8005322:	88fb      	ldrh	r3, [r7, #6]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d101      	bne.n	800532c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e06e      	b.n	800540a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2200      	movs	r2, #0
 8005330:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	2221      	movs	r2, #33	@ 0x21
 8005336:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800533a:	f7fd fb9f 	bl	8002a7c <HAL_GetTick>
 800533e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	88fa      	ldrh	r2, [r7, #6]
 8005344:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	88fa      	ldrh	r2, [r7, #6]
 800534a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	689b      	ldr	r3, [r3, #8]
 8005350:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005354:	d108      	bne.n	8005368 <HAL_UART_Transmit+0x6c>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	691b      	ldr	r3, [r3, #16]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d104      	bne.n	8005368 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800535e:	2300      	movs	r3, #0
 8005360:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	61bb      	str	r3, [r7, #24]
 8005366:	e003      	b.n	8005370 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800536c:	2300      	movs	r3, #0
 800536e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005370:	e02e      	b.n	80053d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	9300      	str	r3, [sp, #0]
 8005376:	697b      	ldr	r3, [r7, #20]
 8005378:	2200      	movs	r2, #0
 800537a:	2180      	movs	r1, #128	@ 0x80
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f000 f848 	bl	8005412 <UART_WaitOnFlagUntilTimeout>
 8005382:	4603      	mov	r3, r0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d005      	beq.n	8005394 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2220      	movs	r2, #32
 800538c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e03a      	b.n	800540a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d10b      	bne.n	80053b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	3302      	adds	r3, #2
 80053ae:	61bb      	str	r3, [r7, #24]
 80053b0:	e007      	b.n	80053c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	781a      	ldrb	r2, [r3, #0]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	3301      	adds	r3, #1
 80053c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	3b01      	subs	r3, #1
 80053ca:	b29a      	uxth	r2, r3
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1cb      	bne.n	8005372 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2200      	movs	r2, #0
 80053e2:	2140      	movs	r1, #64	@ 0x40
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 f814 	bl	8005412 <UART_WaitOnFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e006      	b.n	800540a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005404:	2300      	movs	r3, #0
 8005406:	e000      	b.n	800540a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005408:	2302      	movs	r3, #2
  }
}
 800540a:	4618      	mov	r0, r3
 800540c:	3720      	adds	r7, #32
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}

08005412 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005412:	b580      	push	{r7, lr}
 8005414:	b086      	sub	sp, #24
 8005416:	af00      	add	r7, sp, #0
 8005418:	60f8      	str	r0, [r7, #12]
 800541a:	60b9      	str	r1, [r7, #8]
 800541c:	603b      	str	r3, [r7, #0]
 800541e:	4613      	mov	r3, r2
 8005420:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005422:	e03b      	b.n	800549c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005424:	6a3b      	ldr	r3, [r7, #32]
 8005426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542a:	d037      	beq.n	800549c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800542c:	f7fd fb26 	bl	8002a7c <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	6a3a      	ldr	r2, [r7, #32]
 8005438:	429a      	cmp	r2, r3
 800543a:	d302      	bcc.n	8005442 <UART_WaitOnFlagUntilTimeout+0x30>
 800543c:	6a3b      	ldr	r3, [r7, #32]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d101      	bne.n	8005446 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e03a      	b.n	80054bc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f003 0304 	and.w	r3, r3, #4
 8005450:	2b00      	cmp	r3, #0
 8005452:	d023      	beq.n	800549c <UART_WaitOnFlagUntilTimeout+0x8a>
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b80      	cmp	r3, #128	@ 0x80
 8005458:	d020      	beq.n	800549c <UART_WaitOnFlagUntilTimeout+0x8a>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b40      	cmp	r3, #64	@ 0x40
 800545e:	d01d      	beq.n	800549c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0308 	and.w	r3, r3, #8
 800546a:	2b08      	cmp	r3, #8
 800546c:	d116      	bne.n	800549c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800546e:	2300      	movs	r3, #0
 8005470:	617b      	str	r3, [r7, #20]
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	617b      	str	r3, [r7, #20]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	617b      	str	r3, [r7, #20]
 8005482:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	f000 f81d 	bl	80054c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2208      	movs	r2, #8
 800548e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005498:	2301      	movs	r3, #1
 800549a:	e00f      	b.n	80054bc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	4013      	ands	r3, r2
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	bf0c      	ite	eq
 80054ac:	2301      	moveq	r3, #1
 80054ae:	2300      	movne	r3, #0
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	461a      	mov	r2, r3
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	429a      	cmp	r2, r3
 80054b8:	d0b4      	beq.n	8005424 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b095      	sub	sp, #84	@ 0x54
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	330c      	adds	r3, #12
 80054d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054d6:	e853 3f00 	ldrex	r3, [r3]
 80054da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80054dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80054e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	330c      	adds	r3, #12
 80054ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80054ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80054ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80054f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80054f4:	e841 2300 	strex	r3, r2, [r1]
 80054f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80054fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1e5      	bne.n	80054cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	3314      	adds	r3, #20
 8005506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6a3b      	ldr	r3, [r7, #32]
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	3314      	adds	r3, #20
 800551e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005520:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005522:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005524:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005526:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005528:	e841 2300 	strex	r3, r2, [r1]
 800552c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800552e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1e5      	bne.n	8005500 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005538:	2b01      	cmp	r3, #1
 800553a:	d119      	bne.n	8005570 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	330c      	adds	r3, #12
 8005542:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	e853 3f00 	ldrex	r3, [r3]
 800554a:	60bb      	str	r3, [r7, #8]
   return(result);
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	f023 0310 	bic.w	r3, r3, #16
 8005552:	647b      	str	r3, [r7, #68]	@ 0x44
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	330c      	adds	r3, #12
 800555a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800555c:	61ba      	str	r2, [r7, #24]
 800555e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005560:	6979      	ldr	r1, [r7, #20]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	e841 2300 	strex	r3, r2, [r1]
 8005568:	613b      	str	r3, [r7, #16]
   return(result);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1e5      	bne.n	800553c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800557e:	bf00      	nop
 8005580:	3754      	adds	r7, #84	@ 0x54
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
	...

0800558c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800558c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005590:	b0c0      	sub	sp, #256	@ 0x100
 8005592:	af00      	add	r7, sp, #0
 8005594:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	691b      	ldr	r3, [r3, #16]
 80055a0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80055a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a8:	68d9      	ldr	r1, [r3, #12]
 80055aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ae:	681a      	ldr	r2, [r3, #0]
 80055b0:	ea40 0301 	orr.w	r3, r0, r1
 80055b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c0:	691b      	ldr	r3, [r3, #16]
 80055c2:	431a      	orrs	r2, r3
 80055c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055c8:	695b      	ldr	r3, [r3, #20]
 80055ca:	431a      	orrs	r2, r3
 80055cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80055e4:	f021 010c 	bic.w	r1, r1, #12
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80055f2:	430b      	orrs	r3, r1
 80055f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005606:	6999      	ldr	r1, [r3, #24]
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560c:	681a      	ldr	r2, [r3, #0]
 800560e:	ea40 0301 	orr.w	r3, r0, r1
 8005612:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	4b8f      	ldr	r3, [pc, #572]	@ (8005858 <UART_SetConfig+0x2cc>)
 800561c:	429a      	cmp	r2, r3
 800561e:	d005      	beq.n	800562c <UART_SetConfig+0xa0>
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4b8d      	ldr	r3, [pc, #564]	@ (800585c <UART_SetConfig+0x2d0>)
 8005628:	429a      	cmp	r2, r3
 800562a:	d104      	bne.n	8005636 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800562c:	f7ff f9c8 	bl	80049c0 <HAL_RCC_GetPCLK2Freq>
 8005630:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005634:	e003      	b.n	800563e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005636:	f7ff f9af 	bl	8004998 <HAL_RCC_GetPCLK1Freq>
 800563a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005648:	f040 810c 	bne.w	8005864 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800564c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005650:	2200      	movs	r2, #0
 8005652:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005656:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800565a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800565e:	4622      	mov	r2, r4
 8005660:	462b      	mov	r3, r5
 8005662:	1891      	adds	r1, r2, r2
 8005664:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005666:	415b      	adcs	r3, r3
 8005668:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800566a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800566e:	4621      	mov	r1, r4
 8005670:	eb12 0801 	adds.w	r8, r2, r1
 8005674:	4629      	mov	r1, r5
 8005676:	eb43 0901 	adc.w	r9, r3, r1
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005686:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800568a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800568e:	4690      	mov	r8, r2
 8005690:	4699      	mov	r9, r3
 8005692:	4623      	mov	r3, r4
 8005694:	eb18 0303 	adds.w	r3, r8, r3
 8005698:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800569c:	462b      	mov	r3, r5
 800569e:	eb49 0303 	adc.w	r3, r9, r3
 80056a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80056a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80056b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80056b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80056ba:	460b      	mov	r3, r1
 80056bc:	18db      	adds	r3, r3, r3
 80056be:	653b      	str	r3, [r7, #80]	@ 0x50
 80056c0:	4613      	mov	r3, r2
 80056c2:	eb42 0303 	adc.w	r3, r2, r3
 80056c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80056c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80056cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80056d0:	f7fb fb12 	bl	8000cf8 <__aeabi_uldivmod>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4b61      	ldr	r3, [pc, #388]	@ (8005860 <UART_SetConfig+0x2d4>)
 80056da:	fba3 2302 	umull	r2, r3, r3, r2
 80056de:	095b      	lsrs	r3, r3, #5
 80056e0:	011c      	lsls	r4, r3, #4
 80056e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e6:	2200      	movs	r2, #0
 80056e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80056f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80056f4:	4642      	mov	r2, r8
 80056f6:	464b      	mov	r3, r9
 80056f8:	1891      	adds	r1, r2, r2
 80056fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80056fc:	415b      	adcs	r3, r3
 80056fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005700:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005704:	4641      	mov	r1, r8
 8005706:	eb12 0a01 	adds.w	sl, r2, r1
 800570a:	4649      	mov	r1, r9
 800570c:	eb43 0b01 	adc.w	fp, r3, r1
 8005710:	f04f 0200 	mov.w	r2, #0
 8005714:	f04f 0300 	mov.w	r3, #0
 8005718:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800571c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005720:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005724:	4692      	mov	sl, r2
 8005726:	469b      	mov	fp, r3
 8005728:	4643      	mov	r3, r8
 800572a:	eb1a 0303 	adds.w	r3, sl, r3
 800572e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005732:	464b      	mov	r3, r9
 8005734:	eb4b 0303 	adc.w	r3, fp, r3
 8005738:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800573c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005748:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800574c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005750:	460b      	mov	r3, r1
 8005752:	18db      	adds	r3, r3, r3
 8005754:	643b      	str	r3, [r7, #64]	@ 0x40
 8005756:	4613      	mov	r3, r2
 8005758:	eb42 0303 	adc.w	r3, r2, r3
 800575c:	647b      	str	r3, [r7, #68]	@ 0x44
 800575e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005762:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005766:	f7fb fac7 	bl	8000cf8 <__aeabi_uldivmod>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	4611      	mov	r1, r2
 8005770:	4b3b      	ldr	r3, [pc, #236]	@ (8005860 <UART_SetConfig+0x2d4>)
 8005772:	fba3 2301 	umull	r2, r3, r3, r1
 8005776:	095b      	lsrs	r3, r3, #5
 8005778:	2264      	movs	r2, #100	@ 0x64
 800577a:	fb02 f303 	mul.w	r3, r2, r3
 800577e:	1acb      	subs	r3, r1, r3
 8005780:	00db      	lsls	r3, r3, #3
 8005782:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005786:	4b36      	ldr	r3, [pc, #216]	@ (8005860 <UART_SetConfig+0x2d4>)
 8005788:	fba3 2302 	umull	r2, r3, r3, r2
 800578c:	095b      	lsrs	r3, r3, #5
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005794:	441c      	add	r4, r3
 8005796:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800579a:	2200      	movs	r2, #0
 800579c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80057a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80057a8:	4642      	mov	r2, r8
 80057aa:	464b      	mov	r3, r9
 80057ac:	1891      	adds	r1, r2, r2
 80057ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80057b0:	415b      	adcs	r3, r3
 80057b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80057b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80057b8:	4641      	mov	r1, r8
 80057ba:	1851      	adds	r1, r2, r1
 80057bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80057be:	4649      	mov	r1, r9
 80057c0:	414b      	adcs	r3, r1
 80057c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80057c4:	f04f 0200 	mov.w	r2, #0
 80057c8:	f04f 0300 	mov.w	r3, #0
 80057cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80057d0:	4659      	mov	r1, fp
 80057d2:	00cb      	lsls	r3, r1, #3
 80057d4:	4651      	mov	r1, sl
 80057d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057da:	4651      	mov	r1, sl
 80057dc:	00ca      	lsls	r2, r1, #3
 80057de:	4610      	mov	r0, r2
 80057e0:	4619      	mov	r1, r3
 80057e2:	4603      	mov	r3, r0
 80057e4:	4642      	mov	r2, r8
 80057e6:	189b      	adds	r3, r3, r2
 80057e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80057ec:	464b      	mov	r3, r9
 80057ee:	460a      	mov	r2, r1
 80057f0:	eb42 0303 	adc.w	r3, r2, r3
 80057f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80057f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005804:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005808:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800580c:	460b      	mov	r3, r1
 800580e:	18db      	adds	r3, r3, r3
 8005810:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005812:	4613      	mov	r3, r2
 8005814:	eb42 0303 	adc.w	r3, r2, r3
 8005818:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800581a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800581e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005822:	f7fb fa69 	bl	8000cf8 <__aeabi_uldivmod>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <UART_SetConfig+0x2d4>)
 800582c:	fba3 1302 	umull	r1, r3, r3, r2
 8005830:	095b      	lsrs	r3, r3, #5
 8005832:	2164      	movs	r1, #100	@ 0x64
 8005834:	fb01 f303 	mul.w	r3, r1, r3
 8005838:	1ad3      	subs	r3, r2, r3
 800583a:	00db      	lsls	r3, r3, #3
 800583c:	3332      	adds	r3, #50	@ 0x32
 800583e:	4a08      	ldr	r2, [pc, #32]	@ (8005860 <UART_SetConfig+0x2d4>)
 8005840:	fba2 2303 	umull	r2, r3, r2, r3
 8005844:	095b      	lsrs	r3, r3, #5
 8005846:	f003 0207 	and.w	r2, r3, #7
 800584a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4422      	add	r2, r4
 8005852:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005854:	e106      	b.n	8005a64 <UART_SetConfig+0x4d8>
 8005856:	bf00      	nop
 8005858:	40011000 	.word	0x40011000
 800585c:	40011400 	.word	0x40011400
 8005860:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005864:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005868:	2200      	movs	r2, #0
 800586a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800586e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005872:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005876:	4642      	mov	r2, r8
 8005878:	464b      	mov	r3, r9
 800587a:	1891      	adds	r1, r2, r2
 800587c:	6239      	str	r1, [r7, #32]
 800587e:	415b      	adcs	r3, r3
 8005880:	627b      	str	r3, [r7, #36]	@ 0x24
 8005882:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005886:	4641      	mov	r1, r8
 8005888:	1854      	adds	r4, r2, r1
 800588a:	4649      	mov	r1, r9
 800588c:	eb43 0501 	adc.w	r5, r3, r1
 8005890:	f04f 0200 	mov.w	r2, #0
 8005894:	f04f 0300 	mov.w	r3, #0
 8005898:	00eb      	lsls	r3, r5, #3
 800589a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800589e:	00e2      	lsls	r2, r4, #3
 80058a0:	4614      	mov	r4, r2
 80058a2:	461d      	mov	r5, r3
 80058a4:	4643      	mov	r3, r8
 80058a6:	18e3      	adds	r3, r4, r3
 80058a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80058ac:	464b      	mov	r3, r9
 80058ae:	eb45 0303 	adc.w	r3, r5, r3
 80058b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80058b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80058c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80058c6:	f04f 0200 	mov.w	r2, #0
 80058ca:	f04f 0300 	mov.w	r3, #0
 80058ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80058d2:	4629      	mov	r1, r5
 80058d4:	008b      	lsls	r3, r1, #2
 80058d6:	4621      	mov	r1, r4
 80058d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058dc:	4621      	mov	r1, r4
 80058de:	008a      	lsls	r2, r1, #2
 80058e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80058e4:	f7fb fa08 	bl	8000cf8 <__aeabi_uldivmod>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4b60      	ldr	r3, [pc, #384]	@ (8005a70 <UART_SetConfig+0x4e4>)
 80058ee:	fba3 2302 	umull	r2, r3, r3, r2
 80058f2:	095b      	lsrs	r3, r3, #5
 80058f4:	011c      	lsls	r4, r3, #4
 80058f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058fa:	2200      	movs	r2, #0
 80058fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005900:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005904:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005908:	4642      	mov	r2, r8
 800590a:	464b      	mov	r3, r9
 800590c:	1891      	adds	r1, r2, r2
 800590e:	61b9      	str	r1, [r7, #24]
 8005910:	415b      	adcs	r3, r3
 8005912:	61fb      	str	r3, [r7, #28]
 8005914:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005918:	4641      	mov	r1, r8
 800591a:	1851      	adds	r1, r2, r1
 800591c:	6139      	str	r1, [r7, #16]
 800591e:	4649      	mov	r1, r9
 8005920:	414b      	adcs	r3, r1
 8005922:	617b      	str	r3, [r7, #20]
 8005924:	f04f 0200 	mov.w	r2, #0
 8005928:	f04f 0300 	mov.w	r3, #0
 800592c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005930:	4659      	mov	r1, fp
 8005932:	00cb      	lsls	r3, r1, #3
 8005934:	4651      	mov	r1, sl
 8005936:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800593a:	4651      	mov	r1, sl
 800593c:	00ca      	lsls	r2, r1, #3
 800593e:	4610      	mov	r0, r2
 8005940:	4619      	mov	r1, r3
 8005942:	4603      	mov	r3, r0
 8005944:	4642      	mov	r2, r8
 8005946:	189b      	adds	r3, r3, r2
 8005948:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800594c:	464b      	mov	r3, r9
 800594e:	460a      	mov	r2, r1
 8005950:	eb42 0303 	adc.w	r3, r2, r3
 8005954:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005958:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005962:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005970:	4649      	mov	r1, r9
 8005972:	008b      	lsls	r3, r1, #2
 8005974:	4641      	mov	r1, r8
 8005976:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800597a:	4641      	mov	r1, r8
 800597c:	008a      	lsls	r2, r1, #2
 800597e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005982:	f7fb f9b9 	bl	8000cf8 <__aeabi_uldivmod>
 8005986:	4602      	mov	r2, r0
 8005988:	460b      	mov	r3, r1
 800598a:	4611      	mov	r1, r2
 800598c:	4b38      	ldr	r3, [pc, #224]	@ (8005a70 <UART_SetConfig+0x4e4>)
 800598e:	fba3 2301 	umull	r2, r3, r3, r1
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	2264      	movs	r2, #100	@ 0x64
 8005996:	fb02 f303 	mul.w	r3, r2, r3
 800599a:	1acb      	subs	r3, r1, r3
 800599c:	011b      	lsls	r3, r3, #4
 800599e:	3332      	adds	r3, #50	@ 0x32
 80059a0:	4a33      	ldr	r2, [pc, #204]	@ (8005a70 <UART_SetConfig+0x4e4>)
 80059a2:	fba2 2303 	umull	r2, r3, r2, r3
 80059a6:	095b      	lsrs	r3, r3, #5
 80059a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80059ac:	441c      	add	r4, r3
 80059ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059b2:	2200      	movs	r2, #0
 80059b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80059b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80059b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80059bc:	4642      	mov	r2, r8
 80059be:	464b      	mov	r3, r9
 80059c0:	1891      	adds	r1, r2, r2
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	415b      	adcs	r3, r3
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059cc:	4641      	mov	r1, r8
 80059ce:	1851      	adds	r1, r2, r1
 80059d0:	6039      	str	r1, [r7, #0]
 80059d2:	4649      	mov	r1, r9
 80059d4:	414b      	adcs	r3, r1
 80059d6:	607b      	str	r3, [r7, #4]
 80059d8:	f04f 0200 	mov.w	r2, #0
 80059dc:	f04f 0300 	mov.w	r3, #0
 80059e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059e4:	4659      	mov	r1, fp
 80059e6:	00cb      	lsls	r3, r1, #3
 80059e8:	4651      	mov	r1, sl
 80059ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ee:	4651      	mov	r1, sl
 80059f0:	00ca      	lsls	r2, r1, #3
 80059f2:	4610      	mov	r0, r2
 80059f4:	4619      	mov	r1, r3
 80059f6:	4603      	mov	r3, r0
 80059f8:	4642      	mov	r2, r8
 80059fa:	189b      	adds	r3, r3, r2
 80059fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80059fe:	464b      	mov	r3, r9
 8005a00:	460a      	mov	r2, r1
 8005a02:	eb42 0303 	adc.w	r3, r2, r3
 8005a06:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a12:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005a20:	4649      	mov	r1, r9
 8005a22:	008b      	lsls	r3, r1, #2
 8005a24:	4641      	mov	r1, r8
 8005a26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a2a:	4641      	mov	r1, r8
 8005a2c:	008a      	lsls	r2, r1, #2
 8005a2e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005a32:	f7fb f961 	bl	8000cf8 <__aeabi_uldivmod>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005a70 <UART_SetConfig+0x4e4>)
 8005a3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005a40:	095b      	lsrs	r3, r3, #5
 8005a42:	2164      	movs	r1, #100	@ 0x64
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	011b      	lsls	r3, r3, #4
 8005a4c:	3332      	adds	r3, #50	@ 0x32
 8005a4e:	4a08      	ldr	r2, [pc, #32]	@ (8005a70 <UART_SetConfig+0x4e4>)
 8005a50:	fba2 2303 	umull	r2, r3, r2, r3
 8005a54:	095b      	lsrs	r3, r3, #5
 8005a56:	f003 020f 	and.w	r2, r3, #15
 8005a5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4422      	add	r2, r4
 8005a62:	609a      	str	r2, [r3, #8]
}
 8005a64:	bf00      	nop
 8005a66:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a70:	51eb851f 	.word	0x51eb851f

08005a74 <__cvt>:
 8005a74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a78:	ec57 6b10 	vmov	r6, r7, d0
 8005a7c:	2f00      	cmp	r7, #0
 8005a7e:	460c      	mov	r4, r1
 8005a80:	4619      	mov	r1, r3
 8005a82:	463b      	mov	r3, r7
 8005a84:	bfbb      	ittet	lt
 8005a86:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005a8a:	461f      	movlt	r7, r3
 8005a8c:	2300      	movge	r3, #0
 8005a8e:	232d      	movlt	r3, #45	@ 0x2d
 8005a90:	700b      	strb	r3, [r1, #0]
 8005a92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a94:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005a98:	4691      	mov	r9, r2
 8005a9a:	f023 0820 	bic.w	r8, r3, #32
 8005a9e:	bfbc      	itt	lt
 8005aa0:	4632      	movlt	r2, r6
 8005aa2:	4616      	movlt	r6, r2
 8005aa4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005aa8:	d005      	beq.n	8005ab6 <__cvt+0x42>
 8005aaa:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005aae:	d100      	bne.n	8005ab2 <__cvt+0x3e>
 8005ab0:	3401      	adds	r4, #1
 8005ab2:	2102      	movs	r1, #2
 8005ab4:	e000      	b.n	8005ab8 <__cvt+0x44>
 8005ab6:	2103      	movs	r1, #3
 8005ab8:	ab03      	add	r3, sp, #12
 8005aba:	9301      	str	r3, [sp, #4]
 8005abc:	ab02      	add	r3, sp, #8
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	ec47 6b10 	vmov	d0, r6, r7
 8005ac4:	4653      	mov	r3, sl
 8005ac6:	4622      	mov	r2, r4
 8005ac8:	f000 fe82 	bl	80067d0 <_dtoa_r>
 8005acc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005ad0:	4605      	mov	r5, r0
 8005ad2:	d119      	bne.n	8005b08 <__cvt+0x94>
 8005ad4:	f019 0f01 	tst.w	r9, #1
 8005ad8:	d00e      	beq.n	8005af8 <__cvt+0x84>
 8005ada:	eb00 0904 	add.w	r9, r0, r4
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	f7fa fff7 	bl	8000ad8 <__aeabi_dcmpeq>
 8005aea:	b108      	cbz	r0, 8005af0 <__cvt+0x7c>
 8005aec:	f8cd 900c 	str.w	r9, [sp, #12]
 8005af0:	2230      	movs	r2, #48	@ 0x30
 8005af2:	9b03      	ldr	r3, [sp, #12]
 8005af4:	454b      	cmp	r3, r9
 8005af6:	d31e      	bcc.n	8005b36 <__cvt+0xc2>
 8005af8:	9b03      	ldr	r3, [sp, #12]
 8005afa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005afc:	1b5b      	subs	r3, r3, r5
 8005afe:	4628      	mov	r0, r5
 8005b00:	6013      	str	r3, [r2, #0]
 8005b02:	b004      	add	sp, #16
 8005b04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005b0c:	eb00 0904 	add.w	r9, r0, r4
 8005b10:	d1e5      	bne.n	8005ade <__cvt+0x6a>
 8005b12:	7803      	ldrb	r3, [r0, #0]
 8005b14:	2b30      	cmp	r3, #48	@ 0x30
 8005b16:	d10a      	bne.n	8005b2e <__cvt+0xba>
 8005b18:	2200      	movs	r2, #0
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	4630      	mov	r0, r6
 8005b1e:	4639      	mov	r1, r7
 8005b20:	f7fa ffda 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b24:	b918      	cbnz	r0, 8005b2e <__cvt+0xba>
 8005b26:	f1c4 0401 	rsb	r4, r4, #1
 8005b2a:	f8ca 4000 	str.w	r4, [sl]
 8005b2e:	f8da 3000 	ldr.w	r3, [sl]
 8005b32:	4499      	add	r9, r3
 8005b34:	e7d3      	b.n	8005ade <__cvt+0x6a>
 8005b36:	1c59      	adds	r1, r3, #1
 8005b38:	9103      	str	r1, [sp, #12]
 8005b3a:	701a      	strb	r2, [r3, #0]
 8005b3c:	e7d9      	b.n	8005af2 <__cvt+0x7e>

08005b3e <__exponent>:
 8005b3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005b40:	2900      	cmp	r1, #0
 8005b42:	bfba      	itte	lt
 8005b44:	4249      	neglt	r1, r1
 8005b46:	232d      	movlt	r3, #45	@ 0x2d
 8005b48:	232b      	movge	r3, #43	@ 0x2b
 8005b4a:	2909      	cmp	r1, #9
 8005b4c:	7002      	strb	r2, [r0, #0]
 8005b4e:	7043      	strb	r3, [r0, #1]
 8005b50:	dd29      	ble.n	8005ba6 <__exponent+0x68>
 8005b52:	f10d 0307 	add.w	r3, sp, #7
 8005b56:	461d      	mov	r5, r3
 8005b58:	270a      	movs	r7, #10
 8005b5a:	461a      	mov	r2, r3
 8005b5c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005b60:	fb07 1416 	mls	r4, r7, r6, r1
 8005b64:	3430      	adds	r4, #48	@ 0x30
 8005b66:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005b6a:	460c      	mov	r4, r1
 8005b6c:	2c63      	cmp	r4, #99	@ 0x63
 8005b6e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005b72:	4631      	mov	r1, r6
 8005b74:	dcf1      	bgt.n	8005b5a <__exponent+0x1c>
 8005b76:	3130      	adds	r1, #48	@ 0x30
 8005b78:	1e94      	subs	r4, r2, #2
 8005b7a:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005b7e:	1c41      	adds	r1, r0, #1
 8005b80:	4623      	mov	r3, r4
 8005b82:	42ab      	cmp	r3, r5
 8005b84:	d30a      	bcc.n	8005b9c <__exponent+0x5e>
 8005b86:	f10d 0309 	add.w	r3, sp, #9
 8005b8a:	1a9b      	subs	r3, r3, r2
 8005b8c:	42ac      	cmp	r4, r5
 8005b8e:	bf88      	it	hi
 8005b90:	2300      	movhi	r3, #0
 8005b92:	3302      	adds	r3, #2
 8005b94:	4403      	add	r3, r0
 8005b96:	1a18      	subs	r0, r3, r0
 8005b98:	b003      	add	sp, #12
 8005b9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b9c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005ba0:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005ba4:	e7ed      	b.n	8005b82 <__exponent+0x44>
 8005ba6:	2330      	movs	r3, #48	@ 0x30
 8005ba8:	3130      	adds	r1, #48	@ 0x30
 8005baa:	7083      	strb	r3, [r0, #2]
 8005bac:	70c1      	strb	r1, [r0, #3]
 8005bae:	1d03      	adds	r3, r0, #4
 8005bb0:	e7f1      	b.n	8005b96 <__exponent+0x58>
	...

08005bb4 <_printf_float>:
 8005bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bb8:	b08d      	sub	sp, #52	@ 0x34
 8005bba:	460c      	mov	r4, r1
 8005bbc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005bc0:	4616      	mov	r6, r2
 8005bc2:	461f      	mov	r7, r3
 8005bc4:	4605      	mov	r5, r0
 8005bc6:	f000 fcf5 	bl	80065b4 <_localeconv_r>
 8005bca:	6803      	ldr	r3, [r0, #0]
 8005bcc:	9304      	str	r3, [sp, #16]
 8005bce:	4618      	mov	r0, r3
 8005bd0:	f7fa fb56 	bl	8000280 <strlen>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	930a      	str	r3, [sp, #40]	@ 0x28
 8005bd8:	f8d8 3000 	ldr.w	r3, [r8]
 8005bdc:	9005      	str	r0, [sp, #20]
 8005bde:	3307      	adds	r3, #7
 8005be0:	f023 0307 	bic.w	r3, r3, #7
 8005be4:	f103 0208 	add.w	r2, r3, #8
 8005be8:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005bec:	f8d4 b000 	ldr.w	fp, [r4]
 8005bf0:	f8c8 2000 	str.w	r2, [r8]
 8005bf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bf8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005bfc:	9307      	str	r3, [sp, #28]
 8005bfe:	f8cd 8018 	str.w	r8, [sp, #24]
 8005c02:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005c06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c0a:	4b9c      	ldr	r3, [pc, #624]	@ (8005e7c <_printf_float+0x2c8>)
 8005c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c10:	f7fa ff94 	bl	8000b3c <__aeabi_dcmpun>
 8005c14:	bb70      	cbnz	r0, 8005c74 <_printf_float+0xc0>
 8005c16:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c1a:	4b98      	ldr	r3, [pc, #608]	@ (8005e7c <_printf_float+0x2c8>)
 8005c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8005c20:	f7fa ff6e 	bl	8000b00 <__aeabi_dcmple>
 8005c24:	bb30      	cbnz	r0, 8005c74 <_printf_float+0xc0>
 8005c26:	2200      	movs	r2, #0
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	4649      	mov	r1, r9
 8005c2e:	f7fa ff5d 	bl	8000aec <__aeabi_dcmplt>
 8005c32:	b110      	cbz	r0, 8005c3a <_printf_float+0x86>
 8005c34:	232d      	movs	r3, #45	@ 0x2d
 8005c36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c3a:	4a91      	ldr	r2, [pc, #580]	@ (8005e80 <_printf_float+0x2cc>)
 8005c3c:	4b91      	ldr	r3, [pc, #580]	@ (8005e84 <_printf_float+0x2d0>)
 8005c3e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005c42:	bf94      	ite	ls
 8005c44:	4690      	movls	r8, r2
 8005c46:	4698      	movhi	r8, r3
 8005c48:	2303      	movs	r3, #3
 8005c4a:	6123      	str	r3, [r4, #16]
 8005c4c:	f02b 0304 	bic.w	r3, fp, #4
 8005c50:	6023      	str	r3, [r4, #0]
 8005c52:	f04f 0900 	mov.w	r9, #0
 8005c56:	9700      	str	r7, [sp, #0]
 8005c58:	4633      	mov	r3, r6
 8005c5a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	4628      	mov	r0, r5
 8005c60:	f000 f9d2 	bl	8006008 <_printf_common>
 8005c64:	3001      	adds	r0, #1
 8005c66:	f040 808d 	bne.w	8005d84 <_printf_float+0x1d0>
 8005c6a:	f04f 30ff 	mov.w	r0, #4294967295
 8005c6e:	b00d      	add	sp, #52	@ 0x34
 8005c70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c74:	4642      	mov	r2, r8
 8005c76:	464b      	mov	r3, r9
 8005c78:	4640      	mov	r0, r8
 8005c7a:	4649      	mov	r1, r9
 8005c7c:	f7fa ff5e 	bl	8000b3c <__aeabi_dcmpun>
 8005c80:	b140      	cbz	r0, 8005c94 <_printf_float+0xe0>
 8005c82:	464b      	mov	r3, r9
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	bfbc      	itt	lt
 8005c88:	232d      	movlt	r3, #45	@ 0x2d
 8005c8a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005c8e:	4a7e      	ldr	r2, [pc, #504]	@ (8005e88 <_printf_float+0x2d4>)
 8005c90:	4b7e      	ldr	r3, [pc, #504]	@ (8005e8c <_printf_float+0x2d8>)
 8005c92:	e7d4      	b.n	8005c3e <_printf_float+0x8a>
 8005c94:	6863      	ldr	r3, [r4, #4]
 8005c96:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005c9a:	9206      	str	r2, [sp, #24]
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	d13b      	bne.n	8005d18 <_printf_float+0x164>
 8005ca0:	2306      	movs	r3, #6
 8005ca2:	6063      	str	r3, [r4, #4]
 8005ca4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005ca8:	2300      	movs	r3, #0
 8005caa:	6022      	str	r2, [r4, #0]
 8005cac:	9303      	str	r3, [sp, #12]
 8005cae:	ab0a      	add	r3, sp, #40	@ 0x28
 8005cb0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005cb4:	ab09      	add	r3, sp, #36	@ 0x24
 8005cb6:	9300      	str	r3, [sp, #0]
 8005cb8:	6861      	ldr	r1, [r4, #4]
 8005cba:	ec49 8b10 	vmov	d0, r8, r9
 8005cbe:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	f7ff fed6 	bl	8005a74 <__cvt>
 8005cc8:	9b06      	ldr	r3, [sp, #24]
 8005cca:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005ccc:	2b47      	cmp	r3, #71	@ 0x47
 8005cce:	4680      	mov	r8, r0
 8005cd0:	d129      	bne.n	8005d26 <_printf_float+0x172>
 8005cd2:	1cc8      	adds	r0, r1, #3
 8005cd4:	db02      	blt.n	8005cdc <_printf_float+0x128>
 8005cd6:	6863      	ldr	r3, [r4, #4]
 8005cd8:	4299      	cmp	r1, r3
 8005cda:	dd41      	ble.n	8005d60 <_printf_float+0x1ac>
 8005cdc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005ce0:	fa5f fa8a 	uxtb.w	sl, sl
 8005ce4:	3901      	subs	r1, #1
 8005ce6:	4652      	mov	r2, sl
 8005ce8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005cec:	9109      	str	r1, [sp, #36]	@ 0x24
 8005cee:	f7ff ff26 	bl	8005b3e <__exponent>
 8005cf2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005cf4:	1813      	adds	r3, r2, r0
 8005cf6:	2a01      	cmp	r2, #1
 8005cf8:	4681      	mov	r9, r0
 8005cfa:	6123      	str	r3, [r4, #16]
 8005cfc:	dc02      	bgt.n	8005d04 <_printf_float+0x150>
 8005cfe:	6822      	ldr	r2, [r4, #0]
 8005d00:	07d2      	lsls	r2, r2, #31
 8005d02:	d501      	bpl.n	8005d08 <_printf_float+0x154>
 8005d04:	3301      	adds	r3, #1
 8005d06:	6123      	str	r3, [r4, #16]
 8005d08:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d0a2      	beq.n	8005c56 <_printf_float+0xa2>
 8005d10:	232d      	movs	r3, #45	@ 0x2d
 8005d12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d16:	e79e      	b.n	8005c56 <_printf_float+0xa2>
 8005d18:	9a06      	ldr	r2, [sp, #24]
 8005d1a:	2a47      	cmp	r2, #71	@ 0x47
 8005d1c:	d1c2      	bne.n	8005ca4 <_printf_float+0xf0>
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d1c0      	bne.n	8005ca4 <_printf_float+0xf0>
 8005d22:	2301      	movs	r3, #1
 8005d24:	e7bd      	b.n	8005ca2 <_printf_float+0xee>
 8005d26:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d2a:	d9db      	bls.n	8005ce4 <_printf_float+0x130>
 8005d2c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005d30:	d118      	bne.n	8005d64 <_printf_float+0x1b0>
 8005d32:	2900      	cmp	r1, #0
 8005d34:	6863      	ldr	r3, [r4, #4]
 8005d36:	dd0b      	ble.n	8005d50 <_printf_float+0x19c>
 8005d38:	6121      	str	r1, [r4, #16]
 8005d3a:	b913      	cbnz	r3, 8005d42 <_printf_float+0x18e>
 8005d3c:	6822      	ldr	r2, [r4, #0]
 8005d3e:	07d0      	lsls	r0, r2, #31
 8005d40:	d502      	bpl.n	8005d48 <_printf_float+0x194>
 8005d42:	3301      	adds	r3, #1
 8005d44:	440b      	add	r3, r1
 8005d46:	6123      	str	r3, [r4, #16]
 8005d48:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005d4a:	f04f 0900 	mov.w	r9, #0
 8005d4e:	e7db      	b.n	8005d08 <_printf_float+0x154>
 8005d50:	b913      	cbnz	r3, 8005d58 <_printf_float+0x1a4>
 8005d52:	6822      	ldr	r2, [r4, #0]
 8005d54:	07d2      	lsls	r2, r2, #31
 8005d56:	d501      	bpl.n	8005d5c <_printf_float+0x1a8>
 8005d58:	3302      	adds	r3, #2
 8005d5a:	e7f4      	b.n	8005d46 <_printf_float+0x192>
 8005d5c:	2301      	movs	r3, #1
 8005d5e:	e7f2      	b.n	8005d46 <_printf_float+0x192>
 8005d60:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005d66:	4299      	cmp	r1, r3
 8005d68:	db05      	blt.n	8005d76 <_printf_float+0x1c2>
 8005d6a:	6823      	ldr	r3, [r4, #0]
 8005d6c:	6121      	str	r1, [r4, #16]
 8005d6e:	07d8      	lsls	r0, r3, #31
 8005d70:	d5ea      	bpl.n	8005d48 <_printf_float+0x194>
 8005d72:	1c4b      	adds	r3, r1, #1
 8005d74:	e7e7      	b.n	8005d46 <_printf_float+0x192>
 8005d76:	2900      	cmp	r1, #0
 8005d78:	bfd4      	ite	le
 8005d7a:	f1c1 0202 	rsble	r2, r1, #2
 8005d7e:	2201      	movgt	r2, #1
 8005d80:	4413      	add	r3, r2
 8005d82:	e7e0      	b.n	8005d46 <_printf_float+0x192>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	055a      	lsls	r2, r3, #21
 8005d88:	d407      	bmi.n	8005d9a <_printf_float+0x1e6>
 8005d8a:	6923      	ldr	r3, [r4, #16]
 8005d8c:	4642      	mov	r2, r8
 8005d8e:	4631      	mov	r1, r6
 8005d90:	4628      	mov	r0, r5
 8005d92:	47b8      	blx	r7
 8005d94:	3001      	adds	r0, #1
 8005d96:	d12b      	bne.n	8005df0 <_printf_float+0x23c>
 8005d98:	e767      	b.n	8005c6a <_printf_float+0xb6>
 8005d9a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005d9e:	f240 80dd 	bls.w	8005f5c <_printf_float+0x3a8>
 8005da2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005da6:	2200      	movs	r2, #0
 8005da8:	2300      	movs	r3, #0
 8005daa:	f7fa fe95 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	d033      	beq.n	8005e1a <_printf_float+0x266>
 8005db2:	4a37      	ldr	r2, [pc, #220]	@ (8005e90 <_printf_float+0x2dc>)
 8005db4:	2301      	movs	r3, #1
 8005db6:	4631      	mov	r1, r6
 8005db8:	4628      	mov	r0, r5
 8005dba:	47b8      	blx	r7
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	f43f af54 	beq.w	8005c6a <_printf_float+0xb6>
 8005dc2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005dc6:	4543      	cmp	r3, r8
 8005dc8:	db02      	blt.n	8005dd0 <_printf_float+0x21c>
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	07d8      	lsls	r0, r3, #31
 8005dce:	d50f      	bpl.n	8005df0 <_printf_float+0x23c>
 8005dd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dd4:	4631      	mov	r1, r6
 8005dd6:	4628      	mov	r0, r5
 8005dd8:	47b8      	blx	r7
 8005dda:	3001      	adds	r0, #1
 8005ddc:	f43f af45 	beq.w	8005c6a <_printf_float+0xb6>
 8005de0:	f04f 0900 	mov.w	r9, #0
 8005de4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005de8:	f104 0a1a 	add.w	sl, r4, #26
 8005dec:	45c8      	cmp	r8, r9
 8005dee:	dc09      	bgt.n	8005e04 <_printf_float+0x250>
 8005df0:	6823      	ldr	r3, [r4, #0]
 8005df2:	079b      	lsls	r3, r3, #30
 8005df4:	f100 8103 	bmi.w	8005ffe <_printf_float+0x44a>
 8005df8:	68e0      	ldr	r0, [r4, #12]
 8005dfa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dfc:	4298      	cmp	r0, r3
 8005dfe:	bfb8      	it	lt
 8005e00:	4618      	movlt	r0, r3
 8005e02:	e734      	b.n	8005c6e <_printf_float+0xba>
 8005e04:	2301      	movs	r3, #1
 8005e06:	4652      	mov	r2, sl
 8005e08:	4631      	mov	r1, r6
 8005e0a:	4628      	mov	r0, r5
 8005e0c:	47b8      	blx	r7
 8005e0e:	3001      	adds	r0, #1
 8005e10:	f43f af2b 	beq.w	8005c6a <_printf_float+0xb6>
 8005e14:	f109 0901 	add.w	r9, r9, #1
 8005e18:	e7e8      	b.n	8005dec <_printf_float+0x238>
 8005e1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	dc39      	bgt.n	8005e94 <_printf_float+0x2e0>
 8005e20:	4a1b      	ldr	r2, [pc, #108]	@ (8005e90 <_printf_float+0x2dc>)
 8005e22:	2301      	movs	r3, #1
 8005e24:	4631      	mov	r1, r6
 8005e26:	4628      	mov	r0, r5
 8005e28:	47b8      	blx	r7
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	f43f af1d 	beq.w	8005c6a <_printf_float+0xb6>
 8005e30:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005e34:	ea59 0303 	orrs.w	r3, r9, r3
 8005e38:	d102      	bne.n	8005e40 <_printf_float+0x28c>
 8005e3a:	6823      	ldr	r3, [r4, #0]
 8005e3c:	07d9      	lsls	r1, r3, #31
 8005e3e:	d5d7      	bpl.n	8005df0 <_printf_float+0x23c>
 8005e40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e44:	4631      	mov	r1, r6
 8005e46:	4628      	mov	r0, r5
 8005e48:	47b8      	blx	r7
 8005e4a:	3001      	adds	r0, #1
 8005e4c:	f43f af0d 	beq.w	8005c6a <_printf_float+0xb6>
 8005e50:	f04f 0a00 	mov.w	sl, #0
 8005e54:	f104 0b1a 	add.w	fp, r4, #26
 8005e58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e5a:	425b      	negs	r3, r3
 8005e5c:	4553      	cmp	r3, sl
 8005e5e:	dc01      	bgt.n	8005e64 <_printf_float+0x2b0>
 8005e60:	464b      	mov	r3, r9
 8005e62:	e793      	b.n	8005d8c <_printf_float+0x1d8>
 8005e64:	2301      	movs	r3, #1
 8005e66:	465a      	mov	r2, fp
 8005e68:	4631      	mov	r1, r6
 8005e6a:	4628      	mov	r0, r5
 8005e6c:	47b8      	blx	r7
 8005e6e:	3001      	adds	r0, #1
 8005e70:	f43f aefb 	beq.w	8005c6a <_printf_float+0xb6>
 8005e74:	f10a 0a01 	add.w	sl, sl, #1
 8005e78:	e7ee      	b.n	8005e58 <_printf_float+0x2a4>
 8005e7a:	bf00      	nop
 8005e7c:	7fefffff 	.word	0x7fefffff
 8005e80:	08009d9c 	.word	0x08009d9c
 8005e84:	08009da0 	.word	0x08009da0
 8005e88:	08009da4 	.word	0x08009da4
 8005e8c:	08009da8 	.word	0x08009da8
 8005e90:	08009dac 	.word	0x08009dac
 8005e94:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005e96:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005e9a:	4553      	cmp	r3, sl
 8005e9c:	bfa8      	it	ge
 8005e9e:	4653      	movge	r3, sl
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	4699      	mov	r9, r3
 8005ea4:	dc36      	bgt.n	8005f14 <_printf_float+0x360>
 8005ea6:	f04f 0b00 	mov.w	fp, #0
 8005eaa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eae:	f104 021a 	add.w	r2, r4, #26
 8005eb2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005eb4:	9306      	str	r3, [sp, #24]
 8005eb6:	eba3 0309 	sub.w	r3, r3, r9
 8005eba:	455b      	cmp	r3, fp
 8005ebc:	dc31      	bgt.n	8005f22 <_printf_float+0x36e>
 8005ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec0:	459a      	cmp	sl, r3
 8005ec2:	dc3a      	bgt.n	8005f3a <_printf_float+0x386>
 8005ec4:	6823      	ldr	r3, [r4, #0]
 8005ec6:	07da      	lsls	r2, r3, #31
 8005ec8:	d437      	bmi.n	8005f3a <_printf_float+0x386>
 8005eca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ecc:	ebaa 0903 	sub.w	r9, sl, r3
 8005ed0:	9b06      	ldr	r3, [sp, #24]
 8005ed2:	ebaa 0303 	sub.w	r3, sl, r3
 8005ed6:	4599      	cmp	r9, r3
 8005ed8:	bfa8      	it	ge
 8005eda:	4699      	movge	r9, r3
 8005edc:	f1b9 0f00 	cmp.w	r9, #0
 8005ee0:	dc33      	bgt.n	8005f4a <_printf_float+0x396>
 8005ee2:	f04f 0800 	mov.w	r8, #0
 8005ee6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005eea:	f104 0b1a 	add.w	fp, r4, #26
 8005eee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ef0:	ebaa 0303 	sub.w	r3, sl, r3
 8005ef4:	eba3 0309 	sub.w	r3, r3, r9
 8005ef8:	4543      	cmp	r3, r8
 8005efa:	f77f af79 	ble.w	8005df0 <_printf_float+0x23c>
 8005efe:	2301      	movs	r3, #1
 8005f00:	465a      	mov	r2, fp
 8005f02:	4631      	mov	r1, r6
 8005f04:	4628      	mov	r0, r5
 8005f06:	47b8      	blx	r7
 8005f08:	3001      	adds	r0, #1
 8005f0a:	f43f aeae 	beq.w	8005c6a <_printf_float+0xb6>
 8005f0e:	f108 0801 	add.w	r8, r8, #1
 8005f12:	e7ec      	b.n	8005eee <_printf_float+0x33a>
 8005f14:	4642      	mov	r2, r8
 8005f16:	4631      	mov	r1, r6
 8005f18:	4628      	mov	r0, r5
 8005f1a:	47b8      	blx	r7
 8005f1c:	3001      	adds	r0, #1
 8005f1e:	d1c2      	bne.n	8005ea6 <_printf_float+0x2f2>
 8005f20:	e6a3      	b.n	8005c6a <_printf_float+0xb6>
 8005f22:	2301      	movs	r3, #1
 8005f24:	4631      	mov	r1, r6
 8005f26:	4628      	mov	r0, r5
 8005f28:	9206      	str	r2, [sp, #24]
 8005f2a:	47b8      	blx	r7
 8005f2c:	3001      	adds	r0, #1
 8005f2e:	f43f ae9c 	beq.w	8005c6a <_printf_float+0xb6>
 8005f32:	9a06      	ldr	r2, [sp, #24]
 8005f34:	f10b 0b01 	add.w	fp, fp, #1
 8005f38:	e7bb      	b.n	8005eb2 <_printf_float+0x2fe>
 8005f3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4628      	mov	r0, r5
 8005f42:	47b8      	blx	r7
 8005f44:	3001      	adds	r0, #1
 8005f46:	d1c0      	bne.n	8005eca <_printf_float+0x316>
 8005f48:	e68f      	b.n	8005c6a <_printf_float+0xb6>
 8005f4a:	9a06      	ldr	r2, [sp, #24]
 8005f4c:	464b      	mov	r3, r9
 8005f4e:	4442      	add	r2, r8
 8005f50:	4631      	mov	r1, r6
 8005f52:	4628      	mov	r0, r5
 8005f54:	47b8      	blx	r7
 8005f56:	3001      	adds	r0, #1
 8005f58:	d1c3      	bne.n	8005ee2 <_printf_float+0x32e>
 8005f5a:	e686      	b.n	8005c6a <_printf_float+0xb6>
 8005f5c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005f60:	f1ba 0f01 	cmp.w	sl, #1
 8005f64:	dc01      	bgt.n	8005f6a <_printf_float+0x3b6>
 8005f66:	07db      	lsls	r3, r3, #31
 8005f68:	d536      	bpl.n	8005fd8 <_printf_float+0x424>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4642      	mov	r2, r8
 8005f6e:	4631      	mov	r1, r6
 8005f70:	4628      	mov	r0, r5
 8005f72:	47b8      	blx	r7
 8005f74:	3001      	adds	r0, #1
 8005f76:	f43f ae78 	beq.w	8005c6a <_printf_float+0xb6>
 8005f7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005f7e:	4631      	mov	r1, r6
 8005f80:	4628      	mov	r0, r5
 8005f82:	47b8      	blx	r7
 8005f84:	3001      	adds	r0, #1
 8005f86:	f43f ae70 	beq.w	8005c6a <_printf_float+0xb6>
 8005f8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005f8e:	2200      	movs	r2, #0
 8005f90:	2300      	movs	r3, #0
 8005f92:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005f96:	f7fa fd9f 	bl	8000ad8 <__aeabi_dcmpeq>
 8005f9a:	b9c0      	cbnz	r0, 8005fce <_printf_float+0x41a>
 8005f9c:	4653      	mov	r3, sl
 8005f9e:	f108 0201 	add.w	r2, r8, #1
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4628      	mov	r0, r5
 8005fa6:	47b8      	blx	r7
 8005fa8:	3001      	adds	r0, #1
 8005faa:	d10c      	bne.n	8005fc6 <_printf_float+0x412>
 8005fac:	e65d      	b.n	8005c6a <_printf_float+0xb6>
 8005fae:	2301      	movs	r3, #1
 8005fb0:	465a      	mov	r2, fp
 8005fb2:	4631      	mov	r1, r6
 8005fb4:	4628      	mov	r0, r5
 8005fb6:	47b8      	blx	r7
 8005fb8:	3001      	adds	r0, #1
 8005fba:	f43f ae56 	beq.w	8005c6a <_printf_float+0xb6>
 8005fbe:	f108 0801 	add.w	r8, r8, #1
 8005fc2:	45d0      	cmp	r8, sl
 8005fc4:	dbf3      	blt.n	8005fae <_printf_float+0x3fa>
 8005fc6:	464b      	mov	r3, r9
 8005fc8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005fcc:	e6df      	b.n	8005d8e <_printf_float+0x1da>
 8005fce:	f04f 0800 	mov.w	r8, #0
 8005fd2:	f104 0b1a 	add.w	fp, r4, #26
 8005fd6:	e7f4      	b.n	8005fc2 <_printf_float+0x40e>
 8005fd8:	2301      	movs	r3, #1
 8005fda:	4642      	mov	r2, r8
 8005fdc:	e7e1      	b.n	8005fa2 <_printf_float+0x3ee>
 8005fde:	2301      	movs	r3, #1
 8005fe0:	464a      	mov	r2, r9
 8005fe2:	4631      	mov	r1, r6
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	47b8      	blx	r7
 8005fe8:	3001      	adds	r0, #1
 8005fea:	f43f ae3e 	beq.w	8005c6a <_printf_float+0xb6>
 8005fee:	f108 0801 	add.w	r8, r8, #1
 8005ff2:	68e3      	ldr	r3, [r4, #12]
 8005ff4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005ff6:	1a5b      	subs	r3, r3, r1
 8005ff8:	4543      	cmp	r3, r8
 8005ffa:	dcf0      	bgt.n	8005fde <_printf_float+0x42a>
 8005ffc:	e6fc      	b.n	8005df8 <_printf_float+0x244>
 8005ffe:	f04f 0800 	mov.w	r8, #0
 8006002:	f104 0919 	add.w	r9, r4, #25
 8006006:	e7f4      	b.n	8005ff2 <_printf_float+0x43e>

08006008 <_printf_common>:
 8006008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800600c:	4616      	mov	r6, r2
 800600e:	4698      	mov	r8, r3
 8006010:	688a      	ldr	r2, [r1, #8]
 8006012:	690b      	ldr	r3, [r1, #16]
 8006014:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006018:	4293      	cmp	r3, r2
 800601a:	bfb8      	it	lt
 800601c:	4613      	movlt	r3, r2
 800601e:	6033      	str	r3, [r6, #0]
 8006020:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006024:	4607      	mov	r7, r0
 8006026:	460c      	mov	r4, r1
 8006028:	b10a      	cbz	r2, 800602e <_printf_common+0x26>
 800602a:	3301      	adds	r3, #1
 800602c:	6033      	str	r3, [r6, #0]
 800602e:	6823      	ldr	r3, [r4, #0]
 8006030:	0699      	lsls	r1, r3, #26
 8006032:	bf42      	ittt	mi
 8006034:	6833      	ldrmi	r3, [r6, #0]
 8006036:	3302      	addmi	r3, #2
 8006038:	6033      	strmi	r3, [r6, #0]
 800603a:	6825      	ldr	r5, [r4, #0]
 800603c:	f015 0506 	ands.w	r5, r5, #6
 8006040:	d106      	bne.n	8006050 <_printf_common+0x48>
 8006042:	f104 0a19 	add.w	sl, r4, #25
 8006046:	68e3      	ldr	r3, [r4, #12]
 8006048:	6832      	ldr	r2, [r6, #0]
 800604a:	1a9b      	subs	r3, r3, r2
 800604c:	42ab      	cmp	r3, r5
 800604e:	dc26      	bgt.n	800609e <_printf_common+0x96>
 8006050:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006054:	6822      	ldr	r2, [r4, #0]
 8006056:	3b00      	subs	r3, #0
 8006058:	bf18      	it	ne
 800605a:	2301      	movne	r3, #1
 800605c:	0692      	lsls	r2, r2, #26
 800605e:	d42b      	bmi.n	80060b8 <_printf_common+0xb0>
 8006060:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006064:	4641      	mov	r1, r8
 8006066:	4638      	mov	r0, r7
 8006068:	47c8      	blx	r9
 800606a:	3001      	adds	r0, #1
 800606c:	d01e      	beq.n	80060ac <_printf_common+0xa4>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	6922      	ldr	r2, [r4, #16]
 8006072:	f003 0306 	and.w	r3, r3, #6
 8006076:	2b04      	cmp	r3, #4
 8006078:	bf02      	ittt	eq
 800607a:	68e5      	ldreq	r5, [r4, #12]
 800607c:	6833      	ldreq	r3, [r6, #0]
 800607e:	1aed      	subeq	r5, r5, r3
 8006080:	68a3      	ldr	r3, [r4, #8]
 8006082:	bf0c      	ite	eq
 8006084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006088:	2500      	movne	r5, #0
 800608a:	4293      	cmp	r3, r2
 800608c:	bfc4      	itt	gt
 800608e:	1a9b      	subgt	r3, r3, r2
 8006090:	18ed      	addgt	r5, r5, r3
 8006092:	2600      	movs	r6, #0
 8006094:	341a      	adds	r4, #26
 8006096:	42b5      	cmp	r5, r6
 8006098:	d11a      	bne.n	80060d0 <_printf_common+0xc8>
 800609a:	2000      	movs	r0, #0
 800609c:	e008      	b.n	80060b0 <_printf_common+0xa8>
 800609e:	2301      	movs	r3, #1
 80060a0:	4652      	mov	r2, sl
 80060a2:	4641      	mov	r1, r8
 80060a4:	4638      	mov	r0, r7
 80060a6:	47c8      	blx	r9
 80060a8:	3001      	adds	r0, #1
 80060aa:	d103      	bne.n	80060b4 <_printf_common+0xac>
 80060ac:	f04f 30ff 	mov.w	r0, #4294967295
 80060b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060b4:	3501      	adds	r5, #1
 80060b6:	e7c6      	b.n	8006046 <_printf_common+0x3e>
 80060b8:	18e1      	adds	r1, r4, r3
 80060ba:	1c5a      	adds	r2, r3, #1
 80060bc:	2030      	movs	r0, #48	@ 0x30
 80060be:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80060c2:	4422      	add	r2, r4
 80060c4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80060c8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80060cc:	3302      	adds	r3, #2
 80060ce:	e7c7      	b.n	8006060 <_printf_common+0x58>
 80060d0:	2301      	movs	r3, #1
 80060d2:	4622      	mov	r2, r4
 80060d4:	4641      	mov	r1, r8
 80060d6:	4638      	mov	r0, r7
 80060d8:	47c8      	blx	r9
 80060da:	3001      	adds	r0, #1
 80060dc:	d0e6      	beq.n	80060ac <_printf_common+0xa4>
 80060de:	3601      	adds	r6, #1
 80060e0:	e7d9      	b.n	8006096 <_printf_common+0x8e>
	...

080060e4 <_printf_i>:
 80060e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80060e8:	7e0f      	ldrb	r7, [r1, #24]
 80060ea:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80060ec:	2f78      	cmp	r7, #120	@ 0x78
 80060ee:	4691      	mov	r9, r2
 80060f0:	4680      	mov	r8, r0
 80060f2:	460c      	mov	r4, r1
 80060f4:	469a      	mov	sl, r3
 80060f6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80060fa:	d807      	bhi.n	800610c <_printf_i+0x28>
 80060fc:	2f62      	cmp	r7, #98	@ 0x62
 80060fe:	d80a      	bhi.n	8006116 <_printf_i+0x32>
 8006100:	2f00      	cmp	r7, #0
 8006102:	f000 80d2 	beq.w	80062aa <_printf_i+0x1c6>
 8006106:	2f58      	cmp	r7, #88	@ 0x58
 8006108:	f000 80b9 	beq.w	800627e <_printf_i+0x19a>
 800610c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006110:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006114:	e03a      	b.n	800618c <_printf_i+0xa8>
 8006116:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800611a:	2b15      	cmp	r3, #21
 800611c:	d8f6      	bhi.n	800610c <_printf_i+0x28>
 800611e:	a101      	add	r1, pc, #4	@ (adr r1, 8006124 <_printf_i+0x40>)
 8006120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006124:	0800617d 	.word	0x0800617d
 8006128:	08006191 	.word	0x08006191
 800612c:	0800610d 	.word	0x0800610d
 8006130:	0800610d 	.word	0x0800610d
 8006134:	0800610d 	.word	0x0800610d
 8006138:	0800610d 	.word	0x0800610d
 800613c:	08006191 	.word	0x08006191
 8006140:	0800610d 	.word	0x0800610d
 8006144:	0800610d 	.word	0x0800610d
 8006148:	0800610d 	.word	0x0800610d
 800614c:	0800610d 	.word	0x0800610d
 8006150:	08006291 	.word	0x08006291
 8006154:	080061bb 	.word	0x080061bb
 8006158:	0800624b 	.word	0x0800624b
 800615c:	0800610d 	.word	0x0800610d
 8006160:	0800610d 	.word	0x0800610d
 8006164:	080062b3 	.word	0x080062b3
 8006168:	0800610d 	.word	0x0800610d
 800616c:	080061bb 	.word	0x080061bb
 8006170:	0800610d 	.word	0x0800610d
 8006174:	0800610d 	.word	0x0800610d
 8006178:	08006253 	.word	0x08006253
 800617c:	6833      	ldr	r3, [r6, #0]
 800617e:	1d1a      	adds	r2, r3, #4
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6032      	str	r2, [r6, #0]
 8006184:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006188:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800618c:	2301      	movs	r3, #1
 800618e:	e09d      	b.n	80062cc <_printf_i+0x1e8>
 8006190:	6833      	ldr	r3, [r6, #0]
 8006192:	6820      	ldr	r0, [r4, #0]
 8006194:	1d19      	adds	r1, r3, #4
 8006196:	6031      	str	r1, [r6, #0]
 8006198:	0606      	lsls	r6, r0, #24
 800619a:	d501      	bpl.n	80061a0 <_printf_i+0xbc>
 800619c:	681d      	ldr	r5, [r3, #0]
 800619e:	e003      	b.n	80061a8 <_printf_i+0xc4>
 80061a0:	0645      	lsls	r5, r0, #25
 80061a2:	d5fb      	bpl.n	800619c <_printf_i+0xb8>
 80061a4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80061a8:	2d00      	cmp	r5, #0
 80061aa:	da03      	bge.n	80061b4 <_printf_i+0xd0>
 80061ac:	232d      	movs	r3, #45	@ 0x2d
 80061ae:	426d      	negs	r5, r5
 80061b0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061b4:	4859      	ldr	r0, [pc, #356]	@ (800631c <_printf_i+0x238>)
 80061b6:	230a      	movs	r3, #10
 80061b8:	e011      	b.n	80061de <_printf_i+0xfa>
 80061ba:	6821      	ldr	r1, [r4, #0]
 80061bc:	6833      	ldr	r3, [r6, #0]
 80061be:	0608      	lsls	r0, r1, #24
 80061c0:	f853 5b04 	ldr.w	r5, [r3], #4
 80061c4:	d402      	bmi.n	80061cc <_printf_i+0xe8>
 80061c6:	0649      	lsls	r1, r1, #25
 80061c8:	bf48      	it	mi
 80061ca:	b2ad      	uxthmi	r5, r5
 80061cc:	2f6f      	cmp	r7, #111	@ 0x6f
 80061ce:	4853      	ldr	r0, [pc, #332]	@ (800631c <_printf_i+0x238>)
 80061d0:	6033      	str	r3, [r6, #0]
 80061d2:	bf14      	ite	ne
 80061d4:	230a      	movne	r3, #10
 80061d6:	2308      	moveq	r3, #8
 80061d8:	2100      	movs	r1, #0
 80061da:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80061de:	6866      	ldr	r6, [r4, #4]
 80061e0:	60a6      	str	r6, [r4, #8]
 80061e2:	2e00      	cmp	r6, #0
 80061e4:	bfa2      	ittt	ge
 80061e6:	6821      	ldrge	r1, [r4, #0]
 80061e8:	f021 0104 	bicge.w	r1, r1, #4
 80061ec:	6021      	strge	r1, [r4, #0]
 80061ee:	b90d      	cbnz	r5, 80061f4 <_printf_i+0x110>
 80061f0:	2e00      	cmp	r6, #0
 80061f2:	d04b      	beq.n	800628c <_printf_i+0x1a8>
 80061f4:	4616      	mov	r6, r2
 80061f6:	fbb5 f1f3 	udiv	r1, r5, r3
 80061fa:	fb03 5711 	mls	r7, r3, r1, r5
 80061fe:	5dc7      	ldrb	r7, [r0, r7]
 8006200:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006204:	462f      	mov	r7, r5
 8006206:	42bb      	cmp	r3, r7
 8006208:	460d      	mov	r5, r1
 800620a:	d9f4      	bls.n	80061f6 <_printf_i+0x112>
 800620c:	2b08      	cmp	r3, #8
 800620e:	d10b      	bne.n	8006228 <_printf_i+0x144>
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	07df      	lsls	r7, r3, #31
 8006214:	d508      	bpl.n	8006228 <_printf_i+0x144>
 8006216:	6923      	ldr	r3, [r4, #16]
 8006218:	6861      	ldr	r1, [r4, #4]
 800621a:	4299      	cmp	r1, r3
 800621c:	bfde      	ittt	le
 800621e:	2330      	movle	r3, #48	@ 0x30
 8006220:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006224:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006228:	1b92      	subs	r2, r2, r6
 800622a:	6122      	str	r2, [r4, #16]
 800622c:	f8cd a000 	str.w	sl, [sp]
 8006230:	464b      	mov	r3, r9
 8006232:	aa03      	add	r2, sp, #12
 8006234:	4621      	mov	r1, r4
 8006236:	4640      	mov	r0, r8
 8006238:	f7ff fee6 	bl	8006008 <_printf_common>
 800623c:	3001      	adds	r0, #1
 800623e:	d14a      	bne.n	80062d6 <_printf_i+0x1f2>
 8006240:	f04f 30ff 	mov.w	r0, #4294967295
 8006244:	b004      	add	sp, #16
 8006246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	f043 0320 	orr.w	r3, r3, #32
 8006250:	6023      	str	r3, [r4, #0]
 8006252:	4833      	ldr	r0, [pc, #204]	@ (8006320 <_printf_i+0x23c>)
 8006254:	2778      	movs	r7, #120	@ 0x78
 8006256:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	6831      	ldr	r1, [r6, #0]
 800625e:	061f      	lsls	r7, r3, #24
 8006260:	f851 5b04 	ldr.w	r5, [r1], #4
 8006264:	d402      	bmi.n	800626c <_printf_i+0x188>
 8006266:	065f      	lsls	r7, r3, #25
 8006268:	bf48      	it	mi
 800626a:	b2ad      	uxthmi	r5, r5
 800626c:	6031      	str	r1, [r6, #0]
 800626e:	07d9      	lsls	r1, r3, #31
 8006270:	bf44      	itt	mi
 8006272:	f043 0320 	orrmi.w	r3, r3, #32
 8006276:	6023      	strmi	r3, [r4, #0]
 8006278:	b11d      	cbz	r5, 8006282 <_printf_i+0x19e>
 800627a:	2310      	movs	r3, #16
 800627c:	e7ac      	b.n	80061d8 <_printf_i+0xf4>
 800627e:	4827      	ldr	r0, [pc, #156]	@ (800631c <_printf_i+0x238>)
 8006280:	e7e9      	b.n	8006256 <_printf_i+0x172>
 8006282:	6823      	ldr	r3, [r4, #0]
 8006284:	f023 0320 	bic.w	r3, r3, #32
 8006288:	6023      	str	r3, [r4, #0]
 800628a:	e7f6      	b.n	800627a <_printf_i+0x196>
 800628c:	4616      	mov	r6, r2
 800628e:	e7bd      	b.n	800620c <_printf_i+0x128>
 8006290:	6833      	ldr	r3, [r6, #0]
 8006292:	6825      	ldr	r5, [r4, #0]
 8006294:	6961      	ldr	r1, [r4, #20]
 8006296:	1d18      	adds	r0, r3, #4
 8006298:	6030      	str	r0, [r6, #0]
 800629a:	062e      	lsls	r6, r5, #24
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	d501      	bpl.n	80062a4 <_printf_i+0x1c0>
 80062a0:	6019      	str	r1, [r3, #0]
 80062a2:	e002      	b.n	80062aa <_printf_i+0x1c6>
 80062a4:	0668      	lsls	r0, r5, #25
 80062a6:	d5fb      	bpl.n	80062a0 <_printf_i+0x1bc>
 80062a8:	8019      	strh	r1, [r3, #0]
 80062aa:	2300      	movs	r3, #0
 80062ac:	6123      	str	r3, [r4, #16]
 80062ae:	4616      	mov	r6, r2
 80062b0:	e7bc      	b.n	800622c <_printf_i+0x148>
 80062b2:	6833      	ldr	r3, [r6, #0]
 80062b4:	1d1a      	adds	r2, r3, #4
 80062b6:	6032      	str	r2, [r6, #0]
 80062b8:	681e      	ldr	r6, [r3, #0]
 80062ba:	6862      	ldr	r2, [r4, #4]
 80062bc:	2100      	movs	r1, #0
 80062be:	4630      	mov	r0, r6
 80062c0:	f7f9 ff8e 	bl	80001e0 <memchr>
 80062c4:	b108      	cbz	r0, 80062ca <_printf_i+0x1e6>
 80062c6:	1b80      	subs	r0, r0, r6
 80062c8:	6060      	str	r0, [r4, #4]
 80062ca:	6863      	ldr	r3, [r4, #4]
 80062cc:	6123      	str	r3, [r4, #16]
 80062ce:	2300      	movs	r3, #0
 80062d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062d4:	e7aa      	b.n	800622c <_printf_i+0x148>
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	4632      	mov	r2, r6
 80062da:	4649      	mov	r1, r9
 80062dc:	4640      	mov	r0, r8
 80062de:	47d0      	blx	sl
 80062e0:	3001      	adds	r0, #1
 80062e2:	d0ad      	beq.n	8006240 <_printf_i+0x15c>
 80062e4:	6823      	ldr	r3, [r4, #0]
 80062e6:	079b      	lsls	r3, r3, #30
 80062e8:	d413      	bmi.n	8006312 <_printf_i+0x22e>
 80062ea:	68e0      	ldr	r0, [r4, #12]
 80062ec:	9b03      	ldr	r3, [sp, #12]
 80062ee:	4298      	cmp	r0, r3
 80062f0:	bfb8      	it	lt
 80062f2:	4618      	movlt	r0, r3
 80062f4:	e7a6      	b.n	8006244 <_printf_i+0x160>
 80062f6:	2301      	movs	r3, #1
 80062f8:	4632      	mov	r2, r6
 80062fa:	4649      	mov	r1, r9
 80062fc:	4640      	mov	r0, r8
 80062fe:	47d0      	blx	sl
 8006300:	3001      	adds	r0, #1
 8006302:	d09d      	beq.n	8006240 <_printf_i+0x15c>
 8006304:	3501      	adds	r5, #1
 8006306:	68e3      	ldr	r3, [r4, #12]
 8006308:	9903      	ldr	r1, [sp, #12]
 800630a:	1a5b      	subs	r3, r3, r1
 800630c:	42ab      	cmp	r3, r5
 800630e:	dcf2      	bgt.n	80062f6 <_printf_i+0x212>
 8006310:	e7eb      	b.n	80062ea <_printf_i+0x206>
 8006312:	2500      	movs	r5, #0
 8006314:	f104 0619 	add.w	r6, r4, #25
 8006318:	e7f5      	b.n	8006306 <_printf_i+0x222>
 800631a:	bf00      	nop
 800631c:	08009dae 	.word	0x08009dae
 8006320:	08009dbf 	.word	0x08009dbf

08006324 <std>:
 8006324:	2300      	movs	r3, #0
 8006326:	b510      	push	{r4, lr}
 8006328:	4604      	mov	r4, r0
 800632a:	e9c0 3300 	strd	r3, r3, [r0]
 800632e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006332:	6083      	str	r3, [r0, #8]
 8006334:	8181      	strh	r1, [r0, #12]
 8006336:	6643      	str	r3, [r0, #100]	@ 0x64
 8006338:	81c2      	strh	r2, [r0, #14]
 800633a:	6183      	str	r3, [r0, #24]
 800633c:	4619      	mov	r1, r3
 800633e:	2208      	movs	r2, #8
 8006340:	305c      	adds	r0, #92	@ 0x5c
 8006342:	f000 f92e 	bl	80065a2 <memset>
 8006346:	4b0d      	ldr	r3, [pc, #52]	@ (800637c <std+0x58>)
 8006348:	6263      	str	r3, [r4, #36]	@ 0x24
 800634a:	4b0d      	ldr	r3, [pc, #52]	@ (8006380 <std+0x5c>)
 800634c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800634e:	4b0d      	ldr	r3, [pc, #52]	@ (8006384 <std+0x60>)
 8006350:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006352:	4b0d      	ldr	r3, [pc, #52]	@ (8006388 <std+0x64>)
 8006354:	6323      	str	r3, [r4, #48]	@ 0x30
 8006356:	4b0d      	ldr	r3, [pc, #52]	@ (800638c <std+0x68>)
 8006358:	6224      	str	r4, [r4, #32]
 800635a:	429c      	cmp	r4, r3
 800635c:	d006      	beq.n	800636c <std+0x48>
 800635e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006362:	4294      	cmp	r4, r2
 8006364:	d002      	beq.n	800636c <std+0x48>
 8006366:	33d0      	adds	r3, #208	@ 0xd0
 8006368:	429c      	cmp	r4, r3
 800636a:	d105      	bne.n	8006378 <std+0x54>
 800636c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006370:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006374:	f000 b992 	b.w	800669c <__retarget_lock_init_recursive>
 8006378:	bd10      	pop	{r4, pc}
 800637a:	bf00      	nop
 800637c:	080064e9 	.word	0x080064e9
 8006380:	0800650b 	.word	0x0800650b
 8006384:	08006543 	.word	0x08006543
 8006388:	08006567 	.word	0x08006567
 800638c:	20000928 	.word	0x20000928

08006390 <stdio_exit_handler>:
 8006390:	4a02      	ldr	r2, [pc, #8]	@ (800639c <stdio_exit_handler+0xc>)
 8006392:	4903      	ldr	r1, [pc, #12]	@ (80063a0 <stdio_exit_handler+0x10>)
 8006394:	4803      	ldr	r0, [pc, #12]	@ (80063a4 <stdio_exit_handler+0x14>)
 8006396:	f000 b869 	b.w	800646c <_fwalk_sglue>
 800639a:	bf00      	nop
 800639c:	20000020 	.word	0x20000020
 80063a0:	08008015 	.word	0x08008015
 80063a4:	20000030 	.word	0x20000030

080063a8 <cleanup_stdio>:
 80063a8:	6841      	ldr	r1, [r0, #4]
 80063aa:	4b0c      	ldr	r3, [pc, #48]	@ (80063dc <cleanup_stdio+0x34>)
 80063ac:	4299      	cmp	r1, r3
 80063ae:	b510      	push	{r4, lr}
 80063b0:	4604      	mov	r4, r0
 80063b2:	d001      	beq.n	80063b8 <cleanup_stdio+0x10>
 80063b4:	f001 fe2e 	bl	8008014 <_fflush_r>
 80063b8:	68a1      	ldr	r1, [r4, #8]
 80063ba:	4b09      	ldr	r3, [pc, #36]	@ (80063e0 <cleanup_stdio+0x38>)
 80063bc:	4299      	cmp	r1, r3
 80063be:	d002      	beq.n	80063c6 <cleanup_stdio+0x1e>
 80063c0:	4620      	mov	r0, r4
 80063c2:	f001 fe27 	bl	8008014 <_fflush_r>
 80063c6:	68e1      	ldr	r1, [r4, #12]
 80063c8:	4b06      	ldr	r3, [pc, #24]	@ (80063e4 <cleanup_stdio+0x3c>)
 80063ca:	4299      	cmp	r1, r3
 80063cc:	d004      	beq.n	80063d8 <cleanup_stdio+0x30>
 80063ce:	4620      	mov	r0, r4
 80063d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d4:	f001 be1e 	b.w	8008014 <_fflush_r>
 80063d8:	bd10      	pop	{r4, pc}
 80063da:	bf00      	nop
 80063dc:	20000928 	.word	0x20000928
 80063e0:	20000990 	.word	0x20000990
 80063e4:	200009f8 	.word	0x200009f8

080063e8 <global_stdio_init.part.0>:
 80063e8:	b510      	push	{r4, lr}
 80063ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006418 <global_stdio_init.part.0+0x30>)
 80063ec:	4c0b      	ldr	r4, [pc, #44]	@ (800641c <global_stdio_init.part.0+0x34>)
 80063ee:	4a0c      	ldr	r2, [pc, #48]	@ (8006420 <global_stdio_init.part.0+0x38>)
 80063f0:	601a      	str	r2, [r3, #0]
 80063f2:	4620      	mov	r0, r4
 80063f4:	2200      	movs	r2, #0
 80063f6:	2104      	movs	r1, #4
 80063f8:	f7ff ff94 	bl	8006324 <std>
 80063fc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006400:	2201      	movs	r2, #1
 8006402:	2109      	movs	r1, #9
 8006404:	f7ff ff8e 	bl	8006324 <std>
 8006408:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800640c:	2202      	movs	r2, #2
 800640e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006412:	2112      	movs	r1, #18
 8006414:	f7ff bf86 	b.w	8006324 <std>
 8006418:	20000a60 	.word	0x20000a60
 800641c:	20000928 	.word	0x20000928
 8006420:	08006391 	.word	0x08006391

08006424 <__sfp_lock_acquire>:
 8006424:	4801      	ldr	r0, [pc, #4]	@ (800642c <__sfp_lock_acquire+0x8>)
 8006426:	f000 b93a 	b.w	800669e <__retarget_lock_acquire_recursive>
 800642a:	bf00      	nop
 800642c:	20000a69 	.word	0x20000a69

08006430 <__sfp_lock_release>:
 8006430:	4801      	ldr	r0, [pc, #4]	@ (8006438 <__sfp_lock_release+0x8>)
 8006432:	f000 b935 	b.w	80066a0 <__retarget_lock_release_recursive>
 8006436:	bf00      	nop
 8006438:	20000a69 	.word	0x20000a69

0800643c <__sinit>:
 800643c:	b510      	push	{r4, lr}
 800643e:	4604      	mov	r4, r0
 8006440:	f7ff fff0 	bl	8006424 <__sfp_lock_acquire>
 8006444:	6a23      	ldr	r3, [r4, #32]
 8006446:	b11b      	cbz	r3, 8006450 <__sinit+0x14>
 8006448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800644c:	f7ff bff0 	b.w	8006430 <__sfp_lock_release>
 8006450:	4b04      	ldr	r3, [pc, #16]	@ (8006464 <__sinit+0x28>)
 8006452:	6223      	str	r3, [r4, #32]
 8006454:	4b04      	ldr	r3, [pc, #16]	@ (8006468 <__sinit+0x2c>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d1f5      	bne.n	8006448 <__sinit+0xc>
 800645c:	f7ff ffc4 	bl	80063e8 <global_stdio_init.part.0>
 8006460:	e7f2      	b.n	8006448 <__sinit+0xc>
 8006462:	bf00      	nop
 8006464:	080063a9 	.word	0x080063a9
 8006468:	20000a60 	.word	0x20000a60

0800646c <_fwalk_sglue>:
 800646c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006470:	4607      	mov	r7, r0
 8006472:	4688      	mov	r8, r1
 8006474:	4614      	mov	r4, r2
 8006476:	2600      	movs	r6, #0
 8006478:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800647c:	f1b9 0901 	subs.w	r9, r9, #1
 8006480:	d505      	bpl.n	800648e <_fwalk_sglue+0x22>
 8006482:	6824      	ldr	r4, [r4, #0]
 8006484:	2c00      	cmp	r4, #0
 8006486:	d1f7      	bne.n	8006478 <_fwalk_sglue+0xc>
 8006488:	4630      	mov	r0, r6
 800648a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800648e:	89ab      	ldrh	r3, [r5, #12]
 8006490:	2b01      	cmp	r3, #1
 8006492:	d907      	bls.n	80064a4 <_fwalk_sglue+0x38>
 8006494:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006498:	3301      	adds	r3, #1
 800649a:	d003      	beq.n	80064a4 <_fwalk_sglue+0x38>
 800649c:	4629      	mov	r1, r5
 800649e:	4638      	mov	r0, r7
 80064a0:	47c0      	blx	r8
 80064a2:	4306      	orrs	r6, r0
 80064a4:	3568      	adds	r5, #104	@ 0x68
 80064a6:	e7e9      	b.n	800647c <_fwalk_sglue+0x10>

080064a8 <siprintf>:
 80064a8:	b40e      	push	{r1, r2, r3}
 80064aa:	b500      	push	{lr}
 80064ac:	b09c      	sub	sp, #112	@ 0x70
 80064ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80064b0:	9002      	str	r0, [sp, #8]
 80064b2:	9006      	str	r0, [sp, #24]
 80064b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80064b8:	4809      	ldr	r0, [pc, #36]	@ (80064e0 <siprintf+0x38>)
 80064ba:	9107      	str	r1, [sp, #28]
 80064bc:	9104      	str	r1, [sp, #16]
 80064be:	4909      	ldr	r1, [pc, #36]	@ (80064e4 <siprintf+0x3c>)
 80064c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80064c4:	9105      	str	r1, [sp, #20]
 80064c6:	6800      	ldr	r0, [r0, #0]
 80064c8:	9301      	str	r3, [sp, #4]
 80064ca:	a902      	add	r1, sp, #8
 80064cc:	f001 fc22 	bl	8007d14 <_svfiprintf_r>
 80064d0:	9b02      	ldr	r3, [sp, #8]
 80064d2:	2200      	movs	r2, #0
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	b01c      	add	sp, #112	@ 0x70
 80064d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80064dc:	b003      	add	sp, #12
 80064de:	4770      	bx	lr
 80064e0:	2000002c 	.word	0x2000002c
 80064e4:	ffff0208 	.word	0xffff0208

080064e8 <__sread>:
 80064e8:	b510      	push	{r4, lr}
 80064ea:	460c      	mov	r4, r1
 80064ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064f0:	f000 f886 	bl	8006600 <_read_r>
 80064f4:	2800      	cmp	r0, #0
 80064f6:	bfab      	itete	ge
 80064f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064fa:	89a3      	ldrhlt	r3, [r4, #12]
 80064fc:	181b      	addge	r3, r3, r0
 80064fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006502:	bfac      	ite	ge
 8006504:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006506:	81a3      	strhlt	r3, [r4, #12]
 8006508:	bd10      	pop	{r4, pc}

0800650a <__swrite>:
 800650a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800650e:	461f      	mov	r7, r3
 8006510:	898b      	ldrh	r3, [r1, #12]
 8006512:	05db      	lsls	r3, r3, #23
 8006514:	4605      	mov	r5, r0
 8006516:	460c      	mov	r4, r1
 8006518:	4616      	mov	r6, r2
 800651a:	d505      	bpl.n	8006528 <__swrite+0x1e>
 800651c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006520:	2302      	movs	r3, #2
 8006522:	2200      	movs	r2, #0
 8006524:	f000 f85a 	bl	80065dc <_lseek_r>
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800652e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006532:	81a3      	strh	r3, [r4, #12]
 8006534:	4632      	mov	r2, r6
 8006536:	463b      	mov	r3, r7
 8006538:	4628      	mov	r0, r5
 800653a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800653e:	f000 b871 	b.w	8006624 <_write_r>

08006542 <__sseek>:
 8006542:	b510      	push	{r4, lr}
 8006544:	460c      	mov	r4, r1
 8006546:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800654a:	f000 f847 	bl	80065dc <_lseek_r>
 800654e:	1c43      	adds	r3, r0, #1
 8006550:	89a3      	ldrh	r3, [r4, #12]
 8006552:	bf15      	itete	ne
 8006554:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006556:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800655a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800655e:	81a3      	strheq	r3, [r4, #12]
 8006560:	bf18      	it	ne
 8006562:	81a3      	strhne	r3, [r4, #12]
 8006564:	bd10      	pop	{r4, pc}

08006566 <__sclose>:
 8006566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800656a:	f000 b827 	b.w	80065bc <_close_r>

0800656e <memmove>:
 800656e:	4288      	cmp	r0, r1
 8006570:	b510      	push	{r4, lr}
 8006572:	eb01 0402 	add.w	r4, r1, r2
 8006576:	d902      	bls.n	800657e <memmove+0x10>
 8006578:	4284      	cmp	r4, r0
 800657a:	4623      	mov	r3, r4
 800657c:	d807      	bhi.n	800658e <memmove+0x20>
 800657e:	1e43      	subs	r3, r0, #1
 8006580:	42a1      	cmp	r1, r4
 8006582:	d008      	beq.n	8006596 <memmove+0x28>
 8006584:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006588:	f803 2f01 	strb.w	r2, [r3, #1]!
 800658c:	e7f8      	b.n	8006580 <memmove+0x12>
 800658e:	4402      	add	r2, r0
 8006590:	4601      	mov	r1, r0
 8006592:	428a      	cmp	r2, r1
 8006594:	d100      	bne.n	8006598 <memmove+0x2a>
 8006596:	bd10      	pop	{r4, pc}
 8006598:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800659c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065a0:	e7f7      	b.n	8006592 <memmove+0x24>

080065a2 <memset>:
 80065a2:	4402      	add	r2, r0
 80065a4:	4603      	mov	r3, r0
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d100      	bne.n	80065ac <memset+0xa>
 80065aa:	4770      	bx	lr
 80065ac:	f803 1b01 	strb.w	r1, [r3], #1
 80065b0:	e7f9      	b.n	80065a6 <memset+0x4>
	...

080065b4 <_localeconv_r>:
 80065b4:	4800      	ldr	r0, [pc, #0]	@ (80065b8 <_localeconv_r+0x4>)
 80065b6:	4770      	bx	lr
 80065b8:	2000016c 	.word	0x2000016c

080065bc <_close_r>:
 80065bc:	b538      	push	{r3, r4, r5, lr}
 80065be:	4d06      	ldr	r5, [pc, #24]	@ (80065d8 <_close_r+0x1c>)
 80065c0:	2300      	movs	r3, #0
 80065c2:	4604      	mov	r4, r0
 80065c4:	4608      	mov	r0, r1
 80065c6:	602b      	str	r3, [r5, #0]
 80065c8:	f7fb fffa 	bl	80025c0 <_close>
 80065cc:	1c43      	adds	r3, r0, #1
 80065ce:	d102      	bne.n	80065d6 <_close_r+0x1a>
 80065d0:	682b      	ldr	r3, [r5, #0]
 80065d2:	b103      	cbz	r3, 80065d6 <_close_r+0x1a>
 80065d4:	6023      	str	r3, [r4, #0]
 80065d6:	bd38      	pop	{r3, r4, r5, pc}
 80065d8:	20000a64 	.word	0x20000a64

080065dc <_lseek_r>:
 80065dc:	b538      	push	{r3, r4, r5, lr}
 80065de:	4d07      	ldr	r5, [pc, #28]	@ (80065fc <_lseek_r+0x20>)
 80065e0:	4604      	mov	r4, r0
 80065e2:	4608      	mov	r0, r1
 80065e4:	4611      	mov	r1, r2
 80065e6:	2200      	movs	r2, #0
 80065e8:	602a      	str	r2, [r5, #0]
 80065ea:	461a      	mov	r2, r3
 80065ec:	f7fc f80f 	bl	800260e <_lseek>
 80065f0:	1c43      	adds	r3, r0, #1
 80065f2:	d102      	bne.n	80065fa <_lseek_r+0x1e>
 80065f4:	682b      	ldr	r3, [r5, #0]
 80065f6:	b103      	cbz	r3, 80065fa <_lseek_r+0x1e>
 80065f8:	6023      	str	r3, [r4, #0]
 80065fa:	bd38      	pop	{r3, r4, r5, pc}
 80065fc:	20000a64 	.word	0x20000a64

08006600 <_read_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4d07      	ldr	r5, [pc, #28]	@ (8006620 <_read_r+0x20>)
 8006604:	4604      	mov	r4, r0
 8006606:	4608      	mov	r0, r1
 8006608:	4611      	mov	r1, r2
 800660a:	2200      	movs	r2, #0
 800660c:	602a      	str	r2, [r5, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	f7fb ff9d 	bl	800254e <_read>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d102      	bne.n	800661e <_read_r+0x1e>
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	b103      	cbz	r3, 800661e <_read_r+0x1e>
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	20000a64 	.word	0x20000a64

08006624 <_write_r>:
 8006624:	b538      	push	{r3, r4, r5, lr}
 8006626:	4d07      	ldr	r5, [pc, #28]	@ (8006644 <_write_r+0x20>)
 8006628:	4604      	mov	r4, r0
 800662a:	4608      	mov	r0, r1
 800662c:	4611      	mov	r1, r2
 800662e:	2200      	movs	r2, #0
 8006630:	602a      	str	r2, [r5, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	f7fb ffa8 	bl	8002588 <_write>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d102      	bne.n	8006642 <_write_r+0x1e>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b103      	cbz	r3, 8006642 <_write_r+0x1e>
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	20000a64 	.word	0x20000a64

08006648 <__errno>:
 8006648:	4b01      	ldr	r3, [pc, #4]	@ (8006650 <__errno+0x8>)
 800664a:	6818      	ldr	r0, [r3, #0]
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	2000002c 	.word	0x2000002c

08006654 <__libc_init_array>:
 8006654:	b570      	push	{r4, r5, r6, lr}
 8006656:	4d0d      	ldr	r5, [pc, #52]	@ (800668c <__libc_init_array+0x38>)
 8006658:	4c0d      	ldr	r4, [pc, #52]	@ (8006690 <__libc_init_array+0x3c>)
 800665a:	1b64      	subs	r4, r4, r5
 800665c:	10a4      	asrs	r4, r4, #2
 800665e:	2600      	movs	r6, #0
 8006660:	42a6      	cmp	r6, r4
 8006662:	d109      	bne.n	8006678 <__libc_init_array+0x24>
 8006664:	4d0b      	ldr	r5, [pc, #44]	@ (8006694 <__libc_init_array+0x40>)
 8006666:	4c0c      	ldr	r4, [pc, #48]	@ (8006698 <__libc_init_array+0x44>)
 8006668:	f002 ffa8 	bl	80095bc <_init>
 800666c:	1b64      	subs	r4, r4, r5
 800666e:	10a4      	asrs	r4, r4, #2
 8006670:	2600      	movs	r6, #0
 8006672:	42a6      	cmp	r6, r4
 8006674:	d105      	bne.n	8006682 <__libc_init_array+0x2e>
 8006676:	bd70      	pop	{r4, r5, r6, pc}
 8006678:	f855 3b04 	ldr.w	r3, [r5], #4
 800667c:	4798      	blx	r3
 800667e:	3601      	adds	r6, #1
 8006680:	e7ee      	b.n	8006660 <__libc_init_array+0xc>
 8006682:	f855 3b04 	ldr.w	r3, [r5], #4
 8006686:	4798      	blx	r3
 8006688:	3601      	adds	r6, #1
 800668a:	e7f2      	b.n	8006672 <__libc_init_array+0x1e>
 800668c:	0800a148 	.word	0x0800a148
 8006690:	0800a148 	.word	0x0800a148
 8006694:	0800a148 	.word	0x0800a148
 8006698:	0800a14c 	.word	0x0800a14c

0800669c <__retarget_lock_init_recursive>:
 800669c:	4770      	bx	lr

0800669e <__retarget_lock_acquire_recursive>:
 800669e:	4770      	bx	lr

080066a0 <__retarget_lock_release_recursive>:
 80066a0:	4770      	bx	lr

080066a2 <memcpy>:
 80066a2:	440a      	add	r2, r1
 80066a4:	4291      	cmp	r1, r2
 80066a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80066aa:	d100      	bne.n	80066ae <memcpy+0xc>
 80066ac:	4770      	bx	lr
 80066ae:	b510      	push	{r4, lr}
 80066b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066b8:	4291      	cmp	r1, r2
 80066ba:	d1f9      	bne.n	80066b0 <memcpy+0xe>
 80066bc:	bd10      	pop	{r4, pc}

080066be <quorem>:
 80066be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c2:	6903      	ldr	r3, [r0, #16]
 80066c4:	690c      	ldr	r4, [r1, #16]
 80066c6:	42a3      	cmp	r3, r4
 80066c8:	4607      	mov	r7, r0
 80066ca:	db7e      	blt.n	80067ca <quorem+0x10c>
 80066cc:	3c01      	subs	r4, #1
 80066ce:	f101 0814 	add.w	r8, r1, #20
 80066d2:	00a3      	lsls	r3, r4, #2
 80066d4:	f100 0514 	add.w	r5, r0, #20
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80066de:	9301      	str	r3, [sp, #4]
 80066e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80066e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066e8:	3301      	adds	r3, #1
 80066ea:	429a      	cmp	r2, r3
 80066ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80066f4:	d32e      	bcc.n	8006754 <quorem+0x96>
 80066f6:	f04f 0a00 	mov.w	sl, #0
 80066fa:	46c4      	mov	ip, r8
 80066fc:	46ae      	mov	lr, r5
 80066fe:	46d3      	mov	fp, sl
 8006700:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006704:	b298      	uxth	r0, r3
 8006706:	fb06 a000 	mla	r0, r6, r0, sl
 800670a:	0c02      	lsrs	r2, r0, #16
 800670c:	0c1b      	lsrs	r3, r3, #16
 800670e:	fb06 2303 	mla	r3, r6, r3, r2
 8006712:	f8de 2000 	ldr.w	r2, [lr]
 8006716:	b280      	uxth	r0, r0
 8006718:	b292      	uxth	r2, r2
 800671a:	1a12      	subs	r2, r2, r0
 800671c:	445a      	add	r2, fp
 800671e:	f8de 0000 	ldr.w	r0, [lr]
 8006722:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006726:	b29b      	uxth	r3, r3
 8006728:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800672c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006730:	b292      	uxth	r2, r2
 8006732:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006736:	45e1      	cmp	r9, ip
 8006738:	f84e 2b04 	str.w	r2, [lr], #4
 800673c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006740:	d2de      	bcs.n	8006700 <quorem+0x42>
 8006742:	9b00      	ldr	r3, [sp, #0]
 8006744:	58eb      	ldr	r3, [r5, r3]
 8006746:	b92b      	cbnz	r3, 8006754 <quorem+0x96>
 8006748:	9b01      	ldr	r3, [sp, #4]
 800674a:	3b04      	subs	r3, #4
 800674c:	429d      	cmp	r5, r3
 800674e:	461a      	mov	r2, r3
 8006750:	d32f      	bcc.n	80067b2 <quorem+0xf4>
 8006752:	613c      	str	r4, [r7, #16]
 8006754:	4638      	mov	r0, r7
 8006756:	f001 f979 	bl	8007a4c <__mcmp>
 800675a:	2800      	cmp	r0, #0
 800675c:	db25      	blt.n	80067aa <quorem+0xec>
 800675e:	4629      	mov	r1, r5
 8006760:	2000      	movs	r0, #0
 8006762:	f858 2b04 	ldr.w	r2, [r8], #4
 8006766:	f8d1 c000 	ldr.w	ip, [r1]
 800676a:	fa1f fe82 	uxth.w	lr, r2
 800676e:	fa1f f38c 	uxth.w	r3, ip
 8006772:	eba3 030e 	sub.w	r3, r3, lr
 8006776:	4403      	add	r3, r0
 8006778:	0c12      	lsrs	r2, r2, #16
 800677a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800677e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006782:	b29b      	uxth	r3, r3
 8006784:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006788:	45c1      	cmp	r9, r8
 800678a:	f841 3b04 	str.w	r3, [r1], #4
 800678e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006792:	d2e6      	bcs.n	8006762 <quorem+0xa4>
 8006794:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006798:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800679c:	b922      	cbnz	r2, 80067a8 <quorem+0xea>
 800679e:	3b04      	subs	r3, #4
 80067a0:	429d      	cmp	r5, r3
 80067a2:	461a      	mov	r2, r3
 80067a4:	d30b      	bcc.n	80067be <quorem+0x100>
 80067a6:	613c      	str	r4, [r7, #16]
 80067a8:	3601      	adds	r6, #1
 80067aa:	4630      	mov	r0, r6
 80067ac:	b003      	add	sp, #12
 80067ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067b2:	6812      	ldr	r2, [r2, #0]
 80067b4:	3b04      	subs	r3, #4
 80067b6:	2a00      	cmp	r2, #0
 80067b8:	d1cb      	bne.n	8006752 <quorem+0x94>
 80067ba:	3c01      	subs	r4, #1
 80067bc:	e7c6      	b.n	800674c <quorem+0x8e>
 80067be:	6812      	ldr	r2, [r2, #0]
 80067c0:	3b04      	subs	r3, #4
 80067c2:	2a00      	cmp	r2, #0
 80067c4:	d1ef      	bne.n	80067a6 <quorem+0xe8>
 80067c6:	3c01      	subs	r4, #1
 80067c8:	e7ea      	b.n	80067a0 <quorem+0xe2>
 80067ca:	2000      	movs	r0, #0
 80067cc:	e7ee      	b.n	80067ac <quorem+0xee>
	...

080067d0 <_dtoa_r>:
 80067d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067d4:	69c7      	ldr	r7, [r0, #28]
 80067d6:	b099      	sub	sp, #100	@ 0x64
 80067d8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80067dc:	ec55 4b10 	vmov	r4, r5, d0
 80067e0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80067e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80067e4:	4683      	mov	fp, r0
 80067e6:	920e      	str	r2, [sp, #56]	@ 0x38
 80067e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80067ea:	b97f      	cbnz	r7, 800680c <_dtoa_r+0x3c>
 80067ec:	2010      	movs	r0, #16
 80067ee:	f000 fdfd 	bl	80073ec <malloc>
 80067f2:	4602      	mov	r2, r0
 80067f4:	f8cb 001c 	str.w	r0, [fp, #28]
 80067f8:	b920      	cbnz	r0, 8006804 <_dtoa_r+0x34>
 80067fa:	4ba7      	ldr	r3, [pc, #668]	@ (8006a98 <_dtoa_r+0x2c8>)
 80067fc:	21ef      	movs	r1, #239	@ 0xef
 80067fe:	48a7      	ldr	r0, [pc, #668]	@ (8006a9c <_dtoa_r+0x2cc>)
 8006800:	f001 fc40 	bl	8008084 <__assert_func>
 8006804:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006808:	6007      	str	r7, [r0, #0]
 800680a:	60c7      	str	r7, [r0, #12]
 800680c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006810:	6819      	ldr	r1, [r3, #0]
 8006812:	b159      	cbz	r1, 800682c <_dtoa_r+0x5c>
 8006814:	685a      	ldr	r2, [r3, #4]
 8006816:	604a      	str	r2, [r1, #4]
 8006818:	2301      	movs	r3, #1
 800681a:	4093      	lsls	r3, r2
 800681c:	608b      	str	r3, [r1, #8]
 800681e:	4658      	mov	r0, fp
 8006820:	f000 feda 	bl	80075d8 <_Bfree>
 8006824:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]
 800682c:	1e2b      	subs	r3, r5, #0
 800682e:	bfb9      	ittee	lt
 8006830:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006834:	9303      	strlt	r3, [sp, #12]
 8006836:	2300      	movge	r3, #0
 8006838:	6033      	strge	r3, [r6, #0]
 800683a:	9f03      	ldr	r7, [sp, #12]
 800683c:	4b98      	ldr	r3, [pc, #608]	@ (8006aa0 <_dtoa_r+0x2d0>)
 800683e:	bfbc      	itt	lt
 8006840:	2201      	movlt	r2, #1
 8006842:	6032      	strlt	r2, [r6, #0]
 8006844:	43bb      	bics	r3, r7
 8006846:	d112      	bne.n	800686e <_dtoa_r+0x9e>
 8006848:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800684a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800684e:	6013      	str	r3, [r2, #0]
 8006850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006854:	4323      	orrs	r3, r4
 8006856:	f000 854d 	beq.w	80072f4 <_dtoa_r+0xb24>
 800685a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800685c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006ab4 <_dtoa_r+0x2e4>
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 854f 	beq.w	8007304 <_dtoa_r+0xb34>
 8006866:	f10a 0303 	add.w	r3, sl, #3
 800686a:	f000 bd49 	b.w	8007300 <_dtoa_r+0xb30>
 800686e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006872:	2200      	movs	r2, #0
 8006874:	ec51 0b17 	vmov	r0, r1, d7
 8006878:	2300      	movs	r3, #0
 800687a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800687e:	f7fa f92b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006882:	4680      	mov	r8, r0
 8006884:	b158      	cbz	r0, 800689e <_dtoa_r+0xce>
 8006886:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006888:	2301      	movs	r3, #1
 800688a:	6013      	str	r3, [r2, #0]
 800688c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800688e:	b113      	cbz	r3, 8006896 <_dtoa_r+0xc6>
 8006890:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006892:	4b84      	ldr	r3, [pc, #528]	@ (8006aa4 <_dtoa_r+0x2d4>)
 8006894:	6013      	str	r3, [r2, #0]
 8006896:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006ab8 <_dtoa_r+0x2e8>
 800689a:	f000 bd33 	b.w	8007304 <_dtoa_r+0xb34>
 800689e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80068a2:	aa16      	add	r2, sp, #88	@ 0x58
 80068a4:	a917      	add	r1, sp, #92	@ 0x5c
 80068a6:	4658      	mov	r0, fp
 80068a8:	f001 f980 	bl	8007bac <__d2b>
 80068ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80068b0:	4681      	mov	r9, r0
 80068b2:	2e00      	cmp	r6, #0
 80068b4:	d077      	beq.n	80069a6 <_dtoa_r+0x1d6>
 80068b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80068b8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80068bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068c0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80068c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80068c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80068cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80068d0:	4619      	mov	r1, r3
 80068d2:	2200      	movs	r2, #0
 80068d4:	4b74      	ldr	r3, [pc, #464]	@ (8006aa8 <_dtoa_r+0x2d8>)
 80068d6:	f7f9 fcdf 	bl	8000298 <__aeabi_dsub>
 80068da:	a369      	add	r3, pc, #420	@ (adr r3, 8006a80 <_dtoa_r+0x2b0>)
 80068dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068e0:	f7f9 fe92 	bl	8000608 <__aeabi_dmul>
 80068e4:	a368      	add	r3, pc, #416	@ (adr r3, 8006a88 <_dtoa_r+0x2b8>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	f7f9 fcd7 	bl	800029c <__adddf3>
 80068ee:	4604      	mov	r4, r0
 80068f0:	4630      	mov	r0, r6
 80068f2:	460d      	mov	r5, r1
 80068f4:	f7f9 fe1e 	bl	8000534 <__aeabi_i2d>
 80068f8:	a365      	add	r3, pc, #404	@ (adr r3, 8006a90 <_dtoa_r+0x2c0>)
 80068fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068fe:	f7f9 fe83 	bl	8000608 <__aeabi_dmul>
 8006902:	4602      	mov	r2, r0
 8006904:	460b      	mov	r3, r1
 8006906:	4620      	mov	r0, r4
 8006908:	4629      	mov	r1, r5
 800690a:	f7f9 fcc7 	bl	800029c <__adddf3>
 800690e:	4604      	mov	r4, r0
 8006910:	460d      	mov	r5, r1
 8006912:	f7fa f929 	bl	8000b68 <__aeabi_d2iz>
 8006916:	2200      	movs	r2, #0
 8006918:	4607      	mov	r7, r0
 800691a:	2300      	movs	r3, #0
 800691c:	4620      	mov	r0, r4
 800691e:	4629      	mov	r1, r5
 8006920:	f7fa f8e4 	bl	8000aec <__aeabi_dcmplt>
 8006924:	b140      	cbz	r0, 8006938 <_dtoa_r+0x168>
 8006926:	4638      	mov	r0, r7
 8006928:	f7f9 fe04 	bl	8000534 <__aeabi_i2d>
 800692c:	4622      	mov	r2, r4
 800692e:	462b      	mov	r3, r5
 8006930:	f7fa f8d2 	bl	8000ad8 <__aeabi_dcmpeq>
 8006934:	b900      	cbnz	r0, 8006938 <_dtoa_r+0x168>
 8006936:	3f01      	subs	r7, #1
 8006938:	2f16      	cmp	r7, #22
 800693a:	d851      	bhi.n	80069e0 <_dtoa_r+0x210>
 800693c:	4b5b      	ldr	r3, [pc, #364]	@ (8006aac <_dtoa_r+0x2dc>)
 800693e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006946:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800694a:	f7fa f8cf 	bl	8000aec <__aeabi_dcmplt>
 800694e:	2800      	cmp	r0, #0
 8006950:	d048      	beq.n	80069e4 <_dtoa_r+0x214>
 8006952:	3f01      	subs	r7, #1
 8006954:	2300      	movs	r3, #0
 8006956:	9312      	str	r3, [sp, #72]	@ 0x48
 8006958:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800695a:	1b9b      	subs	r3, r3, r6
 800695c:	1e5a      	subs	r2, r3, #1
 800695e:	bf44      	itt	mi
 8006960:	f1c3 0801 	rsbmi	r8, r3, #1
 8006964:	2300      	movmi	r3, #0
 8006966:	9208      	str	r2, [sp, #32]
 8006968:	bf54      	ite	pl
 800696a:	f04f 0800 	movpl.w	r8, #0
 800696e:	9308      	strmi	r3, [sp, #32]
 8006970:	2f00      	cmp	r7, #0
 8006972:	db39      	blt.n	80069e8 <_dtoa_r+0x218>
 8006974:	9b08      	ldr	r3, [sp, #32]
 8006976:	970f      	str	r7, [sp, #60]	@ 0x3c
 8006978:	443b      	add	r3, r7
 800697a:	9308      	str	r3, [sp, #32]
 800697c:	2300      	movs	r3, #0
 800697e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006982:	2b09      	cmp	r3, #9
 8006984:	d864      	bhi.n	8006a50 <_dtoa_r+0x280>
 8006986:	2b05      	cmp	r3, #5
 8006988:	bfc4      	itt	gt
 800698a:	3b04      	subgt	r3, #4
 800698c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800698e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006990:	f1a3 0302 	sub.w	r3, r3, #2
 8006994:	bfcc      	ite	gt
 8006996:	2400      	movgt	r4, #0
 8006998:	2401      	movle	r4, #1
 800699a:	2b03      	cmp	r3, #3
 800699c:	d863      	bhi.n	8006a66 <_dtoa_r+0x296>
 800699e:	e8df f003 	tbb	[pc, r3]
 80069a2:	372a      	.short	0x372a
 80069a4:	5535      	.short	0x5535
 80069a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80069aa:	441e      	add	r6, r3
 80069ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80069b0:	2b20      	cmp	r3, #32
 80069b2:	bfc1      	itttt	gt
 80069b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80069b8:	409f      	lslgt	r7, r3
 80069ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80069be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80069c2:	bfd6      	itet	le
 80069c4:	f1c3 0320 	rsble	r3, r3, #32
 80069c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80069cc:	fa04 f003 	lslle.w	r0, r4, r3
 80069d0:	f7f9 fda0 	bl	8000514 <__aeabi_ui2d>
 80069d4:	2201      	movs	r2, #1
 80069d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80069da:	3e01      	subs	r6, #1
 80069dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80069de:	e777      	b.n	80068d0 <_dtoa_r+0x100>
 80069e0:	2301      	movs	r3, #1
 80069e2:	e7b8      	b.n	8006956 <_dtoa_r+0x186>
 80069e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80069e6:	e7b7      	b.n	8006958 <_dtoa_r+0x188>
 80069e8:	427b      	negs	r3, r7
 80069ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80069ec:	2300      	movs	r3, #0
 80069ee:	eba8 0807 	sub.w	r8, r8, r7
 80069f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80069f4:	e7c4      	b.n	8006980 <_dtoa_r+0x1b0>
 80069f6:	2300      	movs	r3, #0
 80069f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80069fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	dc35      	bgt.n	8006a6c <_dtoa_r+0x29c>
 8006a00:	2301      	movs	r3, #1
 8006a02:	9300      	str	r3, [sp, #0]
 8006a04:	9307      	str	r3, [sp, #28]
 8006a06:	461a      	mov	r2, r3
 8006a08:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a0a:	e00b      	b.n	8006a24 <_dtoa_r+0x254>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e7f3      	b.n	80069f8 <_dtoa_r+0x228>
 8006a10:	2300      	movs	r3, #0
 8006a12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a16:	18fb      	adds	r3, r7, r3
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	9307      	str	r3, [sp, #28]
 8006a20:	bfb8      	it	lt
 8006a22:	2301      	movlt	r3, #1
 8006a24:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006a28:	2100      	movs	r1, #0
 8006a2a:	2204      	movs	r2, #4
 8006a2c:	f102 0514 	add.w	r5, r2, #20
 8006a30:	429d      	cmp	r5, r3
 8006a32:	d91f      	bls.n	8006a74 <_dtoa_r+0x2a4>
 8006a34:	6041      	str	r1, [r0, #4]
 8006a36:	4658      	mov	r0, fp
 8006a38:	f000 fd8e 	bl	8007558 <_Balloc>
 8006a3c:	4682      	mov	sl, r0
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d13c      	bne.n	8006abc <_dtoa_r+0x2ec>
 8006a42:	4b1b      	ldr	r3, [pc, #108]	@ (8006ab0 <_dtoa_r+0x2e0>)
 8006a44:	4602      	mov	r2, r0
 8006a46:	f240 11af 	movw	r1, #431	@ 0x1af
 8006a4a:	e6d8      	b.n	80067fe <_dtoa_r+0x2e>
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e7e0      	b.n	8006a12 <_dtoa_r+0x242>
 8006a50:	2401      	movs	r4, #1
 8006a52:	2300      	movs	r3, #0
 8006a54:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a56:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006a58:	f04f 33ff 	mov.w	r3, #4294967295
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	9307      	str	r3, [sp, #28]
 8006a60:	2200      	movs	r2, #0
 8006a62:	2312      	movs	r3, #18
 8006a64:	e7d0      	b.n	8006a08 <_dtoa_r+0x238>
 8006a66:	2301      	movs	r3, #1
 8006a68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a6a:	e7f5      	b.n	8006a58 <_dtoa_r+0x288>
 8006a6c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a6e:	9300      	str	r3, [sp, #0]
 8006a70:	9307      	str	r3, [sp, #28]
 8006a72:	e7d7      	b.n	8006a24 <_dtoa_r+0x254>
 8006a74:	3101      	adds	r1, #1
 8006a76:	0052      	lsls	r2, r2, #1
 8006a78:	e7d8      	b.n	8006a2c <_dtoa_r+0x25c>
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w
 8006a80:	636f4361 	.word	0x636f4361
 8006a84:	3fd287a7 	.word	0x3fd287a7
 8006a88:	8b60c8b3 	.word	0x8b60c8b3
 8006a8c:	3fc68a28 	.word	0x3fc68a28
 8006a90:	509f79fb 	.word	0x509f79fb
 8006a94:	3fd34413 	.word	0x3fd34413
 8006a98:	08009ddd 	.word	0x08009ddd
 8006a9c:	08009df4 	.word	0x08009df4
 8006aa0:	7ff00000 	.word	0x7ff00000
 8006aa4:	08009dad 	.word	0x08009dad
 8006aa8:	3ff80000 	.word	0x3ff80000
 8006aac:	08009ef0 	.word	0x08009ef0
 8006ab0:	08009e4c 	.word	0x08009e4c
 8006ab4:	08009dd9 	.word	0x08009dd9
 8006ab8:	08009dac 	.word	0x08009dac
 8006abc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ac0:	6018      	str	r0, [r3, #0]
 8006ac2:	9b07      	ldr	r3, [sp, #28]
 8006ac4:	2b0e      	cmp	r3, #14
 8006ac6:	f200 80a4 	bhi.w	8006c12 <_dtoa_r+0x442>
 8006aca:	2c00      	cmp	r4, #0
 8006acc:	f000 80a1 	beq.w	8006c12 <_dtoa_r+0x442>
 8006ad0:	2f00      	cmp	r7, #0
 8006ad2:	dd33      	ble.n	8006b3c <_dtoa_r+0x36c>
 8006ad4:	4bad      	ldr	r3, [pc, #692]	@ (8006d8c <_dtoa_r+0x5bc>)
 8006ad6:	f007 020f 	and.w	r2, r7, #15
 8006ada:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ade:	ed93 7b00 	vldr	d7, [r3]
 8006ae2:	05f8      	lsls	r0, r7, #23
 8006ae4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006ae8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006aec:	d516      	bpl.n	8006b1c <_dtoa_r+0x34c>
 8006aee:	4ba8      	ldr	r3, [pc, #672]	@ (8006d90 <_dtoa_r+0x5c0>)
 8006af0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006af4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006af8:	f7f9 feb0 	bl	800085c <__aeabi_ddiv>
 8006afc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b00:	f004 040f 	and.w	r4, r4, #15
 8006b04:	2603      	movs	r6, #3
 8006b06:	4da2      	ldr	r5, [pc, #648]	@ (8006d90 <_dtoa_r+0x5c0>)
 8006b08:	b954      	cbnz	r4, 8006b20 <_dtoa_r+0x350>
 8006b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b12:	f7f9 fea3 	bl	800085c <__aeabi_ddiv>
 8006b16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b1a:	e028      	b.n	8006b6e <_dtoa_r+0x39e>
 8006b1c:	2602      	movs	r6, #2
 8006b1e:	e7f2      	b.n	8006b06 <_dtoa_r+0x336>
 8006b20:	07e1      	lsls	r1, r4, #31
 8006b22:	d508      	bpl.n	8006b36 <_dtoa_r+0x366>
 8006b24:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b2c:	f7f9 fd6c 	bl	8000608 <__aeabi_dmul>
 8006b30:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006b34:	3601      	adds	r6, #1
 8006b36:	1064      	asrs	r4, r4, #1
 8006b38:	3508      	adds	r5, #8
 8006b3a:	e7e5      	b.n	8006b08 <_dtoa_r+0x338>
 8006b3c:	f000 80d2 	beq.w	8006ce4 <_dtoa_r+0x514>
 8006b40:	427c      	negs	r4, r7
 8006b42:	4b92      	ldr	r3, [pc, #584]	@ (8006d8c <_dtoa_r+0x5bc>)
 8006b44:	4d92      	ldr	r5, [pc, #584]	@ (8006d90 <_dtoa_r+0x5c0>)
 8006b46:	f004 020f 	and.w	r2, r4, #15
 8006b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b52:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006b56:	f7f9 fd57 	bl	8000608 <__aeabi_dmul>
 8006b5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b5e:	1124      	asrs	r4, r4, #4
 8006b60:	2300      	movs	r3, #0
 8006b62:	2602      	movs	r6, #2
 8006b64:	2c00      	cmp	r4, #0
 8006b66:	f040 80b2 	bne.w	8006cce <_dtoa_r+0x4fe>
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1d3      	bne.n	8006b16 <_dtoa_r+0x346>
 8006b6e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b70:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	f000 80b7 	beq.w	8006ce8 <_dtoa_r+0x518>
 8006b7a:	4b86      	ldr	r3, [pc, #536]	@ (8006d94 <_dtoa_r+0x5c4>)
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	4620      	mov	r0, r4
 8006b80:	4629      	mov	r1, r5
 8006b82:	f7f9 ffb3 	bl	8000aec <__aeabi_dcmplt>
 8006b86:	2800      	cmp	r0, #0
 8006b88:	f000 80ae 	beq.w	8006ce8 <_dtoa_r+0x518>
 8006b8c:	9b07      	ldr	r3, [sp, #28]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	f000 80aa 	beq.w	8006ce8 <_dtoa_r+0x518>
 8006b94:	9b00      	ldr	r3, [sp, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	dd37      	ble.n	8006c0a <_dtoa_r+0x43a>
 8006b9a:	1e7b      	subs	r3, r7, #1
 8006b9c:	9304      	str	r3, [sp, #16]
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	4b7d      	ldr	r3, [pc, #500]	@ (8006d98 <_dtoa_r+0x5c8>)
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	f7f9 fd2f 	bl	8000608 <__aeabi_dmul>
 8006baa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bae:	9c00      	ldr	r4, [sp, #0]
 8006bb0:	3601      	adds	r6, #1
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	f7f9 fcbe 	bl	8000534 <__aeabi_i2d>
 8006bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bbc:	f7f9 fd24 	bl	8000608 <__aeabi_dmul>
 8006bc0:	4b76      	ldr	r3, [pc, #472]	@ (8006d9c <_dtoa_r+0x5cc>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f7f9 fb6a 	bl	800029c <__adddf3>
 8006bc8:	4605      	mov	r5, r0
 8006bca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006bce:	2c00      	cmp	r4, #0
 8006bd0:	f040 808d 	bne.w	8006cee <_dtoa_r+0x51e>
 8006bd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bd8:	4b71      	ldr	r3, [pc, #452]	@ (8006da0 <_dtoa_r+0x5d0>)
 8006bda:	2200      	movs	r2, #0
 8006bdc:	f7f9 fb5c 	bl	8000298 <__aeabi_dsub>
 8006be0:	4602      	mov	r2, r0
 8006be2:	460b      	mov	r3, r1
 8006be4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006be8:	462a      	mov	r2, r5
 8006bea:	4633      	mov	r3, r6
 8006bec:	f7f9 ff9c 	bl	8000b28 <__aeabi_dcmpgt>
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	f040 828b 	bne.w	800710c <_dtoa_r+0x93c>
 8006bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bfa:	462a      	mov	r2, r5
 8006bfc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006c00:	f7f9 ff74 	bl	8000aec <__aeabi_dcmplt>
 8006c04:	2800      	cmp	r0, #0
 8006c06:	f040 8128 	bne.w	8006e5a <_dtoa_r+0x68a>
 8006c0a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006c0e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006c12:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f2c0 815a 	blt.w	8006ece <_dtoa_r+0x6fe>
 8006c1a:	2f0e      	cmp	r7, #14
 8006c1c:	f300 8157 	bgt.w	8006ece <_dtoa_r+0x6fe>
 8006c20:	4b5a      	ldr	r3, [pc, #360]	@ (8006d8c <_dtoa_r+0x5bc>)
 8006c22:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006c26:	ed93 7b00 	vldr	d7, [r3]
 8006c2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	ed8d 7b00 	vstr	d7, [sp]
 8006c32:	da03      	bge.n	8006c3c <_dtoa_r+0x46c>
 8006c34:	9b07      	ldr	r3, [sp, #28]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f340 8101 	ble.w	8006e3e <_dtoa_r+0x66e>
 8006c3c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c40:	4656      	mov	r6, sl
 8006c42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c46:	4620      	mov	r0, r4
 8006c48:	4629      	mov	r1, r5
 8006c4a:	f7f9 fe07 	bl	800085c <__aeabi_ddiv>
 8006c4e:	f7f9 ff8b 	bl	8000b68 <__aeabi_d2iz>
 8006c52:	4680      	mov	r8, r0
 8006c54:	f7f9 fc6e 	bl	8000534 <__aeabi_i2d>
 8006c58:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c5c:	f7f9 fcd4 	bl	8000608 <__aeabi_dmul>
 8006c60:	4602      	mov	r2, r0
 8006c62:	460b      	mov	r3, r1
 8006c64:	4620      	mov	r0, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006c6c:	f7f9 fb14 	bl	8000298 <__aeabi_dsub>
 8006c70:	f806 4b01 	strb.w	r4, [r6], #1
 8006c74:	9d07      	ldr	r5, [sp, #28]
 8006c76:	eba6 040a 	sub.w	r4, r6, sl
 8006c7a:	42a5      	cmp	r5, r4
 8006c7c:	4602      	mov	r2, r0
 8006c7e:	460b      	mov	r3, r1
 8006c80:	f040 8117 	bne.w	8006eb2 <_dtoa_r+0x6e2>
 8006c84:	f7f9 fb0a 	bl	800029c <__adddf3>
 8006c88:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c8c:	4604      	mov	r4, r0
 8006c8e:	460d      	mov	r5, r1
 8006c90:	f7f9 ff4a 	bl	8000b28 <__aeabi_dcmpgt>
 8006c94:	2800      	cmp	r0, #0
 8006c96:	f040 80f9 	bne.w	8006e8c <_dtoa_r+0x6bc>
 8006c9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c9e:	4620      	mov	r0, r4
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	f7f9 ff19 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ca6:	b118      	cbz	r0, 8006cb0 <_dtoa_r+0x4e0>
 8006ca8:	f018 0f01 	tst.w	r8, #1
 8006cac:	f040 80ee 	bne.w	8006e8c <_dtoa_r+0x6bc>
 8006cb0:	4649      	mov	r1, r9
 8006cb2:	4658      	mov	r0, fp
 8006cb4:	f000 fc90 	bl	80075d8 <_Bfree>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	7033      	strb	r3, [r6, #0]
 8006cbc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006cbe:	3701      	adds	r7, #1
 8006cc0:	601f      	str	r7, [r3, #0]
 8006cc2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	f000 831d 	beq.w	8007304 <_dtoa_r+0xb34>
 8006cca:	601e      	str	r6, [r3, #0]
 8006ccc:	e31a      	b.n	8007304 <_dtoa_r+0xb34>
 8006cce:	07e2      	lsls	r2, r4, #31
 8006cd0:	d505      	bpl.n	8006cde <_dtoa_r+0x50e>
 8006cd2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006cd6:	f7f9 fc97 	bl	8000608 <__aeabi_dmul>
 8006cda:	3601      	adds	r6, #1
 8006cdc:	2301      	movs	r3, #1
 8006cde:	1064      	asrs	r4, r4, #1
 8006ce0:	3508      	adds	r5, #8
 8006ce2:	e73f      	b.n	8006b64 <_dtoa_r+0x394>
 8006ce4:	2602      	movs	r6, #2
 8006ce6:	e742      	b.n	8006b6e <_dtoa_r+0x39e>
 8006ce8:	9c07      	ldr	r4, [sp, #28]
 8006cea:	9704      	str	r7, [sp, #16]
 8006cec:	e761      	b.n	8006bb2 <_dtoa_r+0x3e2>
 8006cee:	4b27      	ldr	r3, [pc, #156]	@ (8006d8c <_dtoa_r+0x5bc>)
 8006cf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cf2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006cf6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006cfa:	4454      	add	r4, sl
 8006cfc:	2900      	cmp	r1, #0
 8006cfe:	d053      	beq.n	8006da8 <_dtoa_r+0x5d8>
 8006d00:	4928      	ldr	r1, [pc, #160]	@ (8006da4 <_dtoa_r+0x5d4>)
 8006d02:	2000      	movs	r0, #0
 8006d04:	f7f9 fdaa 	bl	800085c <__aeabi_ddiv>
 8006d08:	4633      	mov	r3, r6
 8006d0a:	462a      	mov	r2, r5
 8006d0c:	f7f9 fac4 	bl	8000298 <__aeabi_dsub>
 8006d10:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d14:	4656      	mov	r6, sl
 8006d16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d1a:	f7f9 ff25 	bl	8000b68 <__aeabi_d2iz>
 8006d1e:	4605      	mov	r5, r0
 8006d20:	f7f9 fc08 	bl	8000534 <__aeabi_i2d>
 8006d24:	4602      	mov	r2, r0
 8006d26:	460b      	mov	r3, r1
 8006d28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d2c:	f7f9 fab4 	bl	8000298 <__aeabi_dsub>
 8006d30:	3530      	adds	r5, #48	@ 0x30
 8006d32:	4602      	mov	r2, r0
 8006d34:	460b      	mov	r3, r1
 8006d36:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006d3a:	f806 5b01 	strb.w	r5, [r6], #1
 8006d3e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d42:	f7f9 fed3 	bl	8000aec <__aeabi_dcmplt>
 8006d46:	2800      	cmp	r0, #0
 8006d48:	d171      	bne.n	8006e2e <_dtoa_r+0x65e>
 8006d4a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006d4e:	4911      	ldr	r1, [pc, #68]	@ (8006d94 <_dtoa_r+0x5c4>)
 8006d50:	2000      	movs	r0, #0
 8006d52:	f7f9 faa1 	bl	8000298 <__aeabi_dsub>
 8006d56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006d5a:	f7f9 fec7 	bl	8000aec <__aeabi_dcmplt>
 8006d5e:	2800      	cmp	r0, #0
 8006d60:	f040 8095 	bne.w	8006e8e <_dtoa_r+0x6be>
 8006d64:	42a6      	cmp	r6, r4
 8006d66:	f43f af50 	beq.w	8006c0a <_dtoa_r+0x43a>
 8006d6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006d6e:	4b0a      	ldr	r3, [pc, #40]	@ (8006d98 <_dtoa_r+0x5c8>)
 8006d70:	2200      	movs	r2, #0
 8006d72:	f7f9 fc49 	bl	8000608 <__aeabi_dmul>
 8006d76:	4b08      	ldr	r3, [pc, #32]	@ (8006d98 <_dtoa_r+0x5c8>)
 8006d78:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006d82:	f7f9 fc41 	bl	8000608 <__aeabi_dmul>
 8006d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006d8a:	e7c4      	b.n	8006d16 <_dtoa_r+0x546>
 8006d8c:	08009ef0 	.word	0x08009ef0
 8006d90:	08009ec8 	.word	0x08009ec8
 8006d94:	3ff00000 	.word	0x3ff00000
 8006d98:	40240000 	.word	0x40240000
 8006d9c:	401c0000 	.word	0x401c0000
 8006da0:	40140000 	.word	0x40140000
 8006da4:	3fe00000 	.word	0x3fe00000
 8006da8:	4631      	mov	r1, r6
 8006daa:	4628      	mov	r0, r5
 8006dac:	f7f9 fc2c 	bl	8000608 <__aeabi_dmul>
 8006db0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006db4:	9415      	str	r4, [sp, #84]	@ 0x54
 8006db6:	4656      	mov	r6, sl
 8006db8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dbc:	f7f9 fed4 	bl	8000b68 <__aeabi_d2iz>
 8006dc0:	4605      	mov	r5, r0
 8006dc2:	f7f9 fbb7 	bl	8000534 <__aeabi_i2d>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dce:	f7f9 fa63 	bl	8000298 <__aeabi_dsub>
 8006dd2:	3530      	adds	r5, #48	@ 0x30
 8006dd4:	f806 5b01 	strb.w	r5, [r6], #1
 8006dd8:	4602      	mov	r2, r0
 8006dda:	460b      	mov	r3, r1
 8006ddc:	42a6      	cmp	r6, r4
 8006dde:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006de2:	f04f 0200 	mov.w	r2, #0
 8006de6:	d124      	bne.n	8006e32 <_dtoa_r+0x662>
 8006de8:	4bac      	ldr	r3, [pc, #688]	@ (800709c <_dtoa_r+0x8cc>)
 8006dea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006dee:	f7f9 fa55 	bl	800029c <__adddf3>
 8006df2:	4602      	mov	r2, r0
 8006df4:	460b      	mov	r3, r1
 8006df6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006dfa:	f7f9 fe95 	bl	8000b28 <__aeabi_dcmpgt>
 8006dfe:	2800      	cmp	r0, #0
 8006e00:	d145      	bne.n	8006e8e <_dtoa_r+0x6be>
 8006e02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e06:	49a5      	ldr	r1, [pc, #660]	@ (800709c <_dtoa_r+0x8cc>)
 8006e08:	2000      	movs	r0, #0
 8006e0a:	f7f9 fa45 	bl	8000298 <__aeabi_dsub>
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e16:	f7f9 fe69 	bl	8000aec <__aeabi_dcmplt>
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	f43f aef5 	beq.w	8006c0a <_dtoa_r+0x43a>
 8006e20:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006e22:	1e73      	subs	r3, r6, #1
 8006e24:	9315      	str	r3, [sp, #84]	@ 0x54
 8006e26:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006e2a:	2b30      	cmp	r3, #48	@ 0x30
 8006e2c:	d0f8      	beq.n	8006e20 <_dtoa_r+0x650>
 8006e2e:	9f04      	ldr	r7, [sp, #16]
 8006e30:	e73e      	b.n	8006cb0 <_dtoa_r+0x4e0>
 8006e32:	4b9b      	ldr	r3, [pc, #620]	@ (80070a0 <_dtoa_r+0x8d0>)
 8006e34:	f7f9 fbe8 	bl	8000608 <__aeabi_dmul>
 8006e38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e3c:	e7bc      	b.n	8006db8 <_dtoa_r+0x5e8>
 8006e3e:	d10c      	bne.n	8006e5a <_dtoa_r+0x68a>
 8006e40:	4b98      	ldr	r3, [pc, #608]	@ (80070a4 <_dtoa_r+0x8d4>)
 8006e42:	2200      	movs	r2, #0
 8006e44:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006e48:	f7f9 fbde 	bl	8000608 <__aeabi_dmul>
 8006e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e50:	f7f9 fe60 	bl	8000b14 <__aeabi_dcmpge>
 8006e54:	2800      	cmp	r0, #0
 8006e56:	f000 8157 	beq.w	8007108 <_dtoa_r+0x938>
 8006e5a:	2400      	movs	r4, #0
 8006e5c:	4625      	mov	r5, r4
 8006e5e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006e60:	43db      	mvns	r3, r3
 8006e62:	9304      	str	r3, [sp, #16]
 8006e64:	4656      	mov	r6, sl
 8006e66:	2700      	movs	r7, #0
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4658      	mov	r0, fp
 8006e6c:	f000 fbb4 	bl	80075d8 <_Bfree>
 8006e70:	2d00      	cmp	r5, #0
 8006e72:	d0dc      	beq.n	8006e2e <_dtoa_r+0x65e>
 8006e74:	b12f      	cbz	r7, 8006e82 <_dtoa_r+0x6b2>
 8006e76:	42af      	cmp	r7, r5
 8006e78:	d003      	beq.n	8006e82 <_dtoa_r+0x6b2>
 8006e7a:	4639      	mov	r1, r7
 8006e7c:	4658      	mov	r0, fp
 8006e7e:	f000 fbab 	bl	80075d8 <_Bfree>
 8006e82:	4629      	mov	r1, r5
 8006e84:	4658      	mov	r0, fp
 8006e86:	f000 fba7 	bl	80075d8 <_Bfree>
 8006e8a:	e7d0      	b.n	8006e2e <_dtoa_r+0x65e>
 8006e8c:	9704      	str	r7, [sp, #16]
 8006e8e:	4633      	mov	r3, r6
 8006e90:	461e      	mov	r6, r3
 8006e92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e96:	2a39      	cmp	r2, #57	@ 0x39
 8006e98:	d107      	bne.n	8006eaa <_dtoa_r+0x6da>
 8006e9a:	459a      	cmp	sl, r3
 8006e9c:	d1f8      	bne.n	8006e90 <_dtoa_r+0x6c0>
 8006e9e:	9a04      	ldr	r2, [sp, #16]
 8006ea0:	3201      	adds	r2, #1
 8006ea2:	9204      	str	r2, [sp, #16]
 8006ea4:	2230      	movs	r2, #48	@ 0x30
 8006ea6:	f88a 2000 	strb.w	r2, [sl]
 8006eaa:	781a      	ldrb	r2, [r3, #0]
 8006eac:	3201      	adds	r2, #1
 8006eae:	701a      	strb	r2, [r3, #0]
 8006eb0:	e7bd      	b.n	8006e2e <_dtoa_r+0x65e>
 8006eb2:	4b7b      	ldr	r3, [pc, #492]	@ (80070a0 <_dtoa_r+0x8d0>)
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f7f9 fba7 	bl	8000608 <__aeabi_dmul>
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	4604      	mov	r4, r0
 8006ec0:	460d      	mov	r5, r1
 8006ec2:	f7f9 fe09 	bl	8000ad8 <__aeabi_dcmpeq>
 8006ec6:	2800      	cmp	r0, #0
 8006ec8:	f43f aebb 	beq.w	8006c42 <_dtoa_r+0x472>
 8006ecc:	e6f0      	b.n	8006cb0 <_dtoa_r+0x4e0>
 8006ece:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006ed0:	2a00      	cmp	r2, #0
 8006ed2:	f000 80db 	beq.w	800708c <_dtoa_r+0x8bc>
 8006ed6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ed8:	2a01      	cmp	r2, #1
 8006eda:	f300 80bf 	bgt.w	800705c <_dtoa_r+0x88c>
 8006ede:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006ee0:	2a00      	cmp	r2, #0
 8006ee2:	f000 80b7 	beq.w	8007054 <_dtoa_r+0x884>
 8006ee6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006eea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006eec:	4646      	mov	r6, r8
 8006eee:	9a08      	ldr	r2, [sp, #32]
 8006ef0:	2101      	movs	r1, #1
 8006ef2:	441a      	add	r2, r3
 8006ef4:	4658      	mov	r0, fp
 8006ef6:	4498      	add	r8, r3
 8006ef8:	9208      	str	r2, [sp, #32]
 8006efa:	f000 fc21 	bl	8007740 <__i2b>
 8006efe:	4605      	mov	r5, r0
 8006f00:	b15e      	cbz	r6, 8006f1a <_dtoa_r+0x74a>
 8006f02:	9b08      	ldr	r3, [sp, #32]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	dd08      	ble.n	8006f1a <_dtoa_r+0x74a>
 8006f08:	42b3      	cmp	r3, r6
 8006f0a:	9a08      	ldr	r2, [sp, #32]
 8006f0c:	bfa8      	it	ge
 8006f0e:	4633      	movge	r3, r6
 8006f10:	eba8 0803 	sub.w	r8, r8, r3
 8006f14:	1af6      	subs	r6, r6, r3
 8006f16:	1ad3      	subs	r3, r2, r3
 8006f18:	9308      	str	r3, [sp, #32]
 8006f1a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f1c:	b1f3      	cbz	r3, 8006f5c <_dtoa_r+0x78c>
 8006f1e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	f000 80b7 	beq.w	8007094 <_dtoa_r+0x8c4>
 8006f26:	b18c      	cbz	r4, 8006f4c <_dtoa_r+0x77c>
 8006f28:	4629      	mov	r1, r5
 8006f2a:	4622      	mov	r2, r4
 8006f2c:	4658      	mov	r0, fp
 8006f2e:	f000 fcc7 	bl	80078c0 <__pow5mult>
 8006f32:	464a      	mov	r2, r9
 8006f34:	4601      	mov	r1, r0
 8006f36:	4605      	mov	r5, r0
 8006f38:	4658      	mov	r0, fp
 8006f3a:	f000 fc17 	bl	800776c <__multiply>
 8006f3e:	4649      	mov	r1, r9
 8006f40:	9004      	str	r0, [sp, #16]
 8006f42:	4658      	mov	r0, fp
 8006f44:	f000 fb48 	bl	80075d8 <_Bfree>
 8006f48:	9b04      	ldr	r3, [sp, #16]
 8006f4a:	4699      	mov	r9, r3
 8006f4c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f4e:	1b1a      	subs	r2, r3, r4
 8006f50:	d004      	beq.n	8006f5c <_dtoa_r+0x78c>
 8006f52:	4649      	mov	r1, r9
 8006f54:	4658      	mov	r0, fp
 8006f56:	f000 fcb3 	bl	80078c0 <__pow5mult>
 8006f5a:	4681      	mov	r9, r0
 8006f5c:	2101      	movs	r1, #1
 8006f5e:	4658      	mov	r0, fp
 8006f60:	f000 fbee 	bl	8007740 <__i2b>
 8006f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f66:	4604      	mov	r4, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	f000 81cf 	beq.w	800730c <_dtoa_r+0xb3c>
 8006f6e:	461a      	mov	r2, r3
 8006f70:	4601      	mov	r1, r0
 8006f72:	4658      	mov	r0, fp
 8006f74:	f000 fca4 	bl	80078c0 <__pow5mult>
 8006f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	f300 8095 	bgt.w	80070ac <_dtoa_r+0x8dc>
 8006f82:	9b02      	ldr	r3, [sp, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	f040 8087 	bne.w	8007098 <_dtoa_r+0x8c8>
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	f040 8089 	bne.w	80070a8 <_dtoa_r+0x8d8>
 8006f96:	9b03      	ldr	r3, [sp, #12]
 8006f98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006f9c:	0d1b      	lsrs	r3, r3, #20
 8006f9e:	051b      	lsls	r3, r3, #20
 8006fa0:	b12b      	cbz	r3, 8006fae <_dtoa_r+0x7de>
 8006fa2:	9b08      	ldr	r3, [sp, #32]
 8006fa4:	3301      	adds	r3, #1
 8006fa6:	9308      	str	r3, [sp, #32]
 8006fa8:	f108 0801 	add.w	r8, r8, #1
 8006fac:	2301      	movs	r3, #1
 8006fae:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	f000 81b0 	beq.w	8007318 <_dtoa_r+0xb48>
 8006fb8:	6923      	ldr	r3, [r4, #16]
 8006fba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006fbe:	6918      	ldr	r0, [r3, #16]
 8006fc0:	f000 fb72 	bl	80076a8 <__hi0bits>
 8006fc4:	f1c0 0020 	rsb	r0, r0, #32
 8006fc8:	9b08      	ldr	r3, [sp, #32]
 8006fca:	4418      	add	r0, r3
 8006fcc:	f010 001f 	ands.w	r0, r0, #31
 8006fd0:	d077      	beq.n	80070c2 <_dtoa_r+0x8f2>
 8006fd2:	f1c0 0320 	rsb	r3, r0, #32
 8006fd6:	2b04      	cmp	r3, #4
 8006fd8:	dd6b      	ble.n	80070b2 <_dtoa_r+0x8e2>
 8006fda:	9b08      	ldr	r3, [sp, #32]
 8006fdc:	f1c0 001c 	rsb	r0, r0, #28
 8006fe0:	4403      	add	r3, r0
 8006fe2:	4480      	add	r8, r0
 8006fe4:	4406      	add	r6, r0
 8006fe6:	9308      	str	r3, [sp, #32]
 8006fe8:	f1b8 0f00 	cmp.w	r8, #0
 8006fec:	dd05      	ble.n	8006ffa <_dtoa_r+0x82a>
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4642      	mov	r2, r8
 8006ff2:	4658      	mov	r0, fp
 8006ff4:	f000 fcbe 	bl	8007974 <__lshift>
 8006ff8:	4681      	mov	r9, r0
 8006ffa:	9b08      	ldr	r3, [sp, #32]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	dd05      	ble.n	800700c <_dtoa_r+0x83c>
 8007000:	4621      	mov	r1, r4
 8007002:	461a      	mov	r2, r3
 8007004:	4658      	mov	r0, fp
 8007006:	f000 fcb5 	bl	8007974 <__lshift>
 800700a:	4604      	mov	r4, r0
 800700c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800700e:	2b00      	cmp	r3, #0
 8007010:	d059      	beq.n	80070c6 <_dtoa_r+0x8f6>
 8007012:	4621      	mov	r1, r4
 8007014:	4648      	mov	r0, r9
 8007016:	f000 fd19 	bl	8007a4c <__mcmp>
 800701a:	2800      	cmp	r0, #0
 800701c:	da53      	bge.n	80070c6 <_dtoa_r+0x8f6>
 800701e:	1e7b      	subs	r3, r7, #1
 8007020:	9304      	str	r3, [sp, #16]
 8007022:	4649      	mov	r1, r9
 8007024:	2300      	movs	r3, #0
 8007026:	220a      	movs	r2, #10
 8007028:	4658      	mov	r0, fp
 800702a:	f000 faf7 	bl	800761c <__multadd>
 800702e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007030:	4681      	mov	r9, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	f000 8172 	beq.w	800731c <_dtoa_r+0xb4c>
 8007038:	2300      	movs	r3, #0
 800703a:	4629      	mov	r1, r5
 800703c:	220a      	movs	r2, #10
 800703e:	4658      	mov	r0, fp
 8007040:	f000 faec 	bl	800761c <__multadd>
 8007044:	9b00      	ldr	r3, [sp, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	4605      	mov	r5, r0
 800704a:	dc67      	bgt.n	800711c <_dtoa_r+0x94c>
 800704c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800704e:	2b02      	cmp	r3, #2
 8007050:	dc41      	bgt.n	80070d6 <_dtoa_r+0x906>
 8007052:	e063      	b.n	800711c <_dtoa_r+0x94c>
 8007054:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007056:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800705a:	e746      	b.n	8006eea <_dtoa_r+0x71a>
 800705c:	9b07      	ldr	r3, [sp, #28]
 800705e:	1e5c      	subs	r4, r3, #1
 8007060:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007062:	42a3      	cmp	r3, r4
 8007064:	bfbf      	itttt	lt
 8007066:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007068:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800706a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800706c:	1ae3      	sublt	r3, r4, r3
 800706e:	bfb4      	ite	lt
 8007070:	18d2      	addlt	r2, r2, r3
 8007072:	1b1c      	subge	r4, r3, r4
 8007074:	9b07      	ldr	r3, [sp, #28]
 8007076:	bfbc      	itt	lt
 8007078:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800707a:	2400      	movlt	r4, #0
 800707c:	2b00      	cmp	r3, #0
 800707e:	bfb5      	itete	lt
 8007080:	eba8 0603 	sublt.w	r6, r8, r3
 8007084:	9b07      	ldrge	r3, [sp, #28]
 8007086:	2300      	movlt	r3, #0
 8007088:	4646      	movge	r6, r8
 800708a:	e730      	b.n	8006eee <_dtoa_r+0x71e>
 800708c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800708e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007090:	4646      	mov	r6, r8
 8007092:	e735      	b.n	8006f00 <_dtoa_r+0x730>
 8007094:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007096:	e75c      	b.n	8006f52 <_dtoa_r+0x782>
 8007098:	2300      	movs	r3, #0
 800709a:	e788      	b.n	8006fae <_dtoa_r+0x7de>
 800709c:	3fe00000 	.word	0x3fe00000
 80070a0:	40240000 	.word	0x40240000
 80070a4:	40140000 	.word	0x40140000
 80070a8:	9b02      	ldr	r3, [sp, #8]
 80070aa:	e780      	b.n	8006fae <_dtoa_r+0x7de>
 80070ac:	2300      	movs	r3, #0
 80070ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80070b0:	e782      	b.n	8006fb8 <_dtoa_r+0x7e8>
 80070b2:	d099      	beq.n	8006fe8 <_dtoa_r+0x818>
 80070b4:	9a08      	ldr	r2, [sp, #32]
 80070b6:	331c      	adds	r3, #28
 80070b8:	441a      	add	r2, r3
 80070ba:	4498      	add	r8, r3
 80070bc:	441e      	add	r6, r3
 80070be:	9208      	str	r2, [sp, #32]
 80070c0:	e792      	b.n	8006fe8 <_dtoa_r+0x818>
 80070c2:	4603      	mov	r3, r0
 80070c4:	e7f6      	b.n	80070b4 <_dtoa_r+0x8e4>
 80070c6:	9b07      	ldr	r3, [sp, #28]
 80070c8:	9704      	str	r7, [sp, #16]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	dc20      	bgt.n	8007110 <_dtoa_r+0x940>
 80070ce:	9300      	str	r3, [sp, #0]
 80070d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	dd1e      	ble.n	8007114 <_dtoa_r+0x944>
 80070d6:	9b00      	ldr	r3, [sp, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	f47f aec0 	bne.w	8006e5e <_dtoa_r+0x68e>
 80070de:	4621      	mov	r1, r4
 80070e0:	2205      	movs	r2, #5
 80070e2:	4658      	mov	r0, fp
 80070e4:	f000 fa9a 	bl	800761c <__multadd>
 80070e8:	4601      	mov	r1, r0
 80070ea:	4604      	mov	r4, r0
 80070ec:	4648      	mov	r0, r9
 80070ee:	f000 fcad 	bl	8007a4c <__mcmp>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	f77f aeb3 	ble.w	8006e5e <_dtoa_r+0x68e>
 80070f8:	4656      	mov	r6, sl
 80070fa:	2331      	movs	r3, #49	@ 0x31
 80070fc:	f806 3b01 	strb.w	r3, [r6], #1
 8007100:	9b04      	ldr	r3, [sp, #16]
 8007102:	3301      	adds	r3, #1
 8007104:	9304      	str	r3, [sp, #16]
 8007106:	e6ae      	b.n	8006e66 <_dtoa_r+0x696>
 8007108:	9c07      	ldr	r4, [sp, #28]
 800710a:	9704      	str	r7, [sp, #16]
 800710c:	4625      	mov	r5, r4
 800710e:	e7f3      	b.n	80070f8 <_dtoa_r+0x928>
 8007110:	9b07      	ldr	r3, [sp, #28]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 8104 	beq.w	8007324 <_dtoa_r+0xb54>
 800711c:	2e00      	cmp	r6, #0
 800711e:	dd05      	ble.n	800712c <_dtoa_r+0x95c>
 8007120:	4629      	mov	r1, r5
 8007122:	4632      	mov	r2, r6
 8007124:	4658      	mov	r0, fp
 8007126:	f000 fc25 	bl	8007974 <__lshift>
 800712a:	4605      	mov	r5, r0
 800712c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800712e:	2b00      	cmp	r3, #0
 8007130:	d05a      	beq.n	80071e8 <_dtoa_r+0xa18>
 8007132:	6869      	ldr	r1, [r5, #4]
 8007134:	4658      	mov	r0, fp
 8007136:	f000 fa0f 	bl	8007558 <_Balloc>
 800713a:	4606      	mov	r6, r0
 800713c:	b928      	cbnz	r0, 800714a <_dtoa_r+0x97a>
 800713e:	4b84      	ldr	r3, [pc, #528]	@ (8007350 <_dtoa_r+0xb80>)
 8007140:	4602      	mov	r2, r0
 8007142:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007146:	f7ff bb5a 	b.w	80067fe <_dtoa_r+0x2e>
 800714a:	692a      	ldr	r2, [r5, #16]
 800714c:	3202      	adds	r2, #2
 800714e:	0092      	lsls	r2, r2, #2
 8007150:	f105 010c 	add.w	r1, r5, #12
 8007154:	300c      	adds	r0, #12
 8007156:	f7ff faa4 	bl	80066a2 <memcpy>
 800715a:	2201      	movs	r2, #1
 800715c:	4631      	mov	r1, r6
 800715e:	4658      	mov	r0, fp
 8007160:	f000 fc08 	bl	8007974 <__lshift>
 8007164:	f10a 0301 	add.w	r3, sl, #1
 8007168:	9307      	str	r3, [sp, #28]
 800716a:	9b00      	ldr	r3, [sp, #0]
 800716c:	4453      	add	r3, sl
 800716e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007170:	9b02      	ldr	r3, [sp, #8]
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	462f      	mov	r7, r5
 8007178:	930a      	str	r3, [sp, #40]	@ 0x28
 800717a:	4605      	mov	r5, r0
 800717c:	9b07      	ldr	r3, [sp, #28]
 800717e:	4621      	mov	r1, r4
 8007180:	3b01      	subs	r3, #1
 8007182:	4648      	mov	r0, r9
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	f7ff fa9a 	bl	80066be <quorem>
 800718a:	4639      	mov	r1, r7
 800718c:	9002      	str	r0, [sp, #8]
 800718e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007192:	4648      	mov	r0, r9
 8007194:	f000 fc5a 	bl	8007a4c <__mcmp>
 8007198:	462a      	mov	r2, r5
 800719a:	9008      	str	r0, [sp, #32]
 800719c:	4621      	mov	r1, r4
 800719e:	4658      	mov	r0, fp
 80071a0:	f000 fc70 	bl	8007a84 <__mdiff>
 80071a4:	68c2      	ldr	r2, [r0, #12]
 80071a6:	4606      	mov	r6, r0
 80071a8:	bb02      	cbnz	r2, 80071ec <_dtoa_r+0xa1c>
 80071aa:	4601      	mov	r1, r0
 80071ac:	4648      	mov	r0, r9
 80071ae:	f000 fc4d 	bl	8007a4c <__mcmp>
 80071b2:	4602      	mov	r2, r0
 80071b4:	4631      	mov	r1, r6
 80071b6:	4658      	mov	r0, fp
 80071b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80071ba:	f000 fa0d 	bl	80075d8 <_Bfree>
 80071be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80071c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80071c2:	9e07      	ldr	r6, [sp, #28]
 80071c4:	ea43 0102 	orr.w	r1, r3, r2
 80071c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ca:	4319      	orrs	r1, r3
 80071cc:	d110      	bne.n	80071f0 <_dtoa_r+0xa20>
 80071ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80071d2:	d029      	beq.n	8007228 <_dtoa_r+0xa58>
 80071d4:	9b08      	ldr	r3, [sp, #32]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	dd02      	ble.n	80071e0 <_dtoa_r+0xa10>
 80071da:	9b02      	ldr	r3, [sp, #8]
 80071dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80071e0:	9b00      	ldr	r3, [sp, #0]
 80071e2:	f883 8000 	strb.w	r8, [r3]
 80071e6:	e63f      	b.n	8006e68 <_dtoa_r+0x698>
 80071e8:	4628      	mov	r0, r5
 80071ea:	e7bb      	b.n	8007164 <_dtoa_r+0x994>
 80071ec:	2201      	movs	r2, #1
 80071ee:	e7e1      	b.n	80071b4 <_dtoa_r+0x9e4>
 80071f0:	9b08      	ldr	r3, [sp, #32]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	db04      	blt.n	8007200 <_dtoa_r+0xa30>
 80071f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80071f8:	430b      	orrs	r3, r1
 80071fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80071fc:	430b      	orrs	r3, r1
 80071fe:	d120      	bne.n	8007242 <_dtoa_r+0xa72>
 8007200:	2a00      	cmp	r2, #0
 8007202:	dded      	ble.n	80071e0 <_dtoa_r+0xa10>
 8007204:	4649      	mov	r1, r9
 8007206:	2201      	movs	r2, #1
 8007208:	4658      	mov	r0, fp
 800720a:	f000 fbb3 	bl	8007974 <__lshift>
 800720e:	4621      	mov	r1, r4
 8007210:	4681      	mov	r9, r0
 8007212:	f000 fc1b 	bl	8007a4c <__mcmp>
 8007216:	2800      	cmp	r0, #0
 8007218:	dc03      	bgt.n	8007222 <_dtoa_r+0xa52>
 800721a:	d1e1      	bne.n	80071e0 <_dtoa_r+0xa10>
 800721c:	f018 0f01 	tst.w	r8, #1
 8007220:	d0de      	beq.n	80071e0 <_dtoa_r+0xa10>
 8007222:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007226:	d1d8      	bne.n	80071da <_dtoa_r+0xa0a>
 8007228:	9a00      	ldr	r2, [sp, #0]
 800722a:	2339      	movs	r3, #57	@ 0x39
 800722c:	7013      	strb	r3, [r2, #0]
 800722e:	4633      	mov	r3, r6
 8007230:	461e      	mov	r6, r3
 8007232:	3b01      	subs	r3, #1
 8007234:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007238:	2a39      	cmp	r2, #57	@ 0x39
 800723a:	d052      	beq.n	80072e2 <_dtoa_r+0xb12>
 800723c:	3201      	adds	r2, #1
 800723e:	701a      	strb	r2, [r3, #0]
 8007240:	e612      	b.n	8006e68 <_dtoa_r+0x698>
 8007242:	2a00      	cmp	r2, #0
 8007244:	dd07      	ble.n	8007256 <_dtoa_r+0xa86>
 8007246:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800724a:	d0ed      	beq.n	8007228 <_dtoa_r+0xa58>
 800724c:	9a00      	ldr	r2, [sp, #0]
 800724e:	f108 0301 	add.w	r3, r8, #1
 8007252:	7013      	strb	r3, [r2, #0]
 8007254:	e608      	b.n	8006e68 <_dtoa_r+0x698>
 8007256:	9b07      	ldr	r3, [sp, #28]
 8007258:	9a07      	ldr	r2, [sp, #28]
 800725a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800725e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007260:	4293      	cmp	r3, r2
 8007262:	d028      	beq.n	80072b6 <_dtoa_r+0xae6>
 8007264:	4649      	mov	r1, r9
 8007266:	2300      	movs	r3, #0
 8007268:	220a      	movs	r2, #10
 800726a:	4658      	mov	r0, fp
 800726c:	f000 f9d6 	bl	800761c <__multadd>
 8007270:	42af      	cmp	r7, r5
 8007272:	4681      	mov	r9, r0
 8007274:	f04f 0300 	mov.w	r3, #0
 8007278:	f04f 020a 	mov.w	r2, #10
 800727c:	4639      	mov	r1, r7
 800727e:	4658      	mov	r0, fp
 8007280:	d107      	bne.n	8007292 <_dtoa_r+0xac2>
 8007282:	f000 f9cb 	bl	800761c <__multadd>
 8007286:	4607      	mov	r7, r0
 8007288:	4605      	mov	r5, r0
 800728a:	9b07      	ldr	r3, [sp, #28]
 800728c:	3301      	adds	r3, #1
 800728e:	9307      	str	r3, [sp, #28]
 8007290:	e774      	b.n	800717c <_dtoa_r+0x9ac>
 8007292:	f000 f9c3 	bl	800761c <__multadd>
 8007296:	4629      	mov	r1, r5
 8007298:	4607      	mov	r7, r0
 800729a:	2300      	movs	r3, #0
 800729c:	220a      	movs	r2, #10
 800729e:	4658      	mov	r0, fp
 80072a0:	f000 f9bc 	bl	800761c <__multadd>
 80072a4:	4605      	mov	r5, r0
 80072a6:	e7f0      	b.n	800728a <_dtoa_r+0xaba>
 80072a8:	9b00      	ldr	r3, [sp, #0]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	bfcc      	ite	gt
 80072ae:	461e      	movgt	r6, r3
 80072b0:	2601      	movle	r6, #1
 80072b2:	4456      	add	r6, sl
 80072b4:	2700      	movs	r7, #0
 80072b6:	4649      	mov	r1, r9
 80072b8:	2201      	movs	r2, #1
 80072ba:	4658      	mov	r0, fp
 80072bc:	f000 fb5a 	bl	8007974 <__lshift>
 80072c0:	4621      	mov	r1, r4
 80072c2:	4681      	mov	r9, r0
 80072c4:	f000 fbc2 	bl	8007a4c <__mcmp>
 80072c8:	2800      	cmp	r0, #0
 80072ca:	dcb0      	bgt.n	800722e <_dtoa_r+0xa5e>
 80072cc:	d102      	bne.n	80072d4 <_dtoa_r+0xb04>
 80072ce:	f018 0f01 	tst.w	r8, #1
 80072d2:	d1ac      	bne.n	800722e <_dtoa_r+0xa5e>
 80072d4:	4633      	mov	r3, r6
 80072d6:	461e      	mov	r6, r3
 80072d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80072dc:	2a30      	cmp	r2, #48	@ 0x30
 80072de:	d0fa      	beq.n	80072d6 <_dtoa_r+0xb06>
 80072e0:	e5c2      	b.n	8006e68 <_dtoa_r+0x698>
 80072e2:	459a      	cmp	sl, r3
 80072e4:	d1a4      	bne.n	8007230 <_dtoa_r+0xa60>
 80072e6:	9b04      	ldr	r3, [sp, #16]
 80072e8:	3301      	adds	r3, #1
 80072ea:	9304      	str	r3, [sp, #16]
 80072ec:	2331      	movs	r3, #49	@ 0x31
 80072ee:	f88a 3000 	strb.w	r3, [sl]
 80072f2:	e5b9      	b.n	8006e68 <_dtoa_r+0x698>
 80072f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80072f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007354 <_dtoa_r+0xb84>
 80072fa:	b11b      	cbz	r3, 8007304 <_dtoa_r+0xb34>
 80072fc:	f10a 0308 	add.w	r3, sl, #8
 8007300:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007302:	6013      	str	r3, [r2, #0]
 8007304:	4650      	mov	r0, sl
 8007306:	b019      	add	sp, #100	@ 0x64
 8007308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800730c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730e:	2b01      	cmp	r3, #1
 8007310:	f77f ae37 	ble.w	8006f82 <_dtoa_r+0x7b2>
 8007314:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007316:	930a      	str	r3, [sp, #40]	@ 0x28
 8007318:	2001      	movs	r0, #1
 800731a:	e655      	b.n	8006fc8 <_dtoa_r+0x7f8>
 800731c:	9b00      	ldr	r3, [sp, #0]
 800731e:	2b00      	cmp	r3, #0
 8007320:	f77f aed6 	ble.w	80070d0 <_dtoa_r+0x900>
 8007324:	4656      	mov	r6, sl
 8007326:	4621      	mov	r1, r4
 8007328:	4648      	mov	r0, r9
 800732a:	f7ff f9c8 	bl	80066be <quorem>
 800732e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007332:	f806 8b01 	strb.w	r8, [r6], #1
 8007336:	9b00      	ldr	r3, [sp, #0]
 8007338:	eba6 020a 	sub.w	r2, r6, sl
 800733c:	4293      	cmp	r3, r2
 800733e:	ddb3      	ble.n	80072a8 <_dtoa_r+0xad8>
 8007340:	4649      	mov	r1, r9
 8007342:	2300      	movs	r3, #0
 8007344:	220a      	movs	r2, #10
 8007346:	4658      	mov	r0, fp
 8007348:	f000 f968 	bl	800761c <__multadd>
 800734c:	4681      	mov	r9, r0
 800734e:	e7ea      	b.n	8007326 <_dtoa_r+0xb56>
 8007350:	08009e4c 	.word	0x08009e4c
 8007354:	08009dd0 	.word	0x08009dd0

08007358 <_free_r>:
 8007358:	b538      	push	{r3, r4, r5, lr}
 800735a:	4605      	mov	r5, r0
 800735c:	2900      	cmp	r1, #0
 800735e:	d041      	beq.n	80073e4 <_free_r+0x8c>
 8007360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007364:	1f0c      	subs	r4, r1, #4
 8007366:	2b00      	cmp	r3, #0
 8007368:	bfb8      	it	lt
 800736a:	18e4      	addlt	r4, r4, r3
 800736c:	f000 f8e8 	bl	8007540 <__malloc_lock>
 8007370:	4a1d      	ldr	r2, [pc, #116]	@ (80073e8 <_free_r+0x90>)
 8007372:	6813      	ldr	r3, [r2, #0]
 8007374:	b933      	cbnz	r3, 8007384 <_free_r+0x2c>
 8007376:	6063      	str	r3, [r4, #4]
 8007378:	6014      	str	r4, [r2, #0]
 800737a:	4628      	mov	r0, r5
 800737c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007380:	f000 b8e4 	b.w	800754c <__malloc_unlock>
 8007384:	42a3      	cmp	r3, r4
 8007386:	d908      	bls.n	800739a <_free_r+0x42>
 8007388:	6820      	ldr	r0, [r4, #0]
 800738a:	1821      	adds	r1, r4, r0
 800738c:	428b      	cmp	r3, r1
 800738e:	bf01      	itttt	eq
 8007390:	6819      	ldreq	r1, [r3, #0]
 8007392:	685b      	ldreq	r3, [r3, #4]
 8007394:	1809      	addeq	r1, r1, r0
 8007396:	6021      	streq	r1, [r4, #0]
 8007398:	e7ed      	b.n	8007376 <_free_r+0x1e>
 800739a:	461a      	mov	r2, r3
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	b10b      	cbz	r3, 80073a4 <_free_r+0x4c>
 80073a0:	42a3      	cmp	r3, r4
 80073a2:	d9fa      	bls.n	800739a <_free_r+0x42>
 80073a4:	6811      	ldr	r1, [r2, #0]
 80073a6:	1850      	adds	r0, r2, r1
 80073a8:	42a0      	cmp	r0, r4
 80073aa:	d10b      	bne.n	80073c4 <_free_r+0x6c>
 80073ac:	6820      	ldr	r0, [r4, #0]
 80073ae:	4401      	add	r1, r0
 80073b0:	1850      	adds	r0, r2, r1
 80073b2:	4283      	cmp	r3, r0
 80073b4:	6011      	str	r1, [r2, #0]
 80073b6:	d1e0      	bne.n	800737a <_free_r+0x22>
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	6053      	str	r3, [r2, #4]
 80073be:	4408      	add	r0, r1
 80073c0:	6010      	str	r0, [r2, #0]
 80073c2:	e7da      	b.n	800737a <_free_r+0x22>
 80073c4:	d902      	bls.n	80073cc <_free_r+0x74>
 80073c6:	230c      	movs	r3, #12
 80073c8:	602b      	str	r3, [r5, #0]
 80073ca:	e7d6      	b.n	800737a <_free_r+0x22>
 80073cc:	6820      	ldr	r0, [r4, #0]
 80073ce:	1821      	adds	r1, r4, r0
 80073d0:	428b      	cmp	r3, r1
 80073d2:	bf04      	itt	eq
 80073d4:	6819      	ldreq	r1, [r3, #0]
 80073d6:	685b      	ldreq	r3, [r3, #4]
 80073d8:	6063      	str	r3, [r4, #4]
 80073da:	bf04      	itt	eq
 80073dc:	1809      	addeq	r1, r1, r0
 80073de:	6021      	streq	r1, [r4, #0]
 80073e0:	6054      	str	r4, [r2, #4]
 80073e2:	e7ca      	b.n	800737a <_free_r+0x22>
 80073e4:	bd38      	pop	{r3, r4, r5, pc}
 80073e6:	bf00      	nop
 80073e8:	20000a70 	.word	0x20000a70

080073ec <malloc>:
 80073ec:	4b02      	ldr	r3, [pc, #8]	@ (80073f8 <malloc+0xc>)
 80073ee:	4601      	mov	r1, r0
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	f000 b825 	b.w	8007440 <_malloc_r>
 80073f6:	bf00      	nop
 80073f8:	2000002c 	.word	0x2000002c

080073fc <sbrk_aligned>:
 80073fc:	b570      	push	{r4, r5, r6, lr}
 80073fe:	4e0f      	ldr	r6, [pc, #60]	@ (800743c <sbrk_aligned+0x40>)
 8007400:	460c      	mov	r4, r1
 8007402:	6831      	ldr	r1, [r6, #0]
 8007404:	4605      	mov	r5, r0
 8007406:	b911      	cbnz	r1, 800740e <sbrk_aligned+0x12>
 8007408:	f000 fe2c 	bl	8008064 <_sbrk_r>
 800740c:	6030      	str	r0, [r6, #0]
 800740e:	4621      	mov	r1, r4
 8007410:	4628      	mov	r0, r5
 8007412:	f000 fe27 	bl	8008064 <_sbrk_r>
 8007416:	1c43      	adds	r3, r0, #1
 8007418:	d103      	bne.n	8007422 <sbrk_aligned+0x26>
 800741a:	f04f 34ff 	mov.w	r4, #4294967295
 800741e:	4620      	mov	r0, r4
 8007420:	bd70      	pop	{r4, r5, r6, pc}
 8007422:	1cc4      	adds	r4, r0, #3
 8007424:	f024 0403 	bic.w	r4, r4, #3
 8007428:	42a0      	cmp	r0, r4
 800742a:	d0f8      	beq.n	800741e <sbrk_aligned+0x22>
 800742c:	1a21      	subs	r1, r4, r0
 800742e:	4628      	mov	r0, r5
 8007430:	f000 fe18 	bl	8008064 <_sbrk_r>
 8007434:	3001      	adds	r0, #1
 8007436:	d1f2      	bne.n	800741e <sbrk_aligned+0x22>
 8007438:	e7ef      	b.n	800741a <sbrk_aligned+0x1e>
 800743a:	bf00      	nop
 800743c:	20000a6c 	.word	0x20000a6c

08007440 <_malloc_r>:
 8007440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007444:	1ccd      	adds	r5, r1, #3
 8007446:	f025 0503 	bic.w	r5, r5, #3
 800744a:	3508      	adds	r5, #8
 800744c:	2d0c      	cmp	r5, #12
 800744e:	bf38      	it	cc
 8007450:	250c      	movcc	r5, #12
 8007452:	2d00      	cmp	r5, #0
 8007454:	4606      	mov	r6, r0
 8007456:	db01      	blt.n	800745c <_malloc_r+0x1c>
 8007458:	42a9      	cmp	r1, r5
 800745a:	d904      	bls.n	8007466 <_malloc_r+0x26>
 800745c:	230c      	movs	r3, #12
 800745e:	6033      	str	r3, [r6, #0]
 8007460:	2000      	movs	r0, #0
 8007462:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007466:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800753c <_malloc_r+0xfc>
 800746a:	f000 f869 	bl	8007540 <__malloc_lock>
 800746e:	f8d8 3000 	ldr.w	r3, [r8]
 8007472:	461c      	mov	r4, r3
 8007474:	bb44      	cbnz	r4, 80074c8 <_malloc_r+0x88>
 8007476:	4629      	mov	r1, r5
 8007478:	4630      	mov	r0, r6
 800747a:	f7ff ffbf 	bl	80073fc <sbrk_aligned>
 800747e:	1c43      	adds	r3, r0, #1
 8007480:	4604      	mov	r4, r0
 8007482:	d158      	bne.n	8007536 <_malloc_r+0xf6>
 8007484:	f8d8 4000 	ldr.w	r4, [r8]
 8007488:	4627      	mov	r7, r4
 800748a:	2f00      	cmp	r7, #0
 800748c:	d143      	bne.n	8007516 <_malloc_r+0xd6>
 800748e:	2c00      	cmp	r4, #0
 8007490:	d04b      	beq.n	800752a <_malloc_r+0xea>
 8007492:	6823      	ldr	r3, [r4, #0]
 8007494:	4639      	mov	r1, r7
 8007496:	4630      	mov	r0, r6
 8007498:	eb04 0903 	add.w	r9, r4, r3
 800749c:	f000 fde2 	bl	8008064 <_sbrk_r>
 80074a0:	4581      	cmp	r9, r0
 80074a2:	d142      	bne.n	800752a <_malloc_r+0xea>
 80074a4:	6821      	ldr	r1, [r4, #0]
 80074a6:	1a6d      	subs	r5, r5, r1
 80074a8:	4629      	mov	r1, r5
 80074aa:	4630      	mov	r0, r6
 80074ac:	f7ff ffa6 	bl	80073fc <sbrk_aligned>
 80074b0:	3001      	adds	r0, #1
 80074b2:	d03a      	beq.n	800752a <_malloc_r+0xea>
 80074b4:	6823      	ldr	r3, [r4, #0]
 80074b6:	442b      	add	r3, r5
 80074b8:	6023      	str	r3, [r4, #0]
 80074ba:	f8d8 3000 	ldr.w	r3, [r8]
 80074be:	685a      	ldr	r2, [r3, #4]
 80074c0:	bb62      	cbnz	r2, 800751c <_malloc_r+0xdc>
 80074c2:	f8c8 7000 	str.w	r7, [r8]
 80074c6:	e00f      	b.n	80074e8 <_malloc_r+0xa8>
 80074c8:	6822      	ldr	r2, [r4, #0]
 80074ca:	1b52      	subs	r2, r2, r5
 80074cc:	d420      	bmi.n	8007510 <_malloc_r+0xd0>
 80074ce:	2a0b      	cmp	r2, #11
 80074d0:	d917      	bls.n	8007502 <_malloc_r+0xc2>
 80074d2:	1961      	adds	r1, r4, r5
 80074d4:	42a3      	cmp	r3, r4
 80074d6:	6025      	str	r5, [r4, #0]
 80074d8:	bf18      	it	ne
 80074da:	6059      	strne	r1, [r3, #4]
 80074dc:	6863      	ldr	r3, [r4, #4]
 80074de:	bf08      	it	eq
 80074e0:	f8c8 1000 	streq.w	r1, [r8]
 80074e4:	5162      	str	r2, [r4, r5]
 80074e6:	604b      	str	r3, [r1, #4]
 80074e8:	4630      	mov	r0, r6
 80074ea:	f000 f82f 	bl	800754c <__malloc_unlock>
 80074ee:	f104 000b 	add.w	r0, r4, #11
 80074f2:	1d23      	adds	r3, r4, #4
 80074f4:	f020 0007 	bic.w	r0, r0, #7
 80074f8:	1ac2      	subs	r2, r0, r3
 80074fa:	bf1c      	itt	ne
 80074fc:	1a1b      	subne	r3, r3, r0
 80074fe:	50a3      	strne	r3, [r4, r2]
 8007500:	e7af      	b.n	8007462 <_malloc_r+0x22>
 8007502:	6862      	ldr	r2, [r4, #4]
 8007504:	42a3      	cmp	r3, r4
 8007506:	bf0c      	ite	eq
 8007508:	f8c8 2000 	streq.w	r2, [r8]
 800750c:	605a      	strne	r2, [r3, #4]
 800750e:	e7eb      	b.n	80074e8 <_malloc_r+0xa8>
 8007510:	4623      	mov	r3, r4
 8007512:	6864      	ldr	r4, [r4, #4]
 8007514:	e7ae      	b.n	8007474 <_malloc_r+0x34>
 8007516:	463c      	mov	r4, r7
 8007518:	687f      	ldr	r7, [r7, #4]
 800751a:	e7b6      	b.n	800748a <_malloc_r+0x4a>
 800751c:	461a      	mov	r2, r3
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	42a3      	cmp	r3, r4
 8007522:	d1fb      	bne.n	800751c <_malloc_r+0xdc>
 8007524:	2300      	movs	r3, #0
 8007526:	6053      	str	r3, [r2, #4]
 8007528:	e7de      	b.n	80074e8 <_malloc_r+0xa8>
 800752a:	230c      	movs	r3, #12
 800752c:	6033      	str	r3, [r6, #0]
 800752e:	4630      	mov	r0, r6
 8007530:	f000 f80c 	bl	800754c <__malloc_unlock>
 8007534:	e794      	b.n	8007460 <_malloc_r+0x20>
 8007536:	6005      	str	r5, [r0, #0]
 8007538:	e7d6      	b.n	80074e8 <_malloc_r+0xa8>
 800753a:	bf00      	nop
 800753c:	20000a70 	.word	0x20000a70

08007540 <__malloc_lock>:
 8007540:	4801      	ldr	r0, [pc, #4]	@ (8007548 <__malloc_lock+0x8>)
 8007542:	f7ff b8ac 	b.w	800669e <__retarget_lock_acquire_recursive>
 8007546:	bf00      	nop
 8007548:	20000a68 	.word	0x20000a68

0800754c <__malloc_unlock>:
 800754c:	4801      	ldr	r0, [pc, #4]	@ (8007554 <__malloc_unlock+0x8>)
 800754e:	f7ff b8a7 	b.w	80066a0 <__retarget_lock_release_recursive>
 8007552:	bf00      	nop
 8007554:	20000a68 	.word	0x20000a68

08007558 <_Balloc>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	69c6      	ldr	r6, [r0, #28]
 800755c:	4604      	mov	r4, r0
 800755e:	460d      	mov	r5, r1
 8007560:	b976      	cbnz	r6, 8007580 <_Balloc+0x28>
 8007562:	2010      	movs	r0, #16
 8007564:	f7ff ff42 	bl	80073ec <malloc>
 8007568:	4602      	mov	r2, r0
 800756a:	61e0      	str	r0, [r4, #28]
 800756c:	b920      	cbnz	r0, 8007578 <_Balloc+0x20>
 800756e:	4b18      	ldr	r3, [pc, #96]	@ (80075d0 <_Balloc+0x78>)
 8007570:	4818      	ldr	r0, [pc, #96]	@ (80075d4 <_Balloc+0x7c>)
 8007572:	216b      	movs	r1, #107	@ 0x6b
 8007574:	f000 fd86 	bl	8008084 <__assert_func>
 8007578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800757c:	6006      	str	r6, [r0, #0]
 800757e:	60c6      	str	r6, [r0, #12]
 8007580:	69e6      	ldr	r6, [r4, #28]
 8007582:	68f3      	ldr	r3, [r6, #12]
 8007584:	b183      	cbz	r3, 80075a8 <_Balloc+0x50>
 8007586:	69e3      	ldr	r3, [r4, #28]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800758e:	b9b8      	cbnz	r0, 80075c0 <_Balloc+0x68>
 8007590:	2101      	movs	r1, #1
 8007592:	fa01 f605 	lsl.w	r6, r1, r5
 8007596:	1d72      	adds	r2, r6, #5
 8007598:	0092      	lsls	r2, r2, #2
 800759a:	4620      	mov	r0, r4
 800759c:	f000 fd90 	bl	80080c0 <_calloc_r>
 80075a0:	b160      	cbz	r0, 80075bc <_Balloc+0x64>
 80075a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80075a6:	e00e      	b.n	80075c6 <_Balloc+0x6e>
 80075a8:	2221      	movs	r2, #33	@ 0x21
 80075aa:	2104      	movs	r1, #4
 80075ac:	4620      	mov	r0, r4
 80075ae:	f000 fd87 	bl	80080c0 <_calloc_r>
 80075b2:	69e3      	ldr	r3, [r4, #28]
 80075b4:	60f0      	str	r0, [r6, #12]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d1e4      	bne.n	8007586 <_Balloc+0x2e>
 80075bc:	2000      	movs	r0, #0
 80075be:	bd70      	pop	{r4, r5, r6, pc}
 80075c0:	6802      	ldr	r2, [r0, #0]
 80075c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80075c6:	2300      	movs	r3, #0
 80075c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80075cc:	e7f7      	b.n	80075be <_Balloc+0x66>
 80075ce:	bf00      	nop
 80075d0:	08009ddd 	.word	0x08009ddd
 80075d4:	08009e5d 	.word	0x08009e5d

080075d8 <_Bfree>:
 80075d8:	b570      	push	{r4, r5, r6, lr}
 80075da:	69c6      	ldr	r6, [r0, #28]
 80075dc:	4605      	mov	r5, r0
 80075de:	460c      	mov	r4, r1
 80075e0:	b976      	cbnz	r6, 8007600 <_Bfree+0x28>
 80075e2:	2010      	movs	r0, #16
 80075e4:	f7ff ff02 	bl	80073ec <malloc>
 80075e8:	4602      	mov	r2, r0
 80075ea:	61e8      	str	r0, [r5, #28]
 80075ec:	b920      	cbnz	r0, 80075f8 <_Bfree+0x20>
 80075ee:	4b09      	ldr	r3, [pc, #36]	@ (8007614 <_Bfree+0x3c>)
 80075f0:	4809      	ldr	r0, [pc, #36]	@ (8007618 <_Bfree+0x40>)
 80075f2:	218f      	movs	r1, #143	@ 0x8f
 80075f4:	f000 fd46 	bl	8008084 <__assert_func>
 80075f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80075fc:	6006      	str	r6, [r0, #0]
 80075fe:	60c6      	str	r6, [r0, #12]
 8007600:	b13c      	cbz	r4, 8007612 <_Bfree+0x3a>
 8007602:	69eb      	ldr	r3, [r5, #28]
 8007604:	6862      	ldr	r2, [r4, #4]
 8007606:	68db      	ldr	r3, [r3, #12]
 8007608:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800760c:	6021      	str	r1, [r4, #0]
 800760e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	08009ddd 	.word	0x08009ddd
 8007618:	08009e5d 	.word	0x08009e5d

0800761c <__multadd>:
 800761c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007620:	690d      	ldr	r5, [r1, #16]
 8007622:	4607      	mov	r7, r0
 8007624:	460c      	mov	r4, r1
 8007626:	461e      	mov	r6, r3
 8007628:	f101 0c14 	add.w	ip, r1, #20
 800762c:	2000      	movs	r0, #0
 800762e:	f8dc 3000 	ldr.w	r3, [ip]
 8007632:	b299      	uxth	r1, r3
 8007634:	fb02 6101 	mla	r1, r2, r1, r6
 8007638:	0c1e      	lsrs	r6, r3, #16
 800763a:	0c0b      	lsrs	r3, r1, #16
 800763c:	fb02 3306 	mla	r3, r2, r6, r3
 8007640:	b289      	uxth	r1, r1
 8007642:	3001      	adds	r0, #1
 8007644:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007648:	4285      	cmp	r5, r0
 800764a:	f84c 1b04 	str.w	r1, [ip], #4
 800764e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007652:	dcec      	bgt.n	800762e <__multadd+0x12>
 8007654:	b30e      	cbz	r6, 800769a <__multadd+0x7e>
 8007656:	68a3      	ldr	r3, [r4, #8]
 8007658:	42ab      	cmp	r3, r5
 800765a:	dc19      	bgt.n	8007690 <__multadd+0x74>
 800765c:	6861      	ldr	r1, [r4, #4]
 800765e:	4638      	mov	r0, r7
 8007660:	3101      	adds	r1, #1
 8007662:	f7ff ff79 	bl	8007558 <_Balloc>
 8007666:	4680      	mov	r8, r0
 8007668:	b928      	cbnz	r0, 8007676 <__multadd+0x5a>
 800766a:	4602      	mov	r2, r0
 800766c:	4b0c      	ldr	r3, [pc, #48]	@ (80076a0 <__multadd+0x84>)
 800766e:	480d      	ldr	r0, [pc, #52]	@ (80076a4 <__multadd+0x88>)
 8007670:	21ba      	movs	r1, #186	@ 0xba
 8007672:	f000 fd07 	bl	8008084 <__assert_func>
 8007676:	6922      	ldr	r2, [r4, #16]
 8007678:	3202      	adds	r2, #2
 800767a:	f104 010c 	add.w	r1, r4, #12
 800767e:	0092      	lsls	r2, r2, #2
 8007680:	300c      	adds	r0, #12
 8007682:	f7ff f80e 	bl	80066a2 <memcpy>
 8007686:	4621      	mov	r1, r4
 8007688:	4638      	mov	r0, r7
 800768a:	f7ff ffa5 	bl	80075d8 <_Bfree>
 800768e:	4644      	mov	r4, r8
 8007690:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007694:	3501      	adds	r5, #1
 8007696:	615e      	str	r6, [r3, #20]
 8007698:	6125      	str	r5, [r4, #16]
 800769a:	4620      	mov	r0, r4
 800769c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076a0:	08009e4c 	.word	0x08009e4c
 80076a4:	08009e5d 	.word	0x08009e5d

080076a8 <__hi0bits>:
 80076a8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80076ac:	4603      	mov	r3, r0
 80076ae:	bf36      	itet	cc
 80076b0:	0403      	lslcc	r3, r0, #16
 80076b2:	2000      	movcs	r0, #0
 80076b4:	2010      	movcc	r0, #16
 80076b6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80076ba:	bf3c      	itt	cc
 80076bc:	021b      	lslcc	r3, r3, #8
 80076be:	3008      	addcc	r0, #8
 80076c0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80076c4:	bf3c      	itt	cc
 80076c6:	011b      	lslcc	r3, r3, #4
 80076c8:	3004      	addcc	r0, #4
 80076ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ce:	bf3c      	itt	cc
 80076d0:	009b      	lslcc	r3, r3, #2
 80076d2:	3002      	addcc	r0, #2
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	db05      	blt.n	80076e4 <__hi0bits+0x3c>
 80076d8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80076dc:	f100 0001 	add.w	r0, r0, #1
 80076e0:	bf08      	it	eq
 80076e2:	2020      	moveq	r0, #32
 80076e4:	4770      	bx	lr

080076e6 <__lo0bits>:
 80076e6:	6803      	ldr	r3, [r0, #0]
 80076e8:	4602      	mov	r2, r0
 80076ea:	f013 0007 	ands.w	r0, r3, #7
 80076ee:	d00b      	beq.n	8007708 <__lo0bits+0x22>
 80076f0:	07d9      	lsls	r1, r3, #31
 80076f2:	d421      	bmi.n	8007738 <__lo0bits+0x52>
 80076f4:	0798      	lsls	r0, r3, #30
 80076f6:	bf49      	itett	mi
 80076f8:	085b      	lsrmi	r3, r3, #1
 80076fa:	089b      	lsrpl	r3, r3, #2
 80076fc:	2001      	movmi	r0, #1
 80076fe:	6013      	strmi	r3, [r2, #0]
 8007700:	bf5c      	itt	pl
 8007702:	6013      	strpl	r3, [r2, #0]
 8007704:	2002      	movpl	r0, #2
 8007706:	4770      	bx	lr
 8007708:	b299      	uxth	r1, r3
 800770a:	b909      	cbnz	r1, 8007710 <__lo0bits+0x2a>
 800770c:	0c1b      	lsrs	r3, r3, #16
 800770e:	2010      	movs	r0, #16
 8007710:	b2d9      	uxtb	r1, r3
 8007712:	b909      	cbnz	r1, 8007718 <__lo0bits+0x32>
 8007714:	3008      	adds	r0, #8
 8007716:	0a1b      	lsrs	r3, r3, #8
 8007718:	0719      	lsls	r1, r3, #28
 800771a:	bf04      	itt	eq
 800771c:	091b      	lsreq	r3, r3, #4
 800771e:	3004      	addeq	r0, #4
 8007720:	0799      	lsls	r1, r3, #30
 8007722:	bf04      	itt	eq
 8007724:	089b      	lsreq	r3, r3, #2
 8007726:	3002      	addeq	r0, #2
 8007728:	07d9      	lsls	r1, r3, #31
 800772a:	d403      	bmi.n	8007734 <__lo0bits+0x4e>
 800772c:	085b      	lsrs	r3, r3, #1
 800772e:	f100 0001 	add.w	r0, r0, #1
 8007732:	d003      	beq.n	800773c <__lo0bits+0x56>
 8007734:	6013      	str	r3, [r2, #0]
 8007736:	4770      	bx	lr
 8007738:	2000      	movs	r0, #0
 800773a:	4770      	bx	lr
 800773c:	2020      	movs	r0, #32
 800773e:	4770      	bx	lr

08007740 <__i2b>:
 8007740:	b510      	push	{r4, lr}
 8007742:	460c      	mov	r4, r1
 8007744:	2101      	movs	r1, #1
 8007746:	f7ff ff07 	bl	8007558 <_Balloc>
 800774a:	4602      	mov	r2, r0
 800774c:	b928      	cbnz	r0, 800775a <__i2b+0x1a>
 800774e:	4b05      	ldr	r3, [pc, #20]	@ (8007764 <__i2b+0x24>)
 8007750:	4805      	ldr	r0, [pc, #20]	@ (8007768 <__i2b+0x28>)
 8007752:	f240 1145 	movw	r1, #325	@ 0x145
 8007756:	f000 fc95 	bl	8008084 <__assert_func>
 800775a:	2301      	movs	r3, #1
 800775c:	6144      	str	r4, [r0, #20]
 800775e:	6103      	str	r3, [r0, #16]
 8007760:	bd10      	pop	{r4, pc}
 8007762:	bf00      	nop
 8007764:	08009e4c 	.word	0x08009e4c
 8007768:	08009e5d 	.word	0x08009e5d

0800776c <__multiply>:
 800776c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007770:	4614      	mov	r4, r2
 8007772:	690a      	ldr	r2, [r1, #16]
 8007774:	6923      	ldr	r3, [r4, #16]
 8007776:	429a      	cmp	r2, r3
 8007778:	bfa8      	it	ge
 800777a:	4623      	movge	r3, r4
 800777c:	460f      	mov	r7, r1
 800777e:	bfa4      	itt	ge
 8007780:	460c      	movge	r4, r1
 8007782:	461f      	movge	r7, r3
 8007784:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007788:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800778c:	68a3      	ldr	r3, [r4, #8]
 800778e:	6861      	ldr	r1, [r4, #4]
 8007790:	eb0a 0609 	add.w	r6, sl, r9
 8007794:	42b3      	cmp	r3, r6
 8007796:	b085      	sub	sp, #20
 8007798:	bfb8      	it	lt
 800779a:	3101      	addlt	r1, #1
 800779c:	f7ff fedc 	bl	8007558 <_Balloc>
 80077a0:	b930      	cbnz	r0, 80077b0 <__multiply+0x44>
 80077a2:	4602      	mov	r2, r0
 80077a4:	4b44      	ldr	r3, [pc, #272]	@ (80078b8 <__multiply+0x14c>)
 80077a6:	4845      	ldr	r0, [pc, #276]	@ (80078bc <__multiply+0x150>)
 80077a8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80077ac:	f000 fc6a 	bl	8008084 <__assert_func>
 80077b0:	f100 0514 	add.w	r5, r0, #20
 80077b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80077b8:	462b      	mov	r3, r5
 80077ba:	2200      	movs	r2, #0
 80077bc:	4543      	cmp	r3, r8
 80077be:	d321      	bcc.n	8007804 <__multiply+0x98>
 80077c0:	f107 0114 	add.w	r1, r7, #20
 80077c4:	f104 0214 	add.w	r2, r4, #20
 80077c8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80077cc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80077d0:	9302      	str	r3, [sp, #8]
 80077d2:	1b13      	subs	r3, r2, r4
 80077d4:	3b15      	subs	r3, #21
 80077d6:	f023 0303 	bic.w	r3, r3, #3
 80077da:	3304      	adds	r3, #4
 80077dc:	f104 0715 	add.w	r7, r4, #21
 80077e0:	42ba      	cmp	r2, r7
 80077e2:	bf38      	it	cc
 80077e4:	2304      	movcc	r3, #4
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	9b02      	ldr	r3, [sp, #8]
 80077ea:	9103      	str	r1, [sp, #12]
 80077ec:	428b      	cmp	r3, r1
 80077ee:	d80c      	bhi.n	800780a <__multiply+0x9e>
 80077f0:	2e00      	cmp	r6, #0
 80077f2:	dd03      	ble.n	80077fc <__multiply+0x90>
 80077f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d05b      	beq.n	80078b4 <__multiply+0x148>
 80077fc:	6106      	str	r6, [r0, #16]
 80077fe:	b005      	add	sp, #20
 8007800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007804:	f843 2b04 	str.w	r2, [r3], #4
 8007808:	e7d8      	b.n	80077bc <__multiply+0x50>
 800780a:	f8b1 a000 	ldrh.w	sl, [r1]
 800780e:	f1ba 0f00 	cmp.w	sl, #0
 8007812:	d024      	beq.n	800785e <__multiply+0xf2>
 8007814:	f104 0e14 	add.w	lr, r4, #20
 8007818:	46a9      	mov	r9, r5
 800781a:	f04f 0c00 	mov.w	ip, #0
 800781e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007822:	f8d9 3000 	ldr.w	r3, [r9]
 8007826:	fa1f fb87 	uxth.w	fp, r7
 800782a:	b29b      	uxth	r3, r3
 800782c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007830:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007834:	f8d9 7000 	ldr.w	r7, [r9]
 8007838:	4463      	add	r3, ip
 800783a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800783e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007842:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007846:	b29b      	uxth	r3, r3
 8007848:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800784c:	4572      	cmp	r2, lr
 800784e:	f849 3b04 	str.w	r3, [r9], #4
 8007852:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007856:	d8e2      	bhi.n	800781e <__multiply+0xb2>
 8007858:	9b01      	ldr	r3, [sp, #4]
 800785a:	f845 c003 	str.w	ip, [r5, r3]
 800785e:	9b03      	ldr	r3, [sp, #12]
 8007860:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007864:	3104      	adds	r1, #4
 8007866:	f1b9 0f00 	cmp.w	r9, #0
 800786a:	d021      	beq.n	80078b0 <__multiply+0x144>
 800786c:	682b      	ldr	r3, [r5, #0]
 800786e:	f104 0c14 	add.w	ip, r4, #20
 8007872:	46ae      	mov	lr, r5
 8007874:	f04f 0a00 	mov.w	sl, #0
 8007878:	f8bc b000 	ldrh.w	fp, [ip]
 800787c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007880:	fb09 770b 	mla	r7, r9, fp, r7
 8007884:	4457      	add	r7, sl
 8007886:	b29b      	uxth	r3, r3
 8007888:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800788c:	f84e 3b04 	str.w	r3, [lr], #4
 8007890:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007894:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007898:	f8be 3000 	ldrh.w	r3, [lr]
 800789c:	fb09 330a 	mla	r3, r9, sl, r3
 80078a0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80078a4:	4562      	cmp	r2, ip
 80078a6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80078aa:	d8e5      	bhi.n	8007878 <__multiply+0x10c>
 80078ac:	9f01      	ldr	r7, [sp, #4]
 80078ae:	51eb      	str	r3, [r5, r7]
 80078b0:	3504      	adds	r5, #4
 80078b2:	e799      	b.n	80077e8 <__multiply+0x7c>
 80078b4:	3e01      	subs	r6, #1
 80078b6:	e79b      	b.n	80077f0 <__multiply+0x84>
 80078b8:	08009e4c 	.word	0x08009e4c
 80078bc:	08009e5d 	.word	0x08009e5d

080078c0 <__pow5mult>:
 80078c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c4:	4615      	mov	r5, r2
 80078c6:	f012 0203 	ands.w	r2, r2, #3
 80078ca:	4607      	mov	r7, r0
 80078cc:	460e      	mov	r6, r1
 80078ce:	d007      	beq.n	80078e0 <__pow5mult+0x20>
 80078d0:	4c25      	ldr	r4, [pc, #148]	@ (8007968 <__pow5mult+0xa8>)
 80078d2:	3a01      	subs	r2, #1
 80078d4:	2300      	movs	r3, #0
 80078d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80078da:	f7ff fe9f 	bl	800761c <__multadd>
 80078de:	4606      	mov	r6, r0
 80078e0:	10ad      	asrs	r5, r5, #2
 80078e2:	d03d      	beq.n	8007960 <__pow5mult+0xa0>
 80078e4:	69fc      	ldr	r4, [r7, #28]
 80078e6:	b97c      	cbnz	r4, 8007908 <__pow5mult+0x48>
 80078e8:	2010      	movs	r0, #16
 80078ea:	f7ff fd7f 	bl	80073ec <malloc>
 80078ee:	4602      	mov	r2, r0
 80078f0:	61f8      	str	r0, [r7, #28]
 80078f2:	b928      	cbnz	r0, 8007900 <__pow5mult+0x40>
 80078f4:	4b1d      	ldr	r3, [pc, #116]	@ (800796c <__pow5mult+0xac>)
 80078f6:	481e      	ldr	r0, [pc, #120]	@ (8007970 <__pow5mult+0xb0>)
 80078f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80078fc:	f000 fbc2 	bl	8008084 <__assert_func>
 8007900:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007904:	6004      	str	r4, [r0, #0]
 8007906:	60c4      	str	r4, [r0, #12]
 8007908:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800790c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007910:	b94c      	cbnz	r4, 8007926 <__pow5mult+0x66>
 8007912:	f240 2171 	movw	r1, #625	@ 0x271
 8007916:	4638      	mov	r0, r7
 8007918:	f7ff ff12 	bl	8007740 <__i2b>
 800791c:	2300      	movs	r3, #0
 800791e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007922:	4604      	mov	r4, r0
 8007924:	6003      	str	r3, [r0, #0]
 8007926:	f04f 0900 	mov.w	r9, #0
 800792a:	07eb      	lsls	r3, r5, #31
 800792c:	d50a      	bpl.n	8007944 <__pow5mult+0x84>
 800792e:	4631      	mov	r1, r6
 8007930:	4622      	mov	r2, r4
 8007932:	4638      	mov	r0, r7
 8007934:	f7ff ff1a 	bl	800776c <__multiply>
 8007938:	4631      	mov	r1, r6
 800793a:	4680      	mov	r8, r0
 800793c:	4638      	mov	r0, r7
 800793e:	f7ff fe4b 	bl	80075d8 <_Bfree>
 8007942:	4646      	mov	r6, r8
 8007944:	106d      	asrs	r5, r5, #1
 8007946:	d00b      	beq.n	8007960 <__pow5mult+0xa0>
 8007948:	6820      	ldr	r0, [r4, #0]
 800794a:	b938      	cbnz	r0, 800795c <__pow5mult+0x9c>
 800794c:	4622      	mov	r2, r4
 800794e:	4621      	mov	r1, r4
 8007950:	4638      	mov	r0, r7
 8007952:	f7ff ff0b 	bl	800776c <__multiply>
 8007956:	6020      	str	r0, [r4, #0]
 8007958:	f8c0 9000 	str.w	r9, [r0]
 800795c:	4604      	mov	r4, r0
 800795e:	e7e4      	b.n	800792a <__pow5mult+0x6a>
 8007960:	4630      	mov	r0, r6
 8007962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007966:	bf00      	nop
 8007968:	08009eb8 	.word	0x08009eb8
 800796c:	08009ddd 	.word	0x08009ddd
 8007970:	08009e5d 	.word	0x08009e5d

08007974 <__lshift>:
 8007974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007978:	460c      	mov	r4, r1
 800797a:	6849      	ldr	r1, [r1, #4]
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007982:	68a3      	ldr	r3, [r4, #8]
 8007984:	4607      	mov	r7, r0
 8007986:	4691      	mov	r9, r2
 8007988:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800798c:	f108 0601 	add.w	r6, r8, #1
 8007990:	42b3      	cmp	r3, r6
 8007992:	db0b      	blt.n	80079ac <__lshift+0x38>
 8007994:	4638      	mov	r0, r7
 8007996:	f7ff fddf 	bl	8007558 <_Balloc>
 800799a:	4605      	mov	r5, r0
 800799c:	b948      	cbnz	r0, 80079b2 <__lshift+0x3e>
 800799e:	4602      	mov	r2, r0
 80079a0:	4b28      	ldr	r3, [pc, #160]	@ (8007a44 <__lshift+0xd0>)
 80079a2:	4829      	ldr	r0, [pc, #164]	@ (8007a48 <__lshift+0xd4>)
 80079a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80079a8:	f000 fb6c 	bl	8008084 <__assert_func>
 80079ac:	3101      	adds	r1, #1
 80079ae:	005b      	lsls	r3, r3, #1
 80079b0:	e7ee      	b.n	8007990 <__lshift+0x1c>
 80079b2:	2300      	movs	r3, #0
 80079b4:	f100 0114 	add.w	r1, r0, #20
 80079b8:	f100 0210 	add.w	r2, r0, #16
 80079bc:	4618      	mov	r0, r3
 80079be:	4553      	cmp	r3, sl
 80079c0:	db33      	blt.n	8007a2a <__lshift+0xb6>
 80079c2:	6920      	ldr	r0, [r4, #16]
 80079c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80079c8:	f104 0314 	add.w	r3, r4, #20
 80079cc:	f019 091f 	ands.w	r9, r9, #31
 80079d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80079d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80079d8:	d02b      	beq.n	8007a32 <__lshift+0xbe>
 80079da:	f1c9 0e20 	rsb	lr, r9, #32
 80079de:	468a      	mov	sl, r1
 80079e0:	2200      	movs	r2, #0
 80079e2:	6818      	ldr	r0, [r3, #0]
 80079e4:	fa00 f009 	lsl.w	r0, r0, r9
 80079e8:	4310      	orrs	r0, r2
 80079ea:	f84a 0b04 	str.w	r0, [sl], #4
 80079ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80079f2:	459c      	cmp	ip, r3
 80079f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80079f8:	d8f3      	bhi.n	80079e2 <__lshift+0x6e>
 80079fa:	ebac 0304 	sub.w	r3, ip, r4
 80079fe:	3b15      	subs	r3, #21
 8007a00:	f023 0303 	bic.w	r3, r3, #3
 8007a04:	3304      	adds	r3, #4
 8007a06:	f104 0015 	add.w	r0, r4, #21
 8007a0a:	4584      	cmp	ip, r0
 8007a0c:	bf38      	it	cc
 8007a0e:	2304      	movcc	r3, #4
 8007a10:	50ca      	str	r2, [r1, r3]
 8007a12:	b10a      	cbz	r2, 8007a18 <__lshift+0xa4>
 8007a14:	f108 0602 	add.w	r6, r8, #2
 8007a18:	3e01      	subs	r6, #1
 8007a1a:	4638      	mov	r0, r7
 8007a1c:	612e      	str	r6, [r5, #16]
 8007a1e:	4621      	mov	r1, r4
 8007a20:	f7ff fdda 	bl	80075d8 <_Bfree>
 8007a24:	4628      	mov	r0, r5
 8007a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007a2e:	3301      	adds	r3, #1
 8007a30:	e7c5      	b.n	80079be <__lshift+0x4a>
 8007a32:	3904      	subs	r1, #4
 8007a34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007a38:	f841 2f04 	str.w	r2, [r1, #4]!
 8007a3c:	459c      	cmp	ip, r3
 8007a3e:	d8f9      	bhi.n	8007a34 <__lshift+0xc0>
 8007a40:	e7ea      	b.n	8007a18 <__lshift+0xa4>
 8007a42:	bf00      	nop
 8007a44:	08009e4c 	.word	0x08009e4c
 8007a48:	08009e5d 	.word	0x08009e5d

08007a4c <__mcmp>:
 8007a4c:	690a      	ldr	r2, [r1, #16]
 8007a4e:	4603      	mov	r3, r0
 8007a50:	6900      	ldr	r0, [r0, #16]
 8007a52:	1a80      	subs	r0, r0, r2
 8007a54:	b530      	push	{r4, r5, lr}
 8007a56:	d10e      	bne.n	8007a76 <__mcmp+0x2a>
 8007a58:	3314      	adds	r3, #20
 8007a5a:	3114      	adds	r1, #20
 8007a5c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007a60:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007a64:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007a68:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007a6c:	4295      	cmp	r5, r2
 8007a6e:	d003      	beq.n	8007a78 <__mcmp+0x2c>
 8007a70:	d205      	bcs.n	8007a7e <__mcmp+0x32>
 8007a72:	f04f 30ff 	mov.w	r0, #4294967295
 8007a76:	bd30      	pop	{r4, r5, pc}
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	d3f3      	bcc.n	8007a64 <__mcmp+0x18>
 8007a7c:	e7fb      	b.n	8007a76 <__mcmp+0x2a>
 8007a7e:	2001      	movs	r0, #1
 8007a80:	e7f9      	b.n	8007a76 <__mcmp+0x2a>
	...

08007a84 <__mdiff>:
 8007a84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a88:	4689      	mov	r9, r1
 8007a8a:	4606      	mov	r6, r0
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4648      	mov	r0, r9
 8007a90:	4614      	mov	r4, r2
 8007a92:	f7ff ffdb 	bl	8007a4c <__mcmp>
 8007a96:	1e05      	subs	r5, r0, #0
 8007a98:	d112      	bne.n	8007ac0 <__mdiff+0x3c>
 8007a9a:	4629      	mov	r1, r5
 8007a9c:	4630      	mov	r0, r6
 8007a9e:	f7ff fd5b 	bl	8007558 <_Balloc>
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	b928      	cbnz	r0, 8007ab2 <__mdiff+0x2e>
 8007aa6:	4b3f      	ldr	r3, [pc, #252]	@ (8007ba4 <__mdiff+0x120>)
 8007aa8:	f240 2137 	movw	r1, #567	@ 0x237
 8007aac:	483e      	ldr	r0, [pc, #248]	@ (8007ba8 <__mdiff+0x124>)
 8007aae:	f000 fae9 	bl	8008084 <__assert_func>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007ab8:	4610      	mov	r0, r2
 8007aba:	b003      	add	sp, #12
 8007abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ac0:	bfbc      	itt	lt
 8007ac2:	464b      	movlt	r3, r9
 8007ac4:	46a1      	movlt	r9, r4
 8007ac6:	4630      	mov	r0, r6
 8007ac8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007acc:	bfba      	itte	lt
 8007ace:	461c      	movlt	r4, r3
 8007ad0:	2501      	movlt	r5, #1
 8007ad2:	2500      	movge	r5, #0
 8007ad4:	f7ff fd40 	bl	8007558 <_Balloc>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	b918      	cbnz	r0, 8007ae4 <__mdiff+0x60>
 8007adc:	4b31      	ldr	r3, [pc, #196]	@ (8007ba4 <__mdiff+0x120>)
 8007ade:	f240 2145 	movw	r1, #581	@ 0x245
 8007ae2:	e7e3      	b.n	8007aac <__mdiff+0x28>
 8007ae4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007ae8:	6926      	ldr	r6, [r4, #16]
 8007aea:	60c5      	str	r5, [r0, #12]
 8007aec:	f109 0310 	add.w	r3, r9, #16
 8007af0:	f109 0514 	add.w	r5, r9, #20
 8007af4:	f104 0e14 	add.w	lr, r4, #20
 8007af8:	f100 0b14 	add.w	fp, r0, #20
 8007afc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007b00:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007b04:	9301      	str	r3, [sp, #4]
 8007b06:	46d9      	mov	r9, fp
 8007b08:	f04f 0c00 	mov.w	ip, #0
 8007b0c:	9b01      	ldr	r3, [sp, #4]
 8007b0e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007b12:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007b16:	9301      	str	r3, [sp, #4]
 8007b18:	fa1f f38a 	uxth.w	r3, sl
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	b283      	uxth	r3, r0
 8007b20:	1acb      	subs	r3, r1, r3
 8007b22:	0c00      	lsrs	r0, r0, #16
 8007b24:	4463      	add	r3, ip
 8007b26:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007b2a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007b34:	4576      	cmp	r6, lr
 8007b36:	f849 3b04 	str.w	r3, [r9], #4
 8007b3a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b3e:	d8e5      	bhi.n	8007b0c <__mdiff+0x88>
 8007b40:	1b33      	subs	r3, r6, r4
 8007b42:	3b15      	subs	r3, #21
 8007b44:	f023 0303 	bic.w	r3, r3, #3
 8007b48:	3415      	adds	r4, #21
 8007b4a:	3304      	adds	r3, #4
 8007b4c:	42a6      	cmp	r6, r4
 8007b4e:	bf38      	it	cc
 8007b50:	2304      	movcc	r3, #4
 8007b52:	441d      	add	r5, r3
 8007b54:	445b      	add	r3, fp
 8007b56:	461e      	mov	r6, r3
 8007b58:	462c      	mov	r4, r5
 8007b5a:	4544      	cmp	r4, r8
 8007b5c:	d30e      	bcc.n	8007b7c <__mdiff+0xf8>
 8007b5e:	f108 0103 	add.w	r1, r8, #3
 8007b62:	1b49      	subs	r1, r1, r5
 8007b64:	f021 0103 	bic.w	r1, r1, #3
 8007b68:	3d03      	subs	r5, #3
 8007b6a:	45a8      	cmp	r8, r5
 8007b6c:	bf38      	it	cc
 8007b6e:	2100      	movcc	r1, #0
 8007b70:	440b      	add	r3, r1
 8007b72:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007b76:	b191      	cbz	r1, 8007b9e <__mdiff+0x11a>
 8007b78:	6117      	str	r7, [r2, #16]
 8007b7a:	e79d      	b.n	8007ab8 <__mdiff+0x34>
 8007b7c:	f854 1b04 	ldr.w	r1, [r4], #4
 8007b80:	46e6      	mov	lr, ip
 8007b82:	0c08      	lsrs	r0, r1, #16
 8007b84:	fa1c fc81 	uxtah	ip, ip, r1
 8007b88:	4471      	add	r1, lr
 8007b8a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b8e:	b289      	uxth	r1, r1
 8007b90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b94:	f846 1b04 	str.w	r1, [r6], #4
 8007b98:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b9c:	e7dd      	b.n	8007b5a <__mdiff+0xd6>
 8007b9e:	3f01      	subs	r7, #1
 8007ba0:	e7e7      	b.n	8007b72 <__mdiff+0xee>
 8007ba2:	bf00      	nop
 8007ba4:	08009e4c 	.word	0x08009e4c
 8007ba8:	08009e5d 	.word	0x08009e5d

08007bac <__d2b>:
 8007bac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bb0:	460f      	mov	r7, r1
 8007bb2:	2101      	movs	r1, #1
 8007bb4:	ec59 8b10 	vmov	r8, r9, d0
 8007bb8:	4616      	mov	r6, r2
 8007bba:	f7ff fccd 	bl	8007558 <_Balloc>
 8007bbe:	4604      	mov	r4, r0
 8007bc0:	b930      	cbnz	r0, 8007bd0 <__d2b+0x24>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	4b23      	ldr	r3, [pc, #140]	@ (8007c54 <__d2b+0xa8>)
 8007bc6:	4824      	ldr	r0, [pc, #144]	@ (8007c58 <__d2b+0xac>)
 8007bc8:	f240 310f 	movw	r1, #783	@ 0x30f
 8007bcc:	f000 fa5a 	bl	8008084 <__assert_func>
 8007bd0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007bd4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007bd8:	b10d      	cbz	r5, 8007bde <__d2b+0x32>
 8007bda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007bde:	9301      	str	r3, [sp, #4]
 8007be0:	f1b8 0300 	subs.w	r3, r8, #0
 8007be4:	d023      	beq.n	8007c2e <__d2b+0x82>
 8007be6:	4668      	mov	r0, sp
 8007be8:	9300      	str	r3, [sp, #0]
 8007bea:	f7ff fd7c 	bl	80076e6 <__lo0bits>
 8007bee:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007bf2:	b1d0      	cbz	r0, 8007c2a <__d2b+0x7e>
 8007bf4:	f1c0 0320 	rsb	r3, r0, #32
 8007bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfc:	430b      	orrs	r3, r1
 8007bfe:	40c2      	lsrs	r2, r0
 8007c00:	6163      	str	r3, [r4, #20]
 8007c02:	9201      	str	r2, [sp, #4]
 8007c04:	9b01      	ldr	r3, [sp, #4]
 8007c06:	61a3      	str	r3, [r4, #24]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	bf0c      	ite	eq
 8007c0c:	2201      	moveq	r2, #1
 8007c0e:	2202      	movne	r2, #2
 8007c10:	6122      	str	r2, [r4, #16]
 8007c12:	b1a5      	cbz	r5, 8007c3e <__d2b+0x92>
 8007c14:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007c18:	4405      	add	r5, r0
 8007c1a:	603d      	str	r5, [r7, #0]
 8007c1c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007c20:	6030      	str	r0, [r6, #0]
 8007c22:	4620      	mov	r0, r4
 8007c24:	b003      	add	sp, #12
 8007c26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c2a:	6161      	str	r1, [r4, #20]
 8007c2c:	e7ea      	b.n	8007c04 <__d2b+0x58>
 8007c2e:	a801      	add	r0, sp, #4
 8007c30:	f7ff fd59 	bl	80076e6 <__lo0bits>
 8007c34:	9b01      	ldr	r3, [sp, #4]
 8007c36:	6163      	str	r3, [r4, #20]
 8007c38:	3020      	adds	r0, #32
 8007c3a:	2201      	movs	r2, #1
 8007c3c:	e7e8      	b.n	8007c10 <__d2b+0x64>
 8007c3e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c42:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007c46:	6038      	str	r0, [r7, #0]
 8007c48:	6918      	ldr	r0, [r3, #16]
 8007c4a:	f7ff fd2d 	bl	80076a8 <__hi0bits>
 8007c4e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007c52:	e7e5      	b.n	8007c20 <__d2b+0x74>
 8007c54:	08009e4c 	.word	0x08009e4c
 8007c58:	08009e5d 	.word	0x08009e5d

08007c5c <__ssputs_r>:
 8007c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c60:	688e      	ldr	r6, [r1, #8]
 8007c62:	461f      	mov	r7, r3
 8007c64:	42be      	cmp	r6, r7
 8007c66:	680b      	ldr	r3, [r1, #0]
 8007c68:	4682      	mov	sl, r0
 8007c6a:	460c      	mov	r4, r1
 8007c6c:	4690      	mov	r8, r2
 8007c6e:	d82d      	bhi.n	8007ccc <__ssputs_r+0x70>
 8007c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c78:	d026      	beq.n	8007cc8 <__ssputs_r+0x6c>
 8007c7a:	6965      	ldr	r5, [r4, #20]
 8007c7c:	6909      	ldr	r1, [r1, #16]
 8007c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c82:	eba3 0901 	sub.w	r9, r3, r1
 8007c86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c8a:	1c7b      	adds	r3, r7, #1
 8007c8c:	444b      	add	r3, r9
 8007c8e:	106d      	asrs	r5, r5, #1
 8007c90:	429d      	cmp	r5, r3
 8007c92:	bf38      	it	cc
 8007c94:	461d      	movcc	r5, r3
 8007c96:	0553      	lsls	r3, r2, #21
 8007c98:	d527      	bpl.n	8007cea <__ssputs_r+0x8e>
 8007c9a:	4629      	mov	r1, r5
 8007c9c:	f7ff fbd0 	bl	8007440 <_malloc_r>
 8007ca0:	4606      	mov	r6, r0
 8007ca2:	b360      	cbz	r0, 8007cfe <__ssputs_r+0xa2>
 8007ca4:	6921      	ldr	r1, [r4, #16]
 8007ca6:	464a      	mov	r2, r9
 8007ca8:	f7fe fcfb 	bl	80066a2 <memcpy>
 8007cac:	89a3      	ldrh	r3, [r4, #12]
 8007cae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007cb6:	81a3      	strh	r3, [r4, #12]
 8007cb8:	6126      	str	r6, [r4, #16]
 8007cba:	6165      	str	r5, [r4, #20]
 8007cbc:	444e      	add	r6, r9
 8007cbe:	eba5 0509 	sub.w	r5, r5, r9
 8007cc2:	6026      	str	r6, [r4, #0]
 8007cc4:	60a5      	str	r5, [r4, #8]
 8007cc6:	463e      	mov	r6, r7
 8007cc8:	42be      	cmp	r6, r7
 8007cca:	d900      	bls.n	8007cce <__ssputs_r+0x72>
 8007ccc:	463e      	mov	r6, r7
 8007cce:	6820      	ldr	r0, [r4, #0]
 8007cd0:	4632      	mov	r2, r6
 8007cd2:	4641      	mov	r1, r8
 8007cd4:	f7fe fc4b 	bl	800656e <memmove>
 8007cd8:	68a3      	ldr	r3, [r4, #8]
 8007cda:	1b9b      	subs	r3, r3, r6
 8007cdc:	60a3      	str	r3, [r4, #8]
 8007cde:	6823      	ldr	r3, [r4, #0]
 8007ce0:	4433      	add	r3, r6
 8007ce2:	6023      	str	r3, [r4, #0]
 8007ce4:	2000      	movs	r0, #0
 8007ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cea:	462a      	mov	r2, r5
 8007cec:	f000 fa0e 	bl	800810c <_realloc_r>
 8007cf0:	4606      	mov	r6, r0
 8007cf2:	2800      	cmp	r0, #0
 8007cf4:	d1e0      	bne.n	8007cb8 <__ssputs_r+0x5c>
 8007cf6:	6921      	ldr	r1, [r4, #16]
 8007cf8:	4650      	mov	r0, sl
 8007cfa:	f7ff fb2d 	bl	8007358 <_free_r>
 8007cfe:	230c      	movs	r3, #12
 8007d00:	f8ca 3000 	str.w	r3, [sl]
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e7e9      	b.n	8007ce6 <__ssputs_r+0x8a>
	...

08007d14 <_svfiprintf_r>:
 8007d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d18:	4698      	mov	r8, r3
 8007d1a:	898b      	ldrh	r3, [r1, #12]
 8007d1c:	061b      	lsls	r3, r3, #24
 8007d1e:	b09d      	sub	sp, #116	@ 0x74
 8007d20:	4607      	mov	r7, r0
 8007d22:	460d      	mov	r5, r1
 8007d24:	4614      	mov	r4, r2
 8007d26:	d510      	bpl.n	8007d4a <_svfiprintf_r+0x36>
 8007d28:	690b      	ldr	r3, [r1, #16]
 8007d2a:	b973      	cbnz	r3, 8007d4a <_svfiprintf_r+0x36>
 8007d2c:	2140      	movs	r1, #64	@ 0x40
 8007d2e:	f7ff fb87 	bl	8007440 <_malloc_r>
 8007d32:	6028      	str	r0, [r5, #0]
 8007d34:	6128      	str	r0, [r5, #16]
 8007d36:	b930      	cbnz	r0, 8007d46 <_svfiprintf_r+0x32>
 8007d38:	230c      	movs	r3, #12
 8007d3a:	603b      	str	r3, [r7, #0]
 8007d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d40:	b01d      	add	sp, #116	@ 0x74
 8007d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d46:	2340      	movs	r3, #64	@ 0x40
 8007d48:	616b      	str	r3, [r5, #20]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d4e:	2320      	movs	r3, #32
 8007d50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d58:	2330      	movs	r3, #48	@ 0x30
 8007d5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007ef8 <_svfiprintf_r+0x1e4>
 8007d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d62:	f04f 0901 	mov.w	r9, #1
 8007d66:	4623      	mov	r3, r4
 8007d68:	469a      	mov	sl, r3
 8007d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d6e:	b10a      	cbz	r2, 8007d74 <_svfiprintf_r+0x60>
 8007d70:	2a25      	cmp	r2, #37	@ 0x25
 8007d72:	d1f9      	bne.n	8007d68 <_svfiprintf_r+0x54>
 8007d74:	ebba 0b04 	subs.w	fp, sl, r4
 8007d78:	d00b      	beq.n	8007d92 <_svfiprintf_r+0x7e>
 8007d7a:	465b      	mov	r3, fp
 8007d7c:	4622      	mov	r2, r4
 8007d7e:	4629      	mov	r1, r5
 8007d80:	4638      	mov	r0, r7
 8007d82:	f7ff ff6b 	bl	8007c5c <__ssputs_r>
 8007d86:	3001      	adds	r0, #1
 8007d88:	f000 80a7 	beq.w	8007eda <_svfiprintf_r+0x1c6>
 8007d8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d8e:	445a      	add	r2, fp
 8007d90:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d92:	f89a 3000 	ldrb.w	r3, [sl]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	f000 809f 	beq.w	8007eda <_svfiprintf_r+0x1c6>
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007da6:	f10a 0a01 	add.w	sl, sl, #1
 8007daa:	9304      	str	r3, [sp, #16]
 8007dac:	9307      	str	r3, [sp, #28]
 8007dae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007db2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007db4:	4654      	mov	r4, sl
 8007db6:	2205      	movs	r2, #5
 8007db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dbc:	484e      	ldr	r0, [pc, #312]	@ (8007ef8 <_svfiprintf_r+0x1e4>)
 8007dbe:	f7f8 fa0f 	bl	80001e0 <memchr>
 8007dc2:	9a04      	ldr	r2, [sp, #16]
 8007dc4:	b9d8      	cbnz	r0, 8007dfe <_svfiprintf_r+0xea>
 8007dc6:	06d0      	lsls	r0, r2, #27
 8007dc8:	bf44      	itt	mi
 8007dca:	2320      	movmi	r3, #32
 8007dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dd0:	0711      	lsls	r1, r2, #28
 8007dd2:	bf44      	itt	mi
 8007dd4:	232b      	movmi	r3, #43	@ 0x2b
 8007dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007dda:	f89a 3000 	ldrb.w	r3, [sl]
 8007dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8007de0:	d015      	beq.n	8007e0e <_svfiprintf_r+0xfa>
 8007de2:	9a07      	ldr	r2, [sp, #28]
 8007de4:	4654      	mov	r4, sl
 8007de6:	2000      	movs	r0, #0
 8007de8:	f04f 0c0a 	mov.w	ip, #10
 8007dec:	4621      	mov	r1, r4
 8007dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007df2:	3b30      	subs	r3, #48	@ 0x30
 8007df4:	2b09      	cmp	r3, #9
 8007df6:	d94b      	bls.n	8007e90 <_svfiprintf_r+0x17c>
 8007df8:	b1b0      	cbz	r0, 8007e28 <_svfiprintf_r+0x114>
 8007dfa:	9207      	str	r2, [sp, #28]
 8007dfc:	e014      	b.n	8007e28 <_svfiprintf_r+0x114>
 8007dfe:	eba0 0308 	sub.w	r3, r0, r8
 8007e02:	fa09 f303 	lsl.w	r3, r9, r3
 8007e06:	4313      	orrs	r3, r2
 8007e08:	9304      	str	r3, [sp, #16]
 8007e0a:	46a2      	mov	sl, r4
 8007e0c:	e7d2      	b.n	8007db4 <_svfiprintf_r+0xa0>
 8007e0e:	9b03      	ldr	r3, [sp, #12]
 8007e10:	1d19      	adds	r1, r3, #4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	9103      	str	r1, [sp, #12]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	bfbb      	ittet	lt
 8007e1a:	425b      	neglt	r3, r3
 8007e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8007e20:	9307      	strge	r3, [sp, #28]
 8007e22:	9307      	strlt	r3, [sp, #28]
 8007e24:	bfb8      	it	lt
 8007e26:	9204      	strlt	r2, [sp, #16]
 8007e28:	7823      	ldrb	r3, [r4, #0]
 8007e2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e2c:	d10a      	bne.n	8007e44 <_svfiprintf_r+0x130>
 8007e2e:	7863      	ldrb	r3, [r4, #1]
 8007e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e32:	d132      	bne.n	8007e9a <_svfiprintf_r+0x186>
 8007e34:	9b03      	ldr	r3, [sp, #12]
 8007e36:	1d1a      	adds	r2, r3, #4
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	9203      	str	r2, [sp, #12]
 8007e3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e40:	3402      	adds	r4, #2
 8007e42:	9305      	str	r3, [sp, #20]
 8007e44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007f08 <_svfiprintf_r+0x1f4>
 8007e48:	7821      	ldrb	r1, [r4, #0]
 8007e4a:	2203      	movs	r2, #3
 8007e4c:	4650      	mov	r0, sl
 8007e4e:	f7f8 f9c7 	bl	80001e0 <memchr>
 8007e52:	b138      	cbz	r0, 8007e64 <_svfiprintf_r+0x150>
 8007e54:	9b04      	ldr	r3, [sp, #16]
 8007e56:	eba0 000a 	sub.w	r0, r0, sl
 8007e5a:	2240      	movs	r2, #64	@ 0x40
 8007e5c:	4082      	lsls	r2, r0
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	3401      	adds	r4, #1
 8007e62:	9304      	str	r3, [sp, #16]
 8007e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e68:	4824      	ldr	r0, [pc, #144]	@ (8007efc <_svfiprintf_r+0x1e8>)
 8007e6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e6e:	2206      	movs	r2, #6
 8007e70:	f7f8 f9b6 	bl	80001e0 <memchr>
 8007e74:	2800      	cmp	r0, #0
 8007e76:	d036      	beq.n	8007ee6 <_svfiprintf_r+0x1d2>
 8007e78:	4b21      	ldr	r3, [pc, #132]	@ (8007f00 <_svfiprintf_r+0x1ec>)
 8007e7a:	bb1b      	cbnz	r3, 8007ec4 <_svfiprintf_r+0x1b0>
 8007e7c:	9b03      	ldr	r3, [sp, #12]
 8007e7e:	3307      	adds	r3, #7
 8007e80:	f023 0307 	bic.w	r3, r3, #7
 8007e84:	3308      	adds	r3, #8
 8007e86:	9303      	str	r3, [sp, #12]
 8007e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e8a:	4433      	add	r3, r6
 8007e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e8e:	e76a      	b.n	8007d66 <_svfiprintf_r+0x52>
 8007e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e94:	460c      	mov	r4, r1
 8007e96:	2001      	movs	r0, #1
 8007e98:	e7a8      	b.n	8007dec <_svfiprintf_r+0xd8>
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	3401      	adds	r4, #1
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	f04f 0c0a 	mov.w	ip, #10
 8007ea6:	4620      	mov	r0, r4
 8007ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007eac:	3a30      	subs	r2, #48	@ 0x30
 8007eae:	2a09      	cmp	r2, #9
 8007eb0:	d903      	bls.n	8007eba <_svfiprintf_r+0x1a6>
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d0c6      	beq.n	8007e44 <_svfiprintf_r+0x130>
 8007eb6:	9105      	str	r1, [sp, #20]
 8007eb8:	e7c4      	b.n	8007e44 <_svfiprintf_r+0x130>
 8007eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	e7f0      	b.n	8007ea6 <_svfiprintf_r+0x192>
 8007ec4:	ab03      	add	r3, sp, #12
 8007ec6:	9300      	str	r3, [sp, #0]
 8007ec8:	462a      	mov	r2, r5
 8007eca:	4b0e      	ldr	r3, [pc, #56]	@ (8007f04 <_svfiprintf_r+0x1f0>)
 8007ecc:	a904      	add	r1, sp, #16
 8007ece:	4638      	mov	r0, r7
 8007ed0:	f7fd fe70 	bl	8005bb4 <_printf_float>
 8007ed4:	1c42      	adds	r2, r0, #1
 8007ed6:	4606      	mov	r6, r0
 8007ed8:	d1d6      	bne.n	8007e88 <_svfiprintf_r+0x174>
 8007eda:	89ab      	ldrh	r3, [r5, #12]
 8007edc:	065b      	lsls	r3, r3, #25
 8007ede:	f53f af2d 	bmi.w	8007d3c <_svfiprintf_r+0x28>
 8007ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ee4:	e72c      	b.n	8007d40 <_svfiprintf_r+0x2c>
 8007ee6:	ab03      	add	r3, sp, #12
 8007ee8:	9300      	str	r3, [sp, #0]
 8007eea:	462a      	mov	r2, r5
 8007eec:	4b05      	ldr	r3, [pc, #20]	@ (8007f04 <_svfiprintf_r+0x1f0>)
 8007eee:	a904      	add	r1, sp, #16
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	f7fe f8f7 	bl	80060e4 <_printf_i>
 8007ef6:	e7ed      	b.n	8007ed4 <_svfiprintf_r+0x1c0>
 8007ef8:	08009fb8 	.word	0x08009fb8
 8007efc:	08009fc2 	.word	0x08009fc2
 8007f00:	08005bb5 	.word	0x08005bb5
 8007f04:	08007c5d 	.word	0x08007c5d
 8007f08:	08009fbe 	.word	0x08009fbe

08007f0c <__sflush_r>:
 8007f0c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f14:	0716      	lsls	r6, r2, #28
 8007f16:	4605      	mov	r5, r0
 8007f18:	460c      	mov	r4, r1
 8007f1a:	d454      	bmi.n	8007fc6 <__sflush_r+0xba>
 8007f1c:	684b      	ldr	r3, [r1, #4]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	dc02      	bgt.n	8007f28 <__sflush_r+0x1c>
 8007f22:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	dd48      	ble.n	8007fba <__sflush_r+0xae>
 8007f28:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f2a:	2e00      	cmp	r6, #0
 8007f2c:	d045      	beq.n	8007fba <__sflush_r+0xae>
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f34:	682f      	ldr	r7, [r5, #0]
 8007f36:	6a21      	ldr	r1, [r4, #32]
 8007f38:	602b      	str	r3, [r5, #0]
 8007f3a:	d030      	beq.n	8007f9e <__sflush_r+0x92>
 8007f3c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	0759      	lsls	r1, r3, #29
 8007f42:	d505      	bpl.n	8007f50 <__sflush_r+0x44>
 8007f44:	6863      	ldr	r3, [r4, #4]
 8007f46:	1ad2      	subs	r2, r2, r3
 8007f48:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f4a:	b10b      	cbz	r3, 8007f50 <__sflush_r+0x44>
 8007f4c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f4e:	1ad2      	subs	r2, r2, r3
 8007f50:	2300      	movs	r3, #0
 8007f52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f54:	6a21      	ldr	r1, [r4, #32]
 8007f56:	4628      	mov	r0, r5
 8007f58:	47b0      	blx	r6
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	89a3      	ldrh	r3, [r4, #12]
 8007f5e:	d106      	bne.n	8007f6e <__sflush_r+0x62>
 8007f60:	6829      	ldr	r1, [r5, #0]
 8007f62:	291d      	cmp	r1, #29
 8007f64:	d82b      	bhi.n	8007fbe <__sflush_r+0xb2>
 8007f66:	4a2a      	ldr	r2, [pc, #168]	@ (8008010 <__sflush_r+0x104>)
 8007f68:	410a      	asrs	r2, r1
 8007f6a:	07d6      	lsls	r6, r2, #31
 8007f6c:	d427      	bmi.n	8007fbe <__sflush_r+0xb2>
 8007f6e:	2200      	movs	r2, #0
 8007f70:	6062      	str	r2, [r4, #4]
 8007f72:	04d9      	lsls	r1, r3, #19
 8007f74:	6922      	ldr	r2, [r4, #16]
 8007f76:	6022      	str	r2, [r4, #0]
 8007f78:	d504      	bpl.n	8007f84 <__sflush_r+0x78>
 8007f7a:	1c42      	adds	r2, r0, #1
 8007f7c:	d101      	bne.n	8007f82 <__sflush_r+0x76>
 8007f7e:	682b      	ldr	r3, [r5, #0]
 8007f80:	b903      	cbnz	r3, 8007f84 <__sflush_r+0x78>
 8007f82:	6560      	str	r0, [r4, #84]	@ 0x54
 8007f84:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f86:	602f      	str	r7, [r5, #0]
 8007f88:	b1b9      	cbz	r1, 8007fba <__sflush_r+0xae>
 8007f8a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007f8e:	4299      	cmp	r1, r3
 8007f90:	d002      	beq.n	8007f98 <__sflush_r+0x8c>
 8007f92:	4628      	mov	r0, r5
 8007f94:	f7ff f9e0 	bl	8007358 <_free_r>
 8007f98:	2300      	movs	r3, #0
 8007f9a:	6363      	str	r3, [r4, #52]	@ 0x34
 8007f9c:	e00d      	b.n	8007fba <__sflush_r+0xae>
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	4628      	mov	r0, r5
 8007fa2:	47b0      	blx	r6
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	1c50      	adds	r0, r2, #1
 8007fa8:	d1c9      	bne.n	8007f3e <__sflush_r+0x32>
 8007faa:	682b      	ldr	r3, [r5, #0]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d0c6      	beq.n	8007f3e <__sflush_r+0x32>
 8007fb0:	2b1d      	cmp	r3, #29
 8007fb2:	d001      	beq.n	8007fb8 <__sflush_r+0xac>
 8007fb4:	2b16      	cmp	r3, #22
 8007fb6:	d11e      	bne.n	8007ff6 <__sflush_r+0xea>
 8007fb8:	602f      	str	r7, [r5, #0]
 8007fba:	2000      	movs	r0, #0
 8007fbc:	e022      	b.n	8008004 <__sflush_r+0xf8>
 8007fbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fc2:	b21b      	sxth	r3, r3
 8007fc4:	e01b      	b.n	8007ffe <__sflush_r+0xf2>
 8007fc6:	690f      	ldr	r7, [r1, #16]
 8007fc8:	2f00      	cmp	r7, #0
 8007fca:	d0f6      	beq.n	8007fba <__sflush_r+0xae>
 8007fcc:	0793      	lsls	r3, r2, #30
 8007fce:	680e      	ldr	r6, [r1, #0]
 8007fd0:	bf08      	it	eq
 8007fd2:	694b      	ldreq	r3, [r1, #20]
 8007fd4:	600f      	str	r7, [r1, #0]
 8007fd6:	bf18      	it	ne
 8007fd8:	2300      	movne	r3, #0
 8007fda:	eba6 0807 	sub.w	r8, r6, r7
 8007fde:	608b      	str	r3, [r1, #8]
 8007fe0:	f1b8 0f00 	cmp.w	r8, #0
 8007fe4:	dde9      	ble.n	8007fba <__sflush_r+0xae>
 8007fe6:	6a21      	ldr	r1, [r4, #32]
 8007fe8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007fea:	4643      	mov	r3, r8
 8007fec:	463a      	mov	r2, r7
 8007fee:	4628      	mov	r0, r5
 8007ff0:	47b0      	blx	r6
 8007ff2:	2800      	cmp	r0, #0
 8007ff4:	dc08      	bgt.n	8008008 <__sflush_r+0xfc>
 8007ff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ffe:	81a3      	strh	r3, [r4, #12]
 8008000:	f04f 30ff 	mov.w	r0, #4294967295
 8008004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008008:	4407      	add	r7, r0
 800800a:	eba8 0800 	sub.w	r8, r8, r0
 800800e:	e7e7      	b.n	8007fe0 <__sflush_r+0xd4>
 8008010:	dfbffffe 	.word	0xdfbffffe

08008014 <_fflush_r>:
 8008014:	b538      	push	{r3, r4, r5, lr}
 8008016:	690b      	ldr	r3, [r1, #16]
 8008018:	4605      	mov	r5, r0
 800801a:	460c      	mov	r4, r1
 800801c:	b913      	cbnz	r3, 8008024 <_fflush_r+0x10>
 800801e:	2500      	movs	r5, #0
 8008020:	4628      	mov	r0, r5
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	b118      	cbz	r0, 800802e <_fflush_r+0x1a>
 8008026:	6a03      	ldr	r3, [r0, #32]
 8008028:	b90b      	cbnz	r3, 800802e <_fflush_r+0x1a>
 800802a:	f7fe fa07 	bl	800643c <__sinit>
 800802e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d0f3      	beq.n	800801e <_fflush_r+0xa>
 8008036:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008038:	07d0      	lsls	r0, r2, #31
 800803a:	d404      	bmi.n	8008046 <_fflush_r+0x32>
 800803c:	0599      	lsls	r1, r3, #22
 800803e:	d402      	bmi.n	8008046 <_fflush_r+0x32>
 8008040:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008042:	f7fe fb2c 	bl	800669e <__retarget_lock_acquire_recursive>
 8008046:	4628      	mov	r0, r5
 8008048:	4621      	mov	r1, r4
 800804a:	f7ff ff5f 	bl	8007f0c <__sflush_r>
 800804e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008050:	07da      	lsls	r2, r3, #31
 8008052:	4605      	mov	r5, r0
 8008054:	d4e4      	bmi.n	8008020 <_fflush_r+0xc>
 8008056:	89a3      	ldrh	r3, [r4, #12]
 8008058:	059b      	lsls	r3, r3, #22
 800805a:	d4e1      	bmi.n	8008020 <_fflush_r+0xc>
 800805c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800805e:	f7fe fb1f 	bl	80066a0 <__retarget_lock_release_recursive>
 8008062:	e7dd      	b.n	8008020 <_fflush_r+0xc>

08008064 <_sbrk_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4d06      	ldr	r5, [pc, #24]	@ (8008080 <_sbrk_r+0x1c>)
 8008068:	2300      	movs	r3, #0
 800806a:	4604      	mov	r4, r0
 800806c:	4608      	mov	r0, r1
 800806e:	602b      	str	r3, [r5, #0]
 8008070:	f7fa fada 	bl	8002628 <_sbrk>
 8008074:	1c43      	adds	r3, r0, #1
 8008076:	d102      	bne.n	800807e <_sbrk_r+0x1a>
 8008078:	682b      	ldr	r3, [r5, #0]
 800807a:	b103      	cbz	r3, 800807e <_sbrk_r+0x1a>
 800807c:	6023      	str	r3, [r4, #0]
 800807e:	bd38      	pop	{r3, r4, r5, pc}
 8008080:	20000a64 	.word	0x20000a64

08008084 <__assert_func>:
 8008084:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008086:	4614      	mov	r4, r2
 8008088:	461a      	mov	r2, r3
 800808a:	4b09      	ldr	r3, [pc, #36]	@ (80080b0 <__assert_func+0x2c>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4605      	mov	r5, r0
 8008090:	68d8      	ldr	r0, [r3, #12]
 8008092:	b954      	cbnz	r4, 80080aa <__assert_func+0x26>
 8008094:	4b07      	ldr	r3, [pc, #28]	@ (80080b4 <__assert_func+0x30>)
 8008096:	461c      	mov	r4, r3
 8008098:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800809c:	9100      	str	r1, [sp, #0]
 800809e:	462b      	mov	r3, r5
 80080a0:	4905      	ldr	r1, [pc, #20]	@ (80080b8 <__assert_func+0x34>)
 80080a2:	f000 f86f 	bl	8008184 <fiprintf>
 80080a6:	f000 f87f 	bl	80081a8 <abort>
 80080aa:	4b04      	ldr	r3, [pc, #16]	@ (80080bc <__assert_func+0x38>)
 80080ac:	e7f4      	b.n	8008098 <__assert_func+0x14>
 80080ae:	bf00      	nop
 80080b0:	2000002c 	.word	0x2000002c
 80080b4:	0800a00e 	.word	0x0800a00e
 80080b8:	08009fe0 	.word	0x08009fe0
 80080bc:	08009fd3 	.word	0x08009fd3

080080c0 <_calloc_r>:
 80080c0:	b570      	push	{r4, r5, r6, lr}
 80080c2:	fba1 5402 	umull	r5, r4, r1, r2
 80080c6:	b93c      	cbnz	r4, 80080d8 <_calloc_r+0x18>
 80080c8:	4629      	mov	r1, r5
 80080ca:	f7ff f9b9 	bl	8007440 <_malloc_r>
 80080ce:	4606      	mov	r6, r0
 80080d0:	b928      	cbnz	r0, 80080de <_calloc_r+0x1e>
 80080d2:	2600      	movs	r6, #0
 80080d4:	4630      	mov	r0, r6
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	220c      	movs	r2, #12
 80080da:	6002      	str	r2, [r0, #0]
 80080dc:	e7f9      	b.n	80080d2 <_calloc_r+0x12>
 80080de:	462a      	mov	r2, r5
 80080e0:	4621      	mov	r1, r4
 80080e2:	f7fe fa5e 	bl	80065a2 <memset>
 80080e6:	e7f5      	b.n	80080d4 <_calloc_r+0x14>

080080e8 <__ascii_mbtowc>:
 80080e8:	b082      	sub	sp, #8
 80080ea:	b901      	cbnz	r1, 80080ee <__ascii_mbtowc+0x6>
 80080ec:	a901      	add	r1, sp, #4
 80080ee:	b142      	cbz	r2, 8008102 <__ascii_mbtowc+0x1a>
 80080f0:	b14b      	cbz	r3, 8008106 <__ascii_mbtowc+0x1e>
 80080f2:	7813      	ldrb	r3, [r2, #0]
 80080f4:	600b      	str	r3, [r1, #0]
 80080f6:	7812      	ldrb	r2, [r2, #0]
 80080f8:	1e10      	subs	r0, r2, #0
 80080fa:	bf18      	it	ne
 80080fc:	2001      	movne	r0, #1
 80080fe:	b002      	add	sp, #8
 8008100:	4770      	bx	lr
 8008102:	4610      	mov	r0, r2
 8008104:	e7fb      	b.n	80080fe <__ascii_mbtowc+0x16>
 8008106:	f06f 0001 	mvn.w	r0, #1
 800810a:	e7f8      	b.n	80080fe <__ascii_mbtowc+0x16>

0800810c <_realloc_r>:
 800810c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008110:	4680      	mov	r8, r0
 8008112:	4615      	mov	r5, r2
 8008114:	460c      	mov	r4, r1
 8008116:	b921      	cbnz	r1, 8008122 <_realloc_r+0x16>
 8008118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800811c:	4611      	mov	r1, r2
 800811e:	f7ff b98f 	b.w	8007440 <_malloc_r>
 8008122:	b92a      	cbnz	r2, 8008130 <_realloc_r+0x24>
 8008124:	f7ff f918 	bl	8007358 <_free_r>
 8008128:	2400      	movs	r4, #0
 800812a:	4620      	mov	r0, r4
 800812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008130:	f000 f841 	bl	80081b6 <_malloc_usable_size_r>
 8008134:	4285      	cmp	r5, r0
 8008136:	4606      	mov	r6, r0
 8008138:	d802      	bhi.n	8008140 <_realloc_r+0x34>
 800813a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800813e:	d8f4      	bhi.n	800812a <_realloc_r+0x1e>
 8008140:	4629      	mov	r1, r5
 8008142:	4640      	mov	r0, r8
 8008144:	f7ff f97c 	bl	8007440 <_malloc_r>
 8008148:	4607      	mov	r7, r0
 800814a:	2800      	cmp	r0, #0
 800814c:	d0ec      	beq.n	8008128 <_realloc_r+0x1c>
 800814e:	42b5      	cmp	r5, r6
 8008150:	462a      	mov	r2, r5
 8008152:	4621      	mov	r1, r4
 8008154:	bf28      	it	cs
 8008156:	4632      	movcs	r2, r6
 8008158:	f7fe faa3 	bl	80066a2 <memcpy>
 800815c:	4621      	mov	r1, r4
 800815e:	4640      	mov	r0, r8
 8008160:	f7ff f8fa 	bl	8007358 <_free_r>
 8008164:	463c      	mov	r4, r7
 8008166:	e7e0      	b.n	800812a <_realloc_r+0x1e>

08008168 <__ascii_wctomb>:
 8008168:	4603      	mov	r3, r0
 800816a:	4608      	mov	r0, r1
 800816c:	b141      	cbz	r1, 8008180 <__ascii_wctomb+0x18>
 800816e:	2aff      	cmp	r2, #255	@ 0xff
 8008170:	d904      	bls.n	800817c <__ascii_wctomb+0x14>
 8008172:	228a      	movs	r2, #138	@ 0x8a
 8008174:	601a      	str	r2, [r3, #0]
 8008176:	f04f 30ff 	mov.w	r0, #4294967295
 800817a:	4770      	bx	lr
 800817c:	700a      	strb	r2, [r1, #0]
 800817e:	2001      	movs	r0, #1
 8008180:	4770      	bx	lr
	...

08008184 <fiprintf>:
 8008184:	b40e      	push	{r1, r2, r3}
 8008186:	b503      	push	{r0, r1, lr}
 8008188:	4601      	mov	r1, r0
 800818a:	ab03      	add	r3, sp, #12
 800818c:	4805      	ldr	r0, [pc, #20]	@ (80081a4 <fiprintf+0x20>)
 800818e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008192:	6800      	ldr	r0, [r0, #0]
 8008194:	9301      	str	r3, [sp, #4]
 8008196:	f000 f83f 	bl	8008218 <_vfiprintf_r>
 800819a:	b002      	add	sp, #8
 800819c:	f85d eb04 	ldr.w	lr, [sp], #4
 80081a0:	b003      	add	sp, #12
 80081a2:	4770      	bx	lr
 80081a4:	2000002c 	.word	0x2000002c

080081a8 <abort>:
 80081a8:	b508      	push	{r3, lr}
 80081aa:	2006      	movs	r0, #6
 80081ac:	f000 fa08 	bl	80085c0 <raise>
 80081b0:	2001      	movs	r0, #1
 80081b2:	f7fa f9c1 	bl	8002538 <_exit>

080081b6 <_malloc_usable_size_r>:
 80081b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081ba:	1f18      	subs	r0, r3, #4
 80081bc:	2b00      	cmp	r3, #0
 80081be:	bfbc      	itt	lt
 80081c0:	580b      	ldrlt	r3, [r1, r0]
 80081c2:	18c0      	addlt	r0, r0, r3
 80081c4:	4770      	bx	lr

080081c6 <__sfputc_r>:
 80081c6:	6893      	ldr	r3, [r2, #8]
 80081c8:	3b01      	subs	r3, #1
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	b410      	push	{r4}
 80081ce:	6093      	str	r3, [r2, #8]
 80081d0:	da08      	bge.n	80081e4 <__sfputc_r+0x1e>
 80081d2:	6994      	ldr	r4, [r2, #24]
 80081d4:	42a3      	cmp	r3, r4
 80081d6:	db01      	blt.n	80081dc <__sfputc_r+0x16>
 80081d8:	290a      	cmp	r1, #10
 80081da:	d103      	bne.n	80081e4 <__sfputc_r+0x1e>
 80081dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081e0:	f000 b932 	b.w	8008448 <__swbuf_r>
 80081e4:	6813      	ldr	r3, [r2, #0]
 80081e6:	1c58      	adds	r0, r3, #1
 80081e8:	6010      	str	r0, [r2, #0]
 80081ea:	7019      	strb	r1, [r3, #0]
 80081ec:	4608      	mov	r0, r1
 80081ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <__sfputs_r>:
 80081f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081f6:	4606      	mov	r6, r0
 80081f8:	460f      	mov	r7, r1
 80081fa:	4614      	mov	r4, r2
 80081fc:	18d5      	adds	r5, r2, r3
 80081fe:	42ac      	cmp	r4, r5
 8008200:	d101      	bne.n	8008206 <__sfputs_r+0x12>
 8008202:	2000      	movs	r0, #0
 8008204:	e007      	b.n	8008216 <__sfputs_r+0x22>
 8008206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800820a:	463a      	mov	r2, r7
 800820c:	4630      	mov	r0, r6
 800820e:	f7ff ffda 	bl	80081c6 <__sfputc_r>
 8008212:	1c43      	adds	r3, r0, #1
 8008214:	d1f3      	bne.n	80081fe <__sfputs_r+0xa>
 8008216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008218 <_vfiprintf_r>:
 8008218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800821c:	460d      	mov	r5, r1
 800821e:	b09d      	sub	sp, #116	@ 0x74
 8008220:	4614      	mov	r4, r2
 8008222:	4698      	mov	r8, r3
 8008224:	4606      	mov	r6, r0
 8008226:	b118      	cbz	r0, 8008230 <_vfiprintf_r+0x18>
 8008228:	6a03      	ldr	r3, [r0, #32]
 800822a:	b90b      	cbnz	r3, 8008230 <_vfiprintf_r+0x18>
 800822c:	f7fe f906 	bl	800643c <__sinit>
 8008230:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008232:	07d9      	lsls	r1, r3, #31
 8008234:	d405      	bmi.n	8008242 <_vfiprintf_r+0x2a>
 8008236:	89ab      	ldrh	r3, [r5, #12]
 8008238:	059a      	lsls	r2, r3, #22
 800823a:	d402      	bmi.n	8008242 <_vfiprintf_r+0x2a>
 800823c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800823e:	f7fe fa2e 	bl	800669e <__retarget_lock_acquire_recursive>
 8008242:	89ab      	ldrh	r3, [r5, #12]
 8008244:	071b      	lsls	r3, r3, #28
 8008246:	d501      	bpl.n	800824c <_vfiprintf_r+0x34>
 8008248:	692b      	ldr	r3, [r5, #16]
 800824a:	b99b      	cbnz	r3, 8008274 <_vfiprintf_r+0x5c>
 800824c:	4629      	mov	r1, r5
 800824e:	4630      	mov	r0, r6
 8008250:	f000 f938 	bl	80084c4 <__swsetup_r>
 8008254:	b170      	cbz	r0, 8008274 <_vfiprintf_r+0x5c>
 8008256:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008258:	07dc      	lsls	r4, r3, #31
 800825a:	d504      	bpl.n	8008266 <_vfiprintf_r+0x4e>
 800825c:	f04f 30ff 	mov.w	r0, #4294967295
 8008260:	b01d      	add	sp, #116	@ 0x74
 8008262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008266:	89ab      	ldrh	r3, [r5, #12]
 8008268:	0598      	lsls	r0, r3, #22
 800826a:	d4f7      	bmi.n	800825c <_vfiprintf_r+0x44>
 800826c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800826e:	f7fe fa17 	bl	80066a0 <__retarget_lock_release_recursive>
 8008272:	e7f3      	b.n	800825c <_vfiprintf_r+0x44>
 8008274:	2300      	movs	r3, #0
 8008276:	9309      	str	r3, [sp, #36]	@ 0x24
 8008278:	2320      	movs	r3, #32
 800827a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800827e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008282:	2330      	movs	r3, #48	@ 0x30
 8008284:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008434 <_vfiprintf_r+0x21c>
 8008288:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800828c:	f04f 0901 	mov.w	r9, #1
 8008290:	4623      	mov	r3, r4
 8008292:	469a      	mov	sl, r3
 8008294:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008298:	b10a      	cbz	r2, 800829e <_vfiprintf_r+0x86>
 800829a:	2a25      	cmp	r2, #37	@ 0x25
 800829c:	d1f9      	bne.n	8008292 <_vfiprintf_r+0x7a>
 800829e:	ebba 0b04 	subs.w	fp, sl, r4
 80082a2:	d00b      	beq.n	80082bc <_vfiprintf_r+0xa4>
 80082a4:	465b      	mov	r3, fp
 80082a6:	4622      	mov	r2, r4
 80082a8:	4629      	mov	r1, r5
 80082aa:	4630      	mov	r0, r6
 80082ac:	f7ff ffa2 	bl	80081f4 <__sfputs_r>
 80082b0:	3001      	adds	r0, #1
 80082b2:	f000 80a7 	beq.w	8008404 <_vfiprintf_r+0x1ec>
 80082b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082b8:	445a      	add	r2, fp
 80082ba:	9209      	str	r2, [sp, #36]	@ 0x24
 80082bc:	f89a 3000 	ldrb.w	r3, [sl]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 809f 	beq.w	8008404 <_vfiprintf_r+0x1ec>
 80082c6:	2300      	movs	r3, #0
 80082c8:	f04f 32ff 	mov.w	r2, #4294967295
 80082cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082d0:	f10a 0a01 	add.w	sl, sl, #1
 80082d4:	9304      	str	r3, [sp, #16]
 80082d6:	9307      	str	r3, [sp, #28]
 80082d8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80082dc:	931a      	str	r3, [sp, #104]	@ 0x68
 80082de:	4654      	mov	r4, sl
 80082e0:	2205      	movs	r2, #5
 80082e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082e6:	4853      	ldr	r0, [pc, #332]	@ (8008434 <_vfiprintf_r+0x21c>)
 80082e8:	f7f7 ff7a 	bl	80001e0 <memchr>
 80082ec:	9a04      	ldr	r2, [sp, #16]
 80082ee:	b9d8      	cbnz	r0, 8008328 <_vfiprintf_r+0x110>
 80082f0:	06d1      	lsls	r1, r2, #27
 80082f2:	bf44      	itt	mi
 80082f4:	2320      	movmi	r3, #32
 80082f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80082fa:	0713      	lsls	r3, r2, #28
 80082fc:	bf44      	itt	mi
 80082fe:	232b      	movmi	r3, #43	@ 0x2b
 8008300:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008304:	f89a 3000 	ldrb.w	r3, [sl]
 8008308:	2b2a      	cmp	r3, #42	@ 0x2a
 800830a:	d015      	beq.n	8008338 <_vfiprintf_r+0x120>
 800830c:	9a07      	ldr	r2, [sp, #28]
 800830e:	4654      	mov	r4, sl
 8008310:	2000      	movs	r0, #0
 8008312:	f04f 0c0a 	mov.w	ip, #10
 8008316:	4621      	mov	r1, r4
 8008318:	f811 3b01 	ldrb.w	r3, [r1], #1
 800831c:	3b30      	subs	r3, #48	@ 0x30
 800831e:	2b09      	cmp	r3, #9
 8008320:	d94b      	bls.n	80083ba <_vfiprintf_r+0x1a2>
 8008322:	b1b0      	cbz	r0, 8008352 <_vfiprintf_r+0x13a>
 8008324:	9207      	str	r2, [sp, #28]
 8008326:	e014      	b.n	8008352 <_vfiprintf_r+0x13a>
 8008328:	eba0 0308 	sub.w	r3, r0, r8
 800832c:	fa09 f303 	lsl.w	r3, r9, r3
 8008330:	4313      	orrs	r3, r2
 8008332:	9304      	str	r3, [sp, #16]
 8008334:	46a2      	mov	sl, r4
 8008336:	e7d2      	b.n	80082de <_vfiprintf_r+0xc6>
 8008338:	9b03      	ldr	r3, [sp, #12]
 800833a:	1d19      	adds	r1, r3, #4
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	9103      	str	r1, [sp, #12]
 8008340:	2b00      	cmp	r3, #0
 8008342:	bfbb      	ittet	lt
 8008344:	425b      	neglt	r3, r3
 8008346:	f042 0202 	orrlt.w	r2, r2, #2
 800834a:	9307      	strge	r3, [sp, #28]
 800834c:	9307      	strlt	r3, [sp, #28]
 800834e:	bfb8      	it	lt
 8008350:	9204      	strlt	r2, [sp, #16]
 8008352:	7823      	ldrb	r3, [r4, #0]
 8008354:	2b2e      	cmp	r3, #46	@ 0x2e
 8008356:	d10a      	bne.n	800836e <_vfiprintf_r+0x156>
 8008358:	7863      	ldrb	r3, [r4, #1]
 800835a:	2b2a      	cmp	r3, #42	@ 0x2a
 800835c:	d132      	bne.n	80083c4 <_vfiprintf_r+0x1ac>
 800835e:	9b03      	ldr	r3, [sp, #12]
 8008360:	1d1a      	adds	r2, r3, #4
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	9203      	str	r2, [sp, #12]
 8008366:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800836a:	3402      	adds	r4, #2
 800836c:	9305      	str	r3, [sp, #20]
 800836e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008444 <_vfiprintf_r+0x22c>
 8008372:	7821      	ldrb	r1, [r4, #0]
 8008374:	2203      	movs	r2, #3
 8008376:	4650      	mov	r0, sl
 8008378:	f7f7 ff32 	bl	80001e0 <memchr>
 800837c:	b138      	cbz	r0, 800838e <_vfiprintf_r+0x176>
 800837e:	9b04      	ldr	r3, [sp, #16]
 8008380:	eba0 000a 	sub.w	r0, r0, sl
 8008384:	2240      	movs	r2, #64	@ 0x40
 8008386:	4082      	lsls	r2, r0
 8008388:	4313      	orrs	r3, r2
 800838a:	3401      	adds	r4, #1
 800838c:	9304      	str	r3, [sp, #16]
 800838e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008392:	4829      	ldr	r0, [pc, #164]	@ (8008438 <_vfiprintf_r+0x220>)
 8008394:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008398:	2206      	movs	r2, #6
 800839a:	f7f7 ff21 	bl	80001e0 <memchr>
 800839e:	2800      	cmp	r0, #0
 80083a0:	d03f      	beq.n	8008422 <_vfiprintf_r+0x20a>
 80083a2:	4b26      	ldr	r3, [pc, #152]	@ (800843c <_vfiprintf_r+0x224>)
 80083a4:	bb1b      	cbnz	r3, 80083ee <_vfiprintf_r+0x1d6>
 80083a6:	9b03      	ldr	r3, [sp, #12]
 80083a8:	3307      	adds	r3, #7
 80083aa:	f023 0307 	bic.w	r3, r3, #7
 80083ae:	3308      	adds	r3, #8
 80083b0:	9303      	str	r3, [sp, #12]
 80083b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80083b4:	443b      	add	r3, r7
 80083b6:	9309      	str	r3, [sp, #36]	@ 0x24
 80083b8:	e76a      	b.n	8008290 <_vfiprintf_r+0x78>
 80083ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80083be:	460c      	mov	r4, r1
 80083c0:	2001      	movs	r0, #1
 80083c2:	e7a8      	b.n	8008316 <_vfiprintf_r+0xfe>
 80083c4:	2300      	movs	r3, #0
 80083c6:	3401      	adds	r4, #1
 80083c8:	9305      	str	r3, [sp, #20]
 80083ca:	4619      	mov	r1, r3
 80083cc:	f04f 0c0a 	mov.w	ip, #10
 80083d0:	4620      	mov	r0, r4
 80083d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083d6:	3a30      	subs	r2, #48	@ 0x30
 80083d8:	2a09      	cmp	r2, #9
 80083da:	d903      	bls.n	80083e4 <_vfiprintf_r+0x1cc>
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d0c6      	beq.n	800836e <_vfiprintf_r+0x156>
 80083e0:	9105      	str	r1, [sp, #20]
 80083e2:	e7c4      	b.n	800836e <_vfiprintf_r+0x156>
 80083e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80083e8:	4604      	mov	r4, r0
 80083ea:	2301      	movs	r3, #1
 80083ec:	e7f0      	b.n	80083d0 <_vfiprintf_r+0x1b8>
 80083ee:	ab03      	add	r3, sp, #12
 80083f0:	9300      	str	r3, [sp, #0]
 80083f2:	462a      	mov	r2, r5
 80083f4:	4b12      	ldr	r3, [pc, #72]	@ (8008440 <_vfiprintf_r+0x228>)
 80083f6:	a904      	add	r1, sp, #16
 80083f8:	4630      	mov	r0, r6
 80083fa:	f7fd fbdb 	bl	8005bb4 <_printf_float>
 80083fe:	4607      	mov	r7, r0
 8008400:	1c78      	adds	r0, r7, #1
 8008402:	d1d6      	bne.n	80083b2 <_vfiprintf_r+0x19a>
 8008404:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008406:	07d9      	lsls	r1, r3, #31
 8008408:	d405      	bmi.n	8008416 <_vfiprintf_r+0x1fe>
 800840a:	89ab      	ldrh	r3, [r5, #12]
 800840c:	059a      	lsls	r2, r3, #22
 800840e:	d402      	bmi.n	8008416 <_vfiprintf_r+0x1fe>
 8008410:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008412:	f7fe f945 	bl	80066a0 <__retarget_lock_release_recursive>
 8008416:	89ab      	ldrh	r3, [r5, #12]
 8008418:	065b      	lsls	r3, r3, #25
 800841a:	f53f af1f 	bmi.w	800825c <_vfiprintf_r+0x44>
 800841e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008420:	e71e      	b.n	8008260 <_vfiprintf_r+0x48>
 8008422:	ab03      	add	r3, sp, #12
 8008424:	9300      	str	r3, [sp, #0]
 8008426:	462a      	mov	r2, r5
 8008428:	4b05      	ldr	r3, [pc, #20]	@ (8008440 <_vfiprintf_r+0x228>)
 800842a:	a904      	add	r1, sp, #16
 800842c:	4630      	mov	r0, r6
 800842e:	f7fd fe59 	bl	80060e4 <_printf_i>
 8008432:	e7e4      	b.n	80083fe <_vfiprintf_r+0x1e6>
 8008434:	08009fb8 	.word	0x08009fb8
 8008438:	08009fc2 	.word	0x08009fc2
 800843c:	08005bb5 	.word	0x08005bb5
 8008440:	080081f5 	.word	0x080081f5
 8008444:	08009fbe 	.word	0x08009fbe

08008448 <__swbuf_r>:
 8008448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844a:	460e      	mov	r6, r1
 800844c:	4614      	mov	r4, r2
 800844e:	4605      	mov	r5, r0
 8008450:	b118      	cbz	r0, 800845a <__swbuf_r+0x12>
 8008452:	6a03      	ldr	r3, [r0, #32]
 8008454:	b90b      	cbnz	r3, 800845a <__swbuf_r+0x12>
 8008456:	f7fd fff1 	bl	800643c <__sinit>
 800845a:	69a3      	ldr	r3, [r4, #24]
 800845c:	60a3      	str	r3, [r4, #8]
 800845e:	89a3      	ldrh	r3, [r4, #12]
 8008460:	071a      	lsls	r2, r3, #28
 8008462:	d501      	bpl.n	8008468 <__swbuf_r+0x20>
 8008464:	6923      	ldr	r3, [r4, #16]
 8008466:	b943      	cbnz	r3, 800847a <__swbuf_r+0x32>
 8008468:	4621      	mov	r1, r4
 800846a:	4628      	mov	r0, r5
 800846c:	f000 f82a 	bl	80084c4 <__swsetup_r>
 8008470:	b118      	cbz	r0, 800847a <__swbuf_r+0x32>
 8008472:	f04f 37ff 	mov.w	r7, #4294967295
 8008476:	4638      	mov	r0, r7
 8008478:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800847a:	6823      	ldr	r3, [r4, #0]
 800847c:	6922      	ldr	r2, [r4, #16]
 800847e:	1a98      	subs	r0, r3, r2
 8008480:	6963      	ldr	r3, [r4, #20]
 8008482:	b2f6      	uxtb	r6, r6
 8008484:	4283      	cmp	r3, r0
 8008486:	4637      	mov	r7, r6
 8008488:	dc05      	bgt.n	8008496 <__swbuf_r+0x4e>
 800848a:	4621      	mov	r1, r4
 800848c:	4628      	mov	r0, r5
 800848e:	f7ff fdc1 	bl	8008014 <_fflush_r>
 8008492:	2800      	cmp	r0, #0
 8008494:	d1ed      	bne.n	8008472 <__swbuf_r+0x2a>
 8008496:	68a3      	ldr	r3, [r4, #8]
 8008498:	3b01      	subs	r3, #1
 800849a:	60a3      	str	r3, [r4, #8]
 800849c:	6823      	ldr	r3, [r4, #0]
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	6022      	str	r2, [r4, #0]
 80084a2:	701e      	strb	r6, [r3, #0]
 80084a4:	6962      	ldr	r2, [r4, #20]
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	429a      	cmp	r2, r3
 80084aa:	d004      	beq.n	80084b6 <__swbuf_r+0x6e>
 80084ac:	89a3      	ldrh	r3, [r4, #12]
 80084ae:	07db      	lsls	r3, r3, #31
 80084b0:	d5e1      	bpl.n	8008476 <__swbuf_r+0x2e>
 80084b2:	2e0a      	cmp	r6, #10
 80084b4:	d1df      	bne.n	8008476 <__swbuf_r+0x2e>
 80084b6:	4621      	mov	r1, r4
 80084b8:	4628      	mov	r0, r5
 80084ba:	f7ff fdab 	bl	8008014 <_fflush_r>
 80084be:	2800      	cmp	r0, #0
 80084c0:	d0d9      	beq.n	8008476 <__swbuf_r+0x2e>
 80084c2:	e7d6      	b.n	8008472 <__swbuf_r+0x2a>

080084c4 <__swsetup_r>:
 80084c4:	b538      	push	{r3, r4, r5, lr}
 80084c6:	4b29      	ldr	r3, [pc, #164]	@ (800856c <__swsetup_r+0xa8>)
 80084c8:	4605      	mov	r5, r0
 80084ca:	6818      	ldr	r0, [r3, #0]
 80084cc:	460c      	mov	r4, r1
 80084ce:	b118      	cbz	r0, 80084d8 <__swsetup_r+0x14>
 80084d0:	6a03      	ldr	r3, [r0, #32]
 80084d2:	b90b      	cbnz	r3, 80084d8 <__swsetup_r+0x14>
 80084d4:	f7fd ffb2 	bl	800643c <__sinit>
 80084d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084dc:	0719      	lsls	r1, r3, #28
 80084de:	d422      	bmi.n	8008526 <__swsetup_r+0x62>
 80084e0:	06da      	lsls	r2, r3, #27
 80084e2:	d407      	bmi.n	80084f4 <__swsetup_r+0x30>
 80084e4:	2209      	movs	r2, #9
 80084e6:	602a      	str	r2, [r5, #0]
 80084e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084ec:	81a3      	strh	r3, [r4, #12]
 80084ee:	f04f 30ff 	mov.w	r0, #4294967295
 80084f2:	e033      	b.n	800855c <__swsetup_r+0x98>
 80084f4:	0758      	lsls	r0, r3, #29
 80084f6:	d512      	bpl.n	800851e <__swsetup_r+0x5a>
 80084f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084fa:	b141      	cbz	r1, 800850e <__swsetup_r+0x4a>
 80084fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008500:	4299      	cmp	r1, r3
 8008502:	d002      	beq.n	800850a <__swsetup_r+0x46>
 8008504:	4628      	mov	r0, r5
 8008506:	f7fe ff27 	bl	8007358 <_free_r>
 800850a:	2300      	movs	r3, #0
 800850c:	6363      	str	r3, [r4, #52]	@ 0x34
 800850e:	89a3      	ldrh	r3, [r4, #12]
 8008510:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008514:	81a3      	strh	r3, [r4, #12]
 8008516:	2300      	movs	r3, #0
 8008518:	6063      	str	r3, [r4, #4]
 800851a:	6923      	ldr	r3, [r4, #16]
 800851c:	6023      	str	r3, [r4, #0]
 800851e:	89a3      	ldrh	r3, [r4, #12]
 8008520:	f043 0308 	orr.w	r3, r3, #8
 8008524:	81a3      	strh	r3, [r4, #12]
 8008526:	6923      	ldr	r3, [r4, #16]
 8008528:	b94b      	cbnz	r3, 800853e <__swsetup_r+0x7a>
 800852a:	89a3      	ldrh	r3, [r4, #12]
 800852c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008534:	d003      	beq.n	800853e <__swsetup_r+0x7a>
 8008536:	4621      	mov	r1, r4
 8008538:	4628      	mov	r0, r5
 800853a:	f000 f883 	bl	8008644 <__smakebuf_r>
 800853e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008542:	f013 0201 	ands.w	r2, r3, #1
 8008546:	d00a      	beq.n	800855e <__swsetup_r+0x9a>
 8008548:	2200      	movs	r2, #0
 800854a:	60a2      	str	r2, [r4, #8]
 800854c:	6962      	ldr	r2, [r4, #20]
 800854e:	4252      	negs	r2, r2
 8008550:	61a2      	str	r2, [r4, #24]
 8008552:	6922      	ldr	r2, [r4, #16]
 8008554:	b942      	cbnz	r2, 8008568 <__swsetup_r+0xa4>
 8008556:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800855a:	d1c5      	bne.n	80084e8 <__swsetup_r+0x24>
 800855c:	bd38      	pop	{r3, r4, r5, pc}
 800855e:	0799      	lsls	r1, r3, #30
 8008560:	bf58      	it	pl
 8008562:	6962      	ldrpl	r2, [r4, #20]
 8008564:	60a2      	str	r2, [r4, #8]
 8008566:	e7f4      	b.n	8008552 <__swsetup_r+0x8e>
 8008568:	2000      	movs	r0, #0
 800856a:	e7f7      	b.n	800855c <__swsetup_r+0x98>
 800856c:	2000002c 	.word	0x2000002c

08008570 <_raise_r>:
 8008570:	291f      	cmp	r1, #31
 8008572:	b538      	push	{r3, r4, r5, lr}
 8008574:	4605      	mov	r5, r0
 8008576:	460c      	mov	r4, r1
 8008578:	d904      	bls.n	8008584 <_raise_r+0x14>
 800857a:	2316      	movs	r3, #22
 800857c:	6003      	str	r3, [r0, #0]
 800857e:	f04f 30ff 	mov.w	r0, #4294967295
 8008582:	bd38      	pop	{r3, r4, r5, pc}
 8008584:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008586:	b112      	cbz	r2, 800858e <_raise_r+0x1e>
 8008588:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800858c:	b94b      	cbnz	r3, 80085a2 <_raise_r+0x32>
 800858e:	4628      	mov	r0, r5
 8008590:	f000 f830 	bl	80085f4 <_getpid_r>
 8008594:	4622      	mov	r2, r4
 8008596:	4601      	mov	r1, r0
 8008598:	4628      	mov	r0, r5
 800859a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800859e:	f000 b817 	b.w	80085d0 <_kill_r>
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d00a      	beq.n	80085bc <_raise_r+0x4c>
 80085a6:	1c59      	adds	r1, r3, #1
 80085a8:	d103      	bne.n	80085b2 <_raise_r+0x42>
 80085aa:	2316      	movs	r3, #22
 80085ac:	6003      	str	r3, [r0, #0]
 80085ae:	2001      	movs	r0, #1
 80085b0:	e7e7      	b.n	8008582 <_raise_r+0x12>
 80085b2:	2100      	movs	r1, #0
 80085b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80085b8:	4620      	mov	r0, r4
 80085ba:	4798      	blx	r3
 80085bc:	2000      	movs	r0, #0
 80085be:	e7e0      	b.n	8008582 <_raise_r+0x12>

080085c0 <raise>:
 80085c0:	4b02      	ldr	r3, [pc, #8]	@ (80085cc <raise+0xc>)
 80085c2:	4601      	mov	r1, r0
 80085c4:	6818      	ldr	r0, [r3, #0]
 80085c6:	f7ff bfd3 	b.w	8008570 <_raise_r>
 80085ca:	bf00      	nop
 80085cc:	2000002c 	.word	0x2000002c

080085d0 <_kill_r>:
 80085d0:	b538      	push	{r3, r4, r5, lr}
 80085d2:	4d07      	ldr	r5, [pc, #28]	@ (80085f0 <_kill_r+0x20>)
 80085d4:	2300      	movs	r3, #0
 80085d6:	4604      	mov	r4, r0
 80085d8:	4608      	mov	r0, r1
 80085da:	4611      	mov	r1, r2
 80085dc:	602b      	str	r3, [r5, #0]
 80085de:	f7f9 ff9b 	bl	8002518 <_kill>
 80085e2:	1c43      	adds	r3, r0, #1
 80085e4:	d102      	bne.n	80085ec <_kill_r+0x1c>
 80085e6:	682b      	ldr	r3, [r5, #0]
 80085e8:	b103      	cbz	r3, 80085ec <_kill_r+0x1c>
 80085ea:	6023      	str	r3, [r4, #0]
 80085ec:	bd38      	pop	{r3, r4, r5, pc}
 80085ee:	bf00      	nop
 80085f0:	20000a64 	.word	0x20000a64

080085f4 <_getpid_r>:
 80085f4:	f7f9 bf88 	b.w	8002508 <_getpid>

080085f8 <__swhatbuf_r>:
 80085f8:	b570      	push	{r4, r5, r6, lr}
 80085fa:	460c      	mov	r4, r1
 80085fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008600:	2900      	cmp	r1, #0
 8008602:	b096      	sub	sp, #88	@ 0x58
 8008604:	4615      	mov	r5, r2
 8008606:	461e      	mov	r6, r3
 8008608:	da0d      	bge.n	8008626 <__swhatbuf_r+0x2e>
 800860a:	89a3      	ldrh	r3, [r4, #12]
 800860c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008610:	f04f 0100 	mov.w	r1, #0
 8008614:	bf14      	ite	ne
 8008616:	2340      	movne	r3, #64	@ 0x40
 8008618:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800861c:	2000      	movs	r0, #0
 800861e:	6031      	str	r1, [r6, #0]
 8008620:	602b      	str	r3, [r5, #0]
 8008622:	b016      	add	sp, #88	@ 0x58
 8008624:	bd70      	pop	{r4, r5, r6, pc}
 8008626:	466a      	mov	r2, sp
 8008628:	f000 f848 	bl	80086bc <_fstat_r>
 800862c:	2800      	cmp	r0, #0
 800862e:	dbec      	blt.n	800860a <__swhatbuf_r+0x12>
 8008630:	9901      	ldr	r1, [sp, #4]
 8008632:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008636:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800863a:	4259      	negs	r1, r3
 800863c:	4159      	adcs	r1, r3
 800863e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008642:	e7eb      	b.n	800861c <__swhatbuf_r+0x24>

08008644 <__smakebuf_r>:
 8008644:	898b      	ldrh	r3, [r1, #12]
 8008646:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008648:	079d      	lsls	r5, r3, #30
 800864a:	4606      	mov	r6, r0
 800864c:	460c      	mov	r4, r1
 800864e:	d507      	bpl.n	8008660 <__smakebuf_r+0x1c>
 8008650:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008654:	6023      	str	r3, [r4, #0]
 8008656:	6123      	str	r3, [r4, #16]
 8008658:	2301      	movs	r3, #1
 800865a:	6163      	str	r3, [r4, #20]
 800865c:	b003      	add	sp, #12
 800865e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008660:	ab01      	add	r3, sp, #4
 8008662:	466a      	mov	r2, sp
 8008664:	f7ff ffc8 	bl	80085f8 <__swhatbuf_r>
 8008668:	9f00      	ldr	r7, [sp, #0]
 800866a:	4605      	mov	r5, r0
 800866c:	4639      	mov	r1, r7
 800866e:	4630      	mov	r0, r6
 8008670:	f7fe fee6 	bl	8007440 <_malloc_r>
 8008674:	b948      	cbnz	r0, 800868a <__smakebuf_r+0x46>
 8008676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800867a:	059a      	lsls	r2, r3, #22
 800867c:	d4ee      	bmi.n	800865c <__smakebuf_r+0x18>
 800867e:	f023 0303 	bic.w	r3, r3, #3
 8008682:	f043 0302 	orr.w	r3, r3, #2
 8008686:	81a3      	strh	r3, [r4, #12]
 8008688:	e7e2      	b.n	8008650 <__smakebuf_r+0xc>
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	6020      	str	r0, [r4, #0]
 800868e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008692:	81a3      	strh	r3, [r4, #12]
 8008694:	9b01      	ldr	r3, [sp, #4]
 8008696:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800869a:	b15b      	cbz	r3, 80086b4 <__smakebuf_r+0x70>
 800869c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086a0:	4630      	mov	r0, r6
 80086a2:	f000 f81d 	bl	80086e0 <_isatty_r>
 80086a6:	b128      	cbz	r0, 80086b4 <__smakebuf_r+0x70>
 80086a8:	89a3      	ldrh	r3, [r4, #12]
 80086aa:	f023 0303 	bic.w	r3, r3, #3
 80086ae:	f043 0301 	orr.w	r3, r3, #1
 80086b2:	81a3      	strh	r3, [r4, #12]
 80086b4:	89a3      	ldrh	r3, [r4, #12]
 80086b6:	431d      	orrs	r5, r3
 80086b8:	81a5      	strh	r5, [r4, #12]
 80086ba:	e7cf      	b.n	800865c <__smakebuf_r+0x18>

080086bc <_fstat_r>:
 80086bc:	b538      	push	{r3, r4, r5, lr}
 80086be:	4d07      	ldr	r5, [pc, #28]	@ (80086dc <_fstat_r+0x20>)
 80086c0:	2300      	movs	r3, #0
 80086c2:	4604      	mov	r4, r0
 80086c4:	4608      	mov	r0, r1
 80086c6:	4611      	mov	r1, r2
 80086c8:	602b      	str	r3, [r5, #0]
 80086ca:	f7f9 ff85 	bl	80025d8 <_fstat>
 80086ce:	1c43      	adds	r3, r0, #1
 80086d0:	d102      	bne.n	80086d8 <_fstat_r+0x1c>
 80086d2:	682b      	ldr	r3, [r5, #0]
 80086d4:	b103      	cbz	r3, 80086d8 <_fstat_r+0x1c>
 80086d6:	6023      	str	r3, [r4, #0]
 80086d8:	bd38      	pop	{r3, r4, r5, pc}
 80086da:	bf00      	nop
 80086dc:	20000a64 	.word	0x20000a64

080086e0 <_isatty_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4d06      	ldr	r5, [pc, #24]	@ (80086fc <_isatty_r+0x1c>)
 80086e4:	2300      	movs	r3, #0
 80086e6:	4604      	mov	r4, r0
 80086e8:	4608      	mov	r0, r1
 80086ea:	602b      	str	r3, [r5, #0]
 80086ec:	f7f9 ff84 	bl	80025f8 <_isatty>
 80086f0:	1c43      	adds	r3, r0, #1
 80086f2:	d102      	bne.n	80086fa <_isatty_r+0x1a>
 80086f4:	682b      	ldr	r3, [r5, #0]
 80086f6:	b103      	cbz	r3, 80086fa <_isatty_r+0x1a>
 80086f8:	6023      	str	r3, [r4, #0]
 80086fa:	bd38      	pop	{r3, r4, r5, pc}
 80086fc:	20000a64 	.word	0x20000a64

08008700 <pow>:
 8008700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008702:	ed2d 8b02 	vpush	{d8}
 8008706:	eeb0 8a40 	vmov.f32	s16, s0
 800870a:	eef0 8a60 	vmov.f32	s17, s1
 800870e:	ec55 4b11 	vmov	r4, r5, d1
 8008712:	f000 f871 	bl	80087f8 <__ieee754_pow>
 8008716:	4622      	mov	r2, r4
 8008718:	462b      	mov	r3, r5
 800871a:	4620      	mov	r0, r4
 800871c:	4629      	mov	r1, r5
 800871e:	ec57 6b10 	vmov	r6, r7, d0
 8008722:	f7f8 fa0b 	bl	8000b3c <__aeabi_dcmpun>
 8008726:	2800      	cmp	r0, #0
 8008728:	d13b      	bne.n	80087a2 <pow+0xa2>
 800872a:	ec51 0b18 	vmov	r0, r1, d8
 800872e:	2200      	movs	r2, #0
 8008730:	2300      	movs	r3, #0
 8008732:	f7f8 f9d1 	bl	8000ad8 <__aeabi_dcmpeq>
 8008736:	b1b8      	cbz	r0, 8008768 <pow+0x68>
 8008738:	2200      	movs	r2, #0
 800873a:	2300      	movs	r3, #0
 800873c:	4620      	mov	r0, r4
 800873e:	4629      	mov	r1, r5
 8008740:	f7f8 f9ca 	bl	8000ad8 <__aeabi_dcmpeq>
 8008744:	2800      	cmp	r0, #0
 8008746:	d146      	bne.n	80087d6 <pow+0xd6>
 8008748:	ec45 4b10 	vmov	d0, r4, r5
 800874c:	f000 f848 	bl	80087e0 <finite>
 8008750:	b338      	cbz	r0, 80087a2 <pow+0xa2>
 8008752:	2200      	movs	r2, #0
 8008754:	2300      	movs	r3, #0
 8008756:	4620      	mov	r0, r4
 8008758:	4629      	mov	r1, r5
 800875a:	f7f8 f9c7 	bl	8000aec <__aeabi_dcmplt>
 800875e:	b300      	cbz	r0, 80087a2 <pow+0xa2>
 8008760:	f7fd ff72 	bl	8006648 <__errno>
 8008764:	2322      	movs	r3, #34	@ 0x22
 8008766:	e01b      	b.n	80087a0 <pow+0xa0>
 8008768:	ec47 6b10 	vmov	d0, r6, r7
 800876c:	f000 f838 	bl	80087e0 <finite>
 8008770:	b9e0      	cbnz	r0, 80087ac <pow+0xac>
 8008772:	eeb0 0a48 	vmov.f32	s0, s16
 8008776:	eef0 0a68 	vmov.f32	s1, s17
 800877a:	f000 f831 	bl	80087e0 <finite>
 800877e:	b1a8      	cbz	r0, 80087ac <pow+0xac>
 8008780:	ec45 4b10 	vmov	d0, r4, r5
 8008784:	f000 f82c 	bl	80087e0 <finite>
 8008788:	b180      	cbz	r0, 80087ac <pow+0xac>
 800878a:	4632      	mov	r2, r6
 800878c:	463b      	mov	r3, r7
 800878e:	4630      	mov	r0, r6
 8008790:	4639      	mov	r1, r7
 8008792:	f7f8 f9d3 	bl	8000b3c <__aeabi_dcmpun>
 8008796:	2800      	cmp	r0, #0
 8008798:	d0e2      	beq.n	8008760 <pow+0x60>
 800879a:	f7fd ff55 	bl	8006648 <__errno>
 800879e:	2321      	movs	r3, #33	@ 0x21
 80087a0:	6003      	str	r3, [r0, #0]
 80087a2:	ecbd 8b02 	vpop	{d8}
 80087a6:	ec47 6b10 	vmov	d0, r6, r7
 80087aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087ac:	2200      	movs	r2, #0
 80087ae:	2300      	movs	r3, #0
 80087b0:	4630      	mov	r0, r6
 80087b2:	4639      	mov	r1, r7
 80087b4:	f7f8 f990 	bl	8000ad8 <__aeabi_dcmpeq>
 80087b8:	2800      	cmp	r0, #0
 80087ba:	d0f2      	beq.n	80087a2 <pow+0xa2>
 80087bc:	eeb0 0a48 	vmov.f32	s0, s16
 80087c0:	eef0 0a68 	vmov.f32	s1, s17
 80087c4:	f000 f80c 	bl	80087e0 <finite>
 80087c8:	2800      	cmp	r0, #0
 80087ca:	d0ea      	beq.n	80087a2 <pow+0xa2>
 80087cc:	ec45 4b10 	vmov	d0, r4, r5
 80087d0:	f000 f806 	bl	80087e0 <finite>
 80087d4:	e7c3      	b.n	800875e <pow+0x5e>
 80087d6:	4f01      	ldr	r7, [pc, #4]	@ (80087dc <pow+0xdc>)
 80087d8:	2600      	movs	r6, #0
 80087da:	e7e2      	b.n	80087a2 <pow+0xa2>
 80087dc:	3ff00000 	.word	0x3ff00000

080087e0 <finite>:
 80087e0:	b082      	sub	sp, #8
 80087e2:	ed8d 0b00 	vstr	d0, [sp]
 80087e6:	9801      	ldr	r0, [sp, #4]
 80087e8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 80087ec:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 80087f0:	0fc0      	lsrs	r0, r0, #31
 80087f2:	b002      	add	sp, #8
 80087f4:	4770      	bx	lr
	...

080087f8 <__ieee754_pow>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	b091      	sub	sp, #68	@ 0x44
 80087fe:	ed8d 1b00 	vstr	d1, [sp]
 8008802:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008806:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800880a:	ea5a 0001 	orrs.w	r0, sl, r1
 800880e:	ec57 6b10 	vmov	r6, r7, d0
 8008812:	d113      	bne.n	800883c <__ieee754_pow+0x44>
 8008814:	19b3      	adds	r3, r6, r6
 8008816:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800881a:	4152      	adcs	r2, r2
 800881c:	4298      	cmp	r0, r3
 800881e:	4b98      	ldr	r3, [pc, #608]	@ (8008a80 <__ieee754_pow+0x288>)
 8008820:	4193      	sbcs	r3, r2
 8008822:	f080 84ea 	bcs.w	80091fa <__ieee754_pow+0xa02>
 8008826:	e9dd 2300 	ldrd	r2, r3, [sp]
 800882a:	4630      	mov	r0, r6
 800882c:	4639      	mov	r1, r7
 800882e:	f7f7 fd35 	bl	800029c <__adddf3>
 8008832:	ec41 0b10 	vmov	d0, r0, r1
 8008836:	b011      	add	sp, #68	@ 0x44
 8008838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800883c:	4a91      	ldr	r2, [pc, #580]	@ (8008a84 <__ieee754_pow+0x28c>)
 800883e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008842:	4590      	cmp	r8, r2
 8008844:	463d      	mov	r5, r7
 8008846:	4633      	mov	r3, r6
 8008848:	d806      	bhi.n	8008858 <__ieee754_pow+0x60>
 800884a:	d101      	bne.n	8008850 <__ieee754_pow+0x58>
 800884c:	2e00      	cmp	r6, #0
 800884e:	d1ea      	bne.n	8008826 <__ieee754_pow+0x2e>
 8008850:	4592      	cmp	sl, r2
 8008852:	d801      	bhi.n	8008858 <__ieee754_pow+0x60>
 8008854:	d10e      	bne.n	8008874 <__ieee754_pow+0x7c>
 8008856:	b169      	cbz	r1, 8008874 <__ieee754_pow+0x7c>
 8008858:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800885c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008860:	431d      	orrs	r5, r3
 8008862:	d1e0      	bne.n	8008826 <__ieee754_pow+0x2e>
 8008864:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008868:	18db      	adds	r3, r3, r3
 800886a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800886e:	4152      	adcs	r2, r2
 8008870:	429d      	cmp	r5, r3
 8008872:	e7d4      	b.n	800881e <__ieee754_pow+0x26>
 8008874:	2d00      	cmp	r5, #0
 8008876:	46c3      	mov	fp, r8
 8008878:	da3a      	bge.n	80088f0 <__ieee754_pow+0xf8>
 800887a:	4a83      	ldr	r2, [pc, #524]	@ (8008a88 <__ieee754_pow+0x290>)
 800887c:	4592      	cmp	sl, r2
 800887e:	d84d      	bhi.n	800891c <__ieee754_pow+0x124>
 8008880:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008884:	4592      	cmp	sl, r2
 8008886:	f240 84c7 	bls.w	8009218 <__ieee754_pow+0xa20>
 800888a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800888e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008892:	2a14      	cmp	r2, #20
 8008894:	dd0f      	ble.n	80088b6 <__ieee754_pow+0xbe>
 8008896:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800889a:	fa21 f402 	lsr.w	r4, r1, r2
 800889e:	fa04 f202 	lsl.w	r2, r4, r2
 80088a2:	428a      	cmp	r2, r1
 80088a4:	f040 84b8 	bne.w	8009218 <__ieee754_pow+0xa20>
 80088a8:	f004 0401 	and.w	r4, r4, #1
 80088ac:	f1c4 0402 	rsb	r4, r4, #2
 80088b0:	2900      	cmp	r1, #0
 80088b2:	d158      	bne.n	8008966 <__ieee754_pow+0x16e>
 80088b4:	e00e      	b.n	80088d4 <__ieee754_pow+0xdc>
 80088b6:	2900      	cmp	r1, #0
 80088b8:	d154      	bne.n	8008964 <__ieee754_pow+0x16c>
 80088ba:	f1c2 0214 	rsb	r2, r2, #20
 80088be:	fa4a f402 	asr.w	r4, sl, r2
 80088c2:	fa04 f202 	lsl.w	r2, r4, r2
 80088c6:	4552      	cmp	r2, sl
 80088c8:	f040 84a3 	bne.w	8009212 <__ieee754_pow+0xa1a>
 80088cc:	f004 0401 	and.w	r4, r4, #1
 80088d0:	f1c4 0402 	rsb	r4, r4, #2
 80088d4:	4a6d      	ldr	r2, [pc, #436]	@ (8008a8c <__ieee754_pow+0x294>)
 80088d6:	4592      	cmp	sl, r2
 80088d8:	d12e      	bne.n	8008938 <__ieee754_pow+0x140>
 80088da:	f1b9 0f00 	cmp.w	r9, #0
 80088de:	f280 8494 	bge.w	800920a <__ieee754_pow+0xa12>
 80088e2:	496a      	ldr	r1, [pc, #424]	@ (8008a8c <__ieee754_pow+0x294>)
 80088e4:	4632      	mov	r2, r6
 80088e6:	463b      	mov	r3, r7
 80088e8:	2000      	movs	r0, #0
 80088ea:	f7f7 ffb7 	bl	800085c <__aeabi_ddiv>
 80088ee:	e7a0      	b.n	8008832 <__ieee754_pow+0x3a>
 80088f0:	2400      	movs	r4, #0
 80088f2:	bbc1      	cbnz	r1, 8008966 <__ieee754_pow+0x16e>
 80088f4:	4a63      	ldr	r2, [pc, #396]	@ (8008a84 <__ieee754_pow+0x28c>)
 80088f6:	4592      	cmp	sl, r2
 80088f8:	d1ec      	bne.n	80088d4 <__ieee754_pow+0xdc>
 80088fa:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 80088fe:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 8008902:	431a      	orrs	r2, r3
 8008904:	f000 8479 	beq.w	80091fa <__ieee754_pow+0xa02>
 8008908:	4b61      	ldr	r3, [pc, #388]	@ (8008a90 <__ieee754_pow+0x298>)
 800890a:	4598      	cmp	r8, r3
 800890c:	d908      	bls.n	8008920 <__ieee754_pow+0x128>
 800890e:	f1b9 0f00 	cmp.w	r9, #0
 8008912:	f2c0 8476 	blt.w	8009202 <__ieee754_pow+0xa0a>
 8008916:	e9dd 0100 	ldrd	r0, r1, [sp]
 800891a:	e78a      	b.n	8008832 <__ieee754_pow+0x3a>
 800891c:	2402      	movs	r4, #2
 800891e:	e7e8      	b.n	80088f2 <__ieee754_pow+0xfa>
 8008920:	f1b9 0f00 	cmp.w	r9, #0
 8008924:	f04f 0000 	mov.w	r0, #0
 8008928:	f04f 0100 	mov.w	r1, #0
 800892c:	da81      	bge.n	8008832 <__ieee754_pow+0x3a>
 800892e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8008932:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8008936:	e77c      	b.n	8008832 <__ieee754_pow+0x3a>
 8008938:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800893c:	d106      	bne.n	800894c <__ieee754_pow+0x154>
 800893e:	4632      	mov	r2, r6
 8008940:	463b      	mov	r3, r7
 8008942:	4630      	mov	r0, r6
 8008944:	4639      	mov	r1, r7
 8008946:	f7f7 fe5f 	bl	8000608 <__aeabi_dmul>
 800894a:	e772      	b.n	8008832 <__ieee754_pow+0x3a>
 800894c:	4a51      	ldr	r2, [pc, #324]	@ (8008a94 <__ieee754_pow+0x29c>)
 800894e:	4591      	cmp	r9, r2
 8008950:	d109      	bne.n	8008966 <__ieee754_pow+0x16e>
 8008952:	2d00      	cmp	r5, #0
 8008954:	db07      	blt.n	8008966 <__ieee754_pow+0x16e>
 8008956:	ec47 6b10 	vmov	d0, r6, r7
 800895a:	b011      	add	sp, #68	@ 0x44
 800895c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008960:	f000 bd52 	b.w	8009408 <__ieee754_sqrt>
 8008964:	2400      	movs	r4, #0
 8008966:	ec47 6b10 	vmov	d0, r6, r7
 800896a:	9302      	str	r3, [sp, #8]
 800896c:	f000 fc88 	bl	8009280 <fabs>
 8008970:	9b02      	ldr	r3, [sp, #8]
 8008972:	ec51 0b10 	vmov	r0, r1, d0
 8008976:	bb53      	cbnz	r3, 80089ce <__ieee754_pow+0x1d6>
 8008978:	4b44      	ldr	r3, [pc, #272]	@ (8008a8c <__ieee754_pow+0x294>)
 800897a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800897e:	429a      	cmp	r2, r3
 8008980:	d002      	beq.n	8008988 <__ieee754_pow+0x190>
 8008982:	f1b8 0f00 	cmp.w	r8, #0
 8008986:	d122      	bne.n	80089ce <__ieee754_pow+0x1d6>
 8008988:	f1b9 0f00 	cmp.w	r9, #0
 800898c:	da05      	bge.n	800899a <__ieee754_pow+0x1a2>
 800898e:	4602      	mov	r2, r0
 8008990:	460b      	mov	r3, r1
 8008992:	2000      	movs	r0, #0
 8008994:	493d      	ldr	r1, [pc, #244]	@ (8008a8c <__ieee754_pow+0x294>)
 8008996:	f7f7 ff61 	bl	800085c <__aeabi_ddiv>
 800899a:	2d00      	cmp	r5, #0
 800899c:	f6bf af49 	bge.w	8008832 <__ieee754_pow+0x3a>
 80089a0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80089a4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80089a8:	ea58 0804 	orrs.w	r8, r8, r4
 80089ac:	d108      	bne.n	80089c0 <__ieee754_pow+0x1c8>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	4610      	mov	r0, r2
 80089b4:	4619      	mov	r1, r3
 80089b6:	f7f7 fc6f 	bl	8000298 <__aeabi_dsub>
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	e794      	b.n	80088ea <__ieee754_pow+0xf2>
 80089c0:	2c01      	cmp	r4, #1
 80089c2:	f47f af36 	bne.w	8008832 <__ieee754_pow+0x3a>
 80089c6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80089ca:	4619      	mov	r1, r3
 80089cc:	e731      	b.n	8008832 <__ieee754_pow+0x3a>
 80089ce:	0feb      	lsrs	r3, r5, #31
 80089d0:	3b01      	subs	r3, #1
 80089d2:	ea53 0204 	orrs.w	r2, r3, r4
 80089d6:	d102      	bne.n	80089de <__ieee754_pow+0x1e6>
 80089d8:	4632      	mov	r2, r6
 80089da:	463b      	mov	r3, r7
 80089dc:	e7e9      	b.n	80089b2 <__ieee754_pow+0x1ba>
 80089de:	3c01      	subs	r4, #1
 80089e0:	431c      	orrs	r4, r3
 80089e2:	d016      	beq.n	8008a12 <__ieee754_pow+0x21a>
 80089e4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008a70 <__ieee754_pow+0x278>
 80089e8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 80089ec:	ed8d 7b02 	vstr	d7, [sp, #8]
 80089f0:	f240 8112 	bls.w	8008c18 <__ieee754_pow+0x420>
 80089f4:	4b28      	ldr	r3, [pc, #160]	@ (8008a98 <__ieee754_pow+0x2a0>)
 80089f6:	459a      	cmp	sl, r3
 80089f8:	4b25      	ldr	r3, [pc, #148]	@ (8008a90 <__ieee754_pow+0x298>)
 80089fa:	d916      	bls.n	8008a2a <__ieee754_pow+0x232>
 80089fc:	4598      	cmp	r8, r3
 80089fe:	d80b      	bhi.n	8008a18 <__ieee754_pow+0x220>
 8008a00:	f1b9 0f00 	cmp.w	r9, #0
 8008a04:	da0b      	bge.n	8008a1e <__ieee754_pow+0x226>
 8008a06:	2000      	movs	r0, #0
 8008a08:	b011      	add	sp, #68	@ 0x44
 8008a0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0e:	f000 bcf3 	b.w	80093f8 <__math_oflow>
 8008a12:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008a78 <__ieee754_pow+0x280>
 8008a16:	e7e7      	b.n	80089e8 <__ieee754_pow+0x1f0>
 8008a18:	f1b9 0f00 	cmp.w	r9, #0
 8008a1c:	dcf3      	bgt.n	8008a06 <__ieee754_pow+0x20e>
 8008a1e:	2000      	movs	r0, #0
 8008a20:	b011      	add	sp, #68	@ 0x44
 8008a22:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a26:	f000 bcdf 	b.w	80093e8 <__math_uflow>
 8008a2a:	4598      	cmp	r8, r3
 8008a2c:	d20c      	bcs.n	8008a48 <__ieee754_pow+0x250>
 8008a2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a32:	2200      	movs	r2, #0
 8008a34:	2300      	movs	r3, #0
 8008a36:	f7f8 f859 	bl	8000aec <__aeabi_dcmplt>
 8008a3a:	3800      	subs	r0, #0
 8008a3c:	bf18      	it	ne
 8008a3e:	2001      	movne	r0, #1
 8008a40:	f1b9 0f00 	cmp.w	r9, #0
 8008a44:	daec      	bge.n	8008a20 <__ieee754_pow+0x228>
 8008a46:	e7df      	b.n	8008a08 <__ieee754_pow+0x210>
 8008a48:	4b10      	ldr	r3, [pc, #64]	@ (8008a8c <__ieee754_pow+0x294>)
 8008a4a:	4598      	cmp	r8, r3
 8008a4c:	f04f 0200 	mov.w	r2, #0
 8008a50:	d924      	bls.n	8008a9c <__ieee754_pow+0x2a4>
 8008a52:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a56:	2300      	movs	r3, #0
 8008a58:	f7f8 f848 	bl	8000aec <__aeabi_dcmplt>
 8008a5c:	3800      	subs	r0, #0
 8008a5e:	bf18      	it	ne
 8008a60:	2001      	movne	r0, #1
 8008a62:	f1b9 0f00 	cmp.w	r9, #0
 8008a66:	dccf      	bgt.n	8008a08 <__ieee754_pow+0x210>
 8008a68:	e7da      	b.n	8008a20 <__ieee754_pow+0x228>
 8008a6a:	bf00      	nop
 8008a6c:	f3af 8000 	nop.w
 8008a70:	00000000 	.word	0x00000000
 8008a74:	3ff00000 	.word	0x3ff00000
 8008a78:	00000000 	.word	0x00000000
 8008a7c:	bff00000 	.word	0xbff00000
 8008a80:	fff00000 	.word	0xfff00000
 8008a84:	7ff00000 	.word	0x7ff00000
 8008a88:	433fffff 	.word	0x433fffff
 8008a8c:	3ff00000 	.word	0x3ff00000
 8008a90:	3fefffff 	.word	0x3fefffff
 8008a94:	3fe00000 	.word	0x3fe00000
 8008a98:	43f00000 	.word	0x43f00000
 8008a9c:	4b5a      	ldr	r3, [pc, #360]	@ (8008c08 <__ieee754_pow+0x410>)
 8008a9e:	f7f7 fbfb 	bl	8000298 <__aeabi_dsub>
 8008aa2:	a351      	add	r3, pc, #324	@ (adr r3, 8008be8 <__ieee754_pow+0x3f0>)
 8008aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	460d      	mov	r5, r1
 8008aac:	f7f7 fdac 	bl	8000608 <__aeabi_dmul>
 8008ab0:	a34f      	add	r3, pc, #316	@ (adr r3, 8008bf0 <__ieee754_pow+0x3f8>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	4606      	mov	r6, r0
 8008ab8:	460f      	mov	r7, r1
 8008aba:	4620      	mov	r0, r4
 8008abc:	4629      	mov	r1, r5
 8008abe:	f7f7 fda3 	bl	8000608 <__aeabi_dmul>
 8008ac2:	4b52      	ldr	r3, [pc, #328]	@ (8008c0c <__ieee754_pow+0x414>)
 8008ac4:	4682      	mov	sl, r0
 8008ac6:	468b      	mov	fp, r1
 8008ac8:	2200      	movs	r2, #0
 8008aca:	4620      	mov	r0, r4
 8008acc:	4629      	mov	r1, r5
 8008ace:	f7f7 fd9b 	bl	8000608 <__aeabi_dmul>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	460b      	mov	r3, r1
 8008ad6:	a148      	add	r1, pc, #288	@ (adr r1, 8008bf8 <__ieee754_pow+0x400>)
 8008ad8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008adc:	f7f7 fbdc 	bl	8000298 <__aeabi_dsub>
 8008ae0:	4622      	mov	r2, r4
 8008ae2:	462b      	mov	r3, r5
 8008ae4:	f7f7 fd90 	bl	8000608 <__aeabi_dmul>
 8008ae8:	4602      	mov	r2, r0
 8008aea:	460b      	mov	r3, r1
 8008aec:	2000      	movs	r0, #0
 8008aee:	4948      	ldr	r1, [pc, #288]	@ (8008c10 <__ieee754_pow+0x418>)
 8008af0:	f7f7 fbd2 	bl	8000298 <__aeabi_dsub>
 8008af4:	4622      	mov	r2, r4
 8008af6:	4680      	mov	r8, r0
 8008af8:	4689      	mov	r9, r1
 8008afa:	462b      	mov	r3, r5
 8008afc:	4620      	mov	r0, r4
 8008afe:	4629      	mov	r1, r5
 8008b00:	f7f7 fd82 	bl	8000608 <__aeabi_dmul>
 8008b04:	4602      	mov	r2, r0
 8008b06:	460b      	mov	r3, r1
 8008b08:	4640      	mov	r0, r8
 8008b0a:	4649      	mov	r1, r9
 8008b0c:	f7f7 fd7c 	bl	8000608 <__aeabi_dmul>
 8008b10:	a33b      	add	r3, pc, #236	@ (adr r3, 8008c00 <__ieee754_pow+0x408>)
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	f7f7 fd77 	bl	8000608 <__aeabi_dmul>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	4650      	mov	r0, sl
 8008b20:	4659      	mov	r1, fp
 8008b22:	f7f7 fbb9 	bl	8000298 <__aeabi_dsub>
 8008b26:	4602      	mov	r2, r0
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4680      	mov	r8, r0
 8008b2c:	4689      	mov	r9, r1
 8008b2e:	4630      	mov	r0, r6
 8008b30:	4639      	mov	r1, r7
 8008b32:	f7f7 fbb3 	bl	800029c <__adddf3>
 8008b36:	2400      	movs	r4, #0
 8008b38:	4632      	mov	r2, r6
 8008b3a:	463b      	mov	r3, r7
 8008b3c:	4620      	mov	r0, r4
 8008b3e:	460d      	mov	r5, r1
 8008b40:	f7f7 fbaa 	bl	8000298 <__aeabi_dsub>
 8008b44:	4602      	mov	r2, r0
 8008b46:	460b      	mov	r3, r1
 8008b48:	4640      	mov	r0, r8
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	f7f7 fba4 	bl	8000298 <__aeabi_dsub>
 8008b50:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b54:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008b58:	2300      	movs	r3, #0
 8008b5a:	9304      	str	r3, [sp, #16]
 8008b5c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008b60:	4606      	mov	r6, r0
 8008b62:	460f      	mov	r7, r1
 8008b64:	4652      	mov	r2, sl
 8008b66:	465b      	mov	r3, fp
 8008b68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b6c:	f7f7 fb94 	bl	8000298 <__aeabi_dsub>
 8008b70:	4622      	mov	r2, r4
 8008b72:	462b      	mov	r3, r5
 8008b74:	f7f7 fd48 	bl	8000608 <__aeabi_dmul>
 8008b78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b7c:	4680      	mov	r8, r0
 8008b7e:	4689      	mov	r9, r1
 8008b80:	4630      	mov	r0, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	f7f7 fd40 	bl	8000608 <__aeabi_dmul>
 8008b88:	4602      	mov	r2, r0
 8008b8a:	460b      	mov	r3, r1
 8008b8c:	4640      	mov	r0, r8
 8008b8e:	4649      	mov	r1, r9
 8008b90:	f7f7 fb84 	bl	800029c <__adddf3>
 8008b94:	4652      	mov	r2, sl
 8008b96:	465b      	mov	r3, fp
 8008b98:	4606      	mov	r6, r0
 8008b9a:	460f      	mov	r7, r1
 8008b9c:	4620      	mov	r0, r4
 8008b9e:	4629      	mov	r1, r5
 8008ba0:	f7f7 fd32 	bl	8000608 <__aeabi_dmul>
 8008ba4:	460b      	mov	r3, r1
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	4680      	mov	r8, r0
 8008baa:	4689      	mov	r9, r1
 8008bac:	4630      	mov	r0, r6
 8008bae:	4639      	mov	r1, r7
 8008bb0:	f7f7 fb74 	bl	800029c <__adddf3>
 8008bb4:	4b17      	ldr	r3, [pc, #92]	@ (8008c14 <__ieee754_pow+0x41c>)
 8008bb6:	4299      	cmp	r1, r3
 8008bb8:	4604      	mov	r4, r0
 8008bba:	460d      	mov	r5, r1
 8008bbc:	468a      	mov	sl, r1
 8008bbe:	468b      	mov	fp, r1
 8008bc0:	f340 82ef 	ble.w	80091a2 <__ieee754_pow+0x9aa>
 8008bc4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008bc8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8008bcc:	4303      	orrs	r3, r0
 8008bce:	f000 81e8 	beq.w	8008fa2 <__ieee754_pow+0x7aa>
 8008bd2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008bd6:	2200      	movs	r2, #0
 8008bd8:	2300      	movs	r3, #0
 8008bda:	f7f7 ff87 	bl	8000aec <__aeabi_dcmplt>
 8008bde:	3800      	subs	r0, #0
 8008be0:	bf18      	it	ne
 8008be2:	2001      	movne	r0, #1
 8008be4:	e710      	b.n	8008a08 <__ieee754_pow+0x210>
 8008be6:	bf00      	nop
 8008be8:	60000000 	.word	0x60000000
 8008bec:	3ff71547 	.word	0x3ff71547
 8008bf0:	f85ddf44 	.word	0xf85ddf44
 8008bf4:	3e54ae0b 	.word	0x3e54ae0b
 8008bf8:	55555555 	.word	0x55555555
 8008bfc:	3fd55555 	.word	0x3fd55555
 8008c00:	652b82fe 	.word	0x652b82fe
 8008c04:	3ff71547 	.word	0x3ff71547
 8008c08:	3ff00000 	.word	0x3ff00000
 8008c0c:	3fd00000 	.word	0x3fd00000
 8008c10:	3fe00000 	.word	0x3fe00000
 8008c14:	408fffff 	.word	0x408fffff
 8008c18:	4bd5      	ldr	r3, [pc, #852]	@ (8008f70 <__ieee754_pow+0x778>)
 8008c1a:	402b      	ands	r3, r5
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	b92b      	cbnz	r3, 8008c2c <__ieee754_pow+0x434>
 8008c20:	4bd4      	ldr	r3, [pc, #848]	@ (8008f74 <__ieee754_pow+0x77c>)
 8008c22:	f7f7 fcf1 	bl	8000608 <__aeabi_dmul>
 8008c26:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8008c2a:	468b      	mov	fp, r1
 8008c2c:	ea4f 532b 	mov.w	r3, fp, asr #20
 8008c30:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 8008c34:	4413      	add	r3, r2
 8008c36:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c38:	4bcf      	ldr	r3, [pc, #828]	@ (8008f78 <__ieee754_pow+0x780>)
 8008c3a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8008c3e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 8008c42:	459b      	cmp	fp, r3
 8008c44:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008c48:	dd08      	ble.n	8008c5c <__ieee754_pow+0x464>
 8008c4a:	4bcc      	ldr	r3, [pc, #816]	@ (8008f7c <__ieee754_pow+0x784>)
 8008c4c:	459b      	cmp	fp, r3
 8008c4e:	f340 81a5 	ble.w	8008f9c <__ieee754_pow+0x7a4>
 8008c52:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c54:	3301      	adds	r3, #1
 8008c56:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c58:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8008c5c:	f04f 0a00 	mov.w	sl, #0
 8008c60:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008c64:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c66:	4bc6      	ldr	r3, [pc, #792]	@ (8008f80 <__ieee754_pow+0x788>)
 8008c68:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008c6c:	ed93 7b00 	vldr	d7, [r3]
 8008c70:	4629      	mov	r1, r5
 8008c72:	ec53 2b17 	vmov	r2, r3, d7
 8008c76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008c7a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008c7e:	f7f7 fb0b 	bl	8000298 <__aeabi_dsub>
 8008c82:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008c86:	4606      	mov	r6, r0
 8008c88:	460f      	mov	r7, r1
 8008c8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c8e:	f7f7 fb05 	bl	800029c <__adddf3>
 8008c92:	4602      	mov	r2, r0
 8008c94:	460b      	mov	r3, r1
 8008c96:	2000      	movs	r0, #0
 8008c98:	49ba      	ldr	r1, [pc, #744]	@ (8008f84 <__ieee754_pow+0x78c>)
 8008c9a:	f7f7 fddf 	bl	800085c <__aeabi_ddiv>
 8008c9e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008ca2:	4602      	mov	r2, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	4630      	mov	r0, r6
 8008ca8:	4639      	mov	r1, r7
 8008caa:	f7f7 fcad 	bl	8000608 <__aeabi_dmul>
 8008cae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008cb2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008cb6:	106d      	asrs	r5, r5, #1
 8008cb8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 8008cbc:	f04f 0b00 	mov.w	fp, #0
 8008cc0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008cc4:	4661      	mov	r1, ip
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8008ccc:	4658      	mov	r0, fp
 8008cce:	46e1      	mov	r9, ip
 8008cd0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	461d      	mov	r5, r3
 8008cd8:	f7f7 fc96 	bl	8000608 <__aeabi_dmul>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	4630      	mov	r0, r6
 8008ce2:	4639      	mov	r1, r7
 8008ce4:	f7f7 fad8 	bl	8000298 <__aeabi_dsub>
 8008ce8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008cec:	4606      	mov	r6, r0
 8008cee:	460f      	mov	r7, r1
 8008cf0:	4620      	mov	r0, r4
 8008cf2:	4629      	mov	r1, r5
 8008cf4:	f7f7 fad0 	bl	8000298 <__aeabi_dsub>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	460b      	mov	r3, r1
 8008cfc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d00:	f7f7 faca 	bl	8000298 <__aeabi_dsub>
 8008d04:	465a      	mov	r2, fp
 8008d06:	464b      	mov	r3, r9
 8008d08:	f7f7 fc7e 	bl	8000608 <__aeabi_dmul>
 8008d0c:	4602      	mov	r2, r0
 8008d0e:	460b      	mov	r3, r1
 8008d10:	4630      	mov	r0, r6
 8008d12:	4639      	mov	r1, r7
 8008d14:	f7f7 fac0 	bl	8000298 <__aeabi_dsub>
 8008d18:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008d1c:	f7f7 fc74 	bl	8000608 <__aeabi_dmul>
 8008d20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008d28:	4610      	mov	r0, r2
 8008d2a:	4619      	mov	r1, r3
 8008d2c:	f7f7 fc6c 	bl	8000608 <__aeabi_dmul>
 8008d30:	a37d      	add	r3, pc, #500	@ (adr r3, 8008f28 <__ieee754_pow+0x730>)
 8008d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d36:	4604      	mov	r4, r0
 8008d38:	460d      	mov	r5, r1
 8008d3a:	f7f7 fc65 	bl	8000608 <__aeabi_dmul>
 8008d3e:	a37c      	add	r3, pc, #496	@ (adr r3, 8008f30 <__ieee754_pow+0x738>)
 8008d40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d44:	f7f7 faaa 	bl	800029c <__adddf3>
 8008d48:	4622      	mov	r2, r4
 8008d4a:	462b      	mov	r3, r5
 8008d4c:	f7f7 fc5c 	bl	8000608 <__aeabi_dmul>
 8008d50:	a379      	add	r3, pc, #484	@ (adr r3, 8008f38 <__ieee754_pow+0x740>)
 8008d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d56:	f7f7 faa1 	bl	800029c <__adddf3>
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	462b      	mov	r3, r5
 8008d5e:	f7f7 fc53 	bl	8000608 <__aeabi_dmul>
 8008d62:	a377      	add	r3, pc, #476	@ (adr r3, 8008f40 <__ieee754_pow+0x748>)
 8008d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d68:	f7f7 fa98 	bl	800029c <__adddf3>
 8008d6c:	4622      	mov	r2, r4
 8008d6e:	462b      	mov	r3, r5
 8008d70:	f7f7 fc4a 	bl	8000608 <__aeabi_dmul>
 8008d74:	a374      	add	r3, pc, #464	@ (adr r3, 8008f48 <__ieee754_pow+0x750>)
 8008d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d7a:	f7f7 fa8f 	bl	800029c <__adddf3>
 8008d7e:	4622      	mov	r2, r4
 8008d80:	462b      	mov	r3, r5
 8008d82:	f7f7 fc41 	bl	8000608 <__aeabi_dmul>
 8008d86:	a372      	add	r3, pc, #456	@ (adr r3, 8008f50 <__ieee754_pow+0x758>)
 8008d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d8c:	f7f7 fa86 	bl	800029c <__adddf3>
 8008d90:	4622      	mov	r2, r4
 8008d92:	4606      	mov	r6, r0
 8008d94:	460f      	mov	r7, r1
 8008d96:	462b      	mov	r3, r5
 8008d98:	4620      	mov	r0, r4
 8008d9a:	4629      	mov	r1, r5
 8008d9c:	f7f7 fc34 	bl	8000608 <__aeabi_dmul>
 8008da0:	4602      	mov	r2, r0
 8008da2:	460b      	mov	r3, r1
 8008da4:	4630      	mov	r0, r6
 8008da6:	4639      	mov	r1, r7
 8008da8:	f7f7 fc2e 	bl	8000608 <__aeabi_dmul>
 8008dac:	465a      	mov	r2, fp
 8008dae:	4604      	mov	r4, r0
 8008db0:	460d      	mov	r5, r1
 8008db2:	464b      	mov	r3, r9
 8008db4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008db8:	f7f7 fa70 	bl	800029c <__adddf3>
 8008dbc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008dc0:	f7f7 fc22 	bl	8000608 <__aeabi_dmul>
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	462b      	mov	r3, r5
 8008dc8:	f7f7 fa68 	bl	800029c <__adddf3>
 8008dcc:	465a      	mov	r2, fp
 8008dce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008dd2:	464b      	mov	r3, r9
 8008dd4:	4658      	mov	r0, fp
 8008dd6:	4649      	mov	r1, r9
 8008dd8:	f7f7 fc16 	bl	8000608 <__aeabi_dmul>
 8008ddc:	4b6a      	ldr	r3, [pc, #424]	@ (8008f88 <__ieee754_pow+0x790>)
 8008dde:	2200      	movs	r2, #0
 8008de0:	4606      	mov	r6, r0
 8008de2:	460f      	mov	r7, r1
 8008de4:	f7f7 fa5a 	bl	800029c <__adddf3>
 8008de8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008dec:	f7f7 fa56 	bl	800029c <__adddf3>
 8008df0:	46d8      	mov	r8, fp
 8008df2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008df6:	460d      	mov	r5, r1
 8008df8:	465a      	mov	r2, fp
 8008dfa:	460b      	mov	r3, r1
 8008dfc:	4640      	mov	r0, r8
 8008dfe:	4649      	mov	r1, r9
 8008e00:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 8008e04:	f7f7 fc00 	bl	8000608 <__aeabi_dmul>
 8008e08:	465c      	mov	r4, fp
 8008e0a:	4680      	mov	r8, r0
 8008e0c:	4689      	mov	r9, r1
 8008e0e:	4b5e      	ldr	r3, [pc, #376]	@ (8008f88 <__ieee754_pow+0x790>)
 8008e10:	2200      	movs	r2, #0
 8008e12:	4620      	mov	r0, r4
 8008e14:	4629      	mov	r1, r5
 8008e16:	f7f7 fa3f 	bl	8000298 <__aeabi_dsub>
 8008e1a:	4632      	mov	r2, r6
 8008e1c:	463b      	mov	r3, r7
 8008e1e:	f7f7 fa3b 	bl	8000298 <__aeabi_dsub>
 8008e22:	4602      	mov	r2, r0
 8008e24:	460b      	mov	r3, r1
 8008e26:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008e2a:	f7f7 fa35 	bl	8000298 <__aeabi_dsub>
 8008e2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e32:	f7f7 fbe9 	bl	8000608 <__aeabi_dmul>
 8008e36:	4622      	mov	r2, r4
 8008e38:	4606      	mov	r6, r0
 8008e3a:	460f      	mov	r7, r1
 8008e3c:	462b      	mov	r3, r5
 8008e3e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008e42:	f7f7 fbe1 	bl	8000608 <__aeabi_dmul>
 8008e46:	4602      	mov	r2, r0
 8008e48:	460b      	mov	r3, r1
 8008e4a:	4630      	mov	r0, r6
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	f7f7 fa25 	bl	800029c <__adddf3>
 8008e52:	4606      	mov	r6, r0
 8008e54:	460f      	mov	r7, r1
 8008e56:	4602      	mov	r2, r0
 8008e58:	460b      	mov	r3, r1
 8008e5a:	4640      	mov	r0, r8
 8008e5c:	4649      	mov	r1, r9
 8008e5e:	f7f7 fa1d 	bl	800029c <__adddf3>
 8008e62:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008e66:	a33c      	add	r3, pc, #240	@ (adr r3, 8008f58 <__ieee754_pow+0x760>)
 8008e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e6c:	4658      	mov	r0, fp
 8008e6e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008e72:	460d      	mov	r5, r1
 8008e74:	f7f7 fbc8 	bl	8000608 <__aeabi_dmul>
 8008e78:	465c      	mov	r4, fp
 8008e7a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008e7e:	4642      	mov	r2, r8
 8008e80:	464b      	mov	r3, r9
 8008e82:	4620      	mov	r0, r4
 8008e84:	4629      	mov	r1, r5
 8008e86:	f7f7 fa07 	bl	8000298 <__aeabi_dsub>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	460b      	mov	r3, r1
 8008e8e:	4630      	mov	r0, r6
 8008e90:	4639      	mov	r1, r7
 8008e92:	f7f7 fa01 	bl	8000298 <__aeabi_dsub>
 8008e96:	a332      	add	r3, pc, #200	@ (adr r3, 8008f60 <__ieee754_pow+0x768>)
 8008e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9c:	f7f7 fbb4 	bl	8000608 <__aeabi_dmul>
 8008ea0:	a331      	add	r3, pc, #196	@ (adr r3, 8008f68 <__ieee754_pow+0x770>)
 8008ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea6:	4606      	mov	r6, r0
 8008ea8:	460f      	mov	r7, r1
 8008eaa:	4620      	mov	r0, r4
 8008eac:	4629      	mov	r1, r5
 8008eae:	f7f7 fbab 	bl	8000608 <__aeabi_dmul>
 8008eb2:	4602      	mov	r2, r0
 8008eb4:	460b      	mov	r3, r1
 8008eb6:	4630      	mov	r0, r6
 8008eb8:	4639      	mov	r1, r7
 8008eba:	f7f7 f9ef 	bl	800029c <__adddf3>
 8008ebe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ec0:	4b32      	ldr	r3, [pc, #200]	@ (8008f8c <__ieee754_pow+0x794>)
 8008ec2:	4413      	add	r3, r2
 8008ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ec8:	f7f7 f9e8 	bl	800029c <__adddf3>
 8008ecc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008ed0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008ed2:	f7f7 fb2f 	bl	8000534 <__aeabi_i2d>
 8008ed6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008ed8:	4b2d      	ldr	r3, [pc, #180]	@ (8008f90 <__ieee754_pow+0x798>)
 8008eda:	4413      	add	r3, r2
 8008edc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008ee0:	4606      	mov	r6, r0
 8008ee2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008ee6:	460f      	mov	r7, r1
 8008ee8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eec:	f7f7 f9d6 	bl	800029c <__adddf3>
 8008ef0:	4642      	mov	r2, r8
 8008ef2:	464b      	mov	r3, r9
 8008ef4:	f7f7 f9d2 	bl	800029c <__adddf3>
 8008ef8:	4632      	mov	r2, r6
 8008efa:	463b      	mov	r3, r7
 8008efc:	f7f7 f9ce 	bl	800029c <__adddf3>
 8008f00:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008f04:	4632      	mov	r2, r6
 8008f06:	463b      	mov	r3, r7
 8008f08:	4658      	mov	r0, fp
 8008f0a:	460d      	mov	r5, r1
 8008f0c:	f7f7 f9c4 	bl	8000298 <__aeabi_dsub>
 8008f10:	4642      	mov	r2, r8
 8008f12:	464b      	mov	r3, r9
 8008f14:	f7f7 f9c0 	bl	8000298 <__aeabi_dsub>
 8008f18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008f1c:	f7f7 f9bc 	bl	8000298 <__aeabi_dsub>
 8008f20:	465c      	mov	r4, fp
 8008f22:	4602      	mov	r2, r0
 8008f24:	e036      	b.n	8008f94 <__ieee754_pow+0x79c>
 8008f26:	bf00      	nop
 8008f28:	4a454eef 	.word	0x4a454eef
 8008f2c:	3fca7e28 	.word	0x3fca7e28
 8008f30:	93c9db65 	.word	0x93c9db65
 8008f34:	3fcd864a 	.word	0x3fcd864a
 8008f38:	a91d4101 	.word	0xa91d4101
 8008f3c:	3fd17460 	.word	0x3fd17460
 8008f40:	518f264d 	.word	0x518f264d
 8008f44:	3fd55555 	.word	0x3fd55555
 8008f48:	db6fabff 	.word	0xdb6fabff
 8008f4c:	3fdb6db6 	.word	0x3fdb6db6
 8008f50:	33333303 	.word	0x33333303
 8008f54:	3fe33333 	.word	0x3fe33333
 8008f58:	e0000000 	.word	0xe0000000
 8008f5c:	3feec709 	.word	0x3feec709
 8008f60:	dc3a03fd 	.word	0xdc3a03fd
 8008f64:	3feec709 	.word	0x3feec709
 8008f68:	145b01f5 	.word	0x145b01f5
 8008f6c:	be3e2fe0 	.word	0xbe3e2fe0
 8008f70:	7ff00000 	.word	0x7ff00000
 8008f74:	43400000 	.word	0x43400000
 8008f78:	0003988e 	.word	0x0003988e
 8008f7c:	000bb679 	.word	0x000bb679
 8008f80:	0800a130 	.word	0x0800a130
 8008f84:	3ff00000 	.word	0x3ff00000
 8008f88:	40080000 	.word	0x40080000
 8008f8c:	0800a110 	.word	0x0800a110
 8008f90:	0800a120 	.word	0x0800a120
 8008f94:	460b      	mov	r3, r1
 8008f96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f9a:	e5d7      	b.n	8008b4c <__ieee754_pow+0x354>
 8008f9c:	f04f 0a01 	mov.w	sl, #1
 8008fa0:	e65e      	b.n	8008c60 <__ieee754_pow+0x468>
 8008fa2:	a3b4      	add	r3, pc, #720	@ (adr r3, 8009274 <__ieee754_pow+0xa7c>)
 8008fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fa8:	4630      	mov	r0, r6
 8008faa:	4639      	mov	r1, r7
 8008fac:	f7f7 f976 	bl	800029c <__adddf3>
 8008fb0:	4642      	mov	r2, r8
 8008fb2:	e9cd 0100 	strd	r0, r1, [sp]
 8008fb6:	464b      	mov	r3, r9
 8008fb8:	4620      	mov	r0, r4
 8008fba:	4629      	mov	r1, r5
 8008fbc:	f7f7 f96c 	bl	8000298 <__aeabi_dsub>
 8008fc0:	4602      	mov	r2, r0
 8008fc2:	460b      	mov	r3, r1
 8008fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008fc8:	f7f7 fdae 	bl	8000b28 <__aeabi_dcmpgt>
 8008fcc:	2800      	cmp	r0, #0
 8008fce:	f47f ae00 	bne.w	8008bd2 <__ieee754_pow+0x3da>
 8008fd2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008fd6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008fda:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008fde:	fa43 fa0a 	asr.w	sl, r3, sl
 8008fe2:	44da      	add	sl, fp
 8008fe4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008fe8:	489d      	ldr	r0, [pc, #628]	@ (8009260 <__ieee754_pow+0xa68>)
 8008fea:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008fee:	4108      	asrs	r0, r1
 8008ff0:	ea00 030a 	and.w	r3, r0, sl
 8008ff4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008ff8:	f1c1 0114 	rsb	r1, r1, #20
 8008ffc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009000:	fa4a fa01 	asr.w	sl, sl, r1
 8009004:	f1bb 0f00 	cmp.w	fp, #0
 8009008:	4640      	mov	r0, r8
 800900a:	4649      	mov	r1, r9
 800900c:	f04f 0200 	mov.w	r2, #0
 8009010:	bfb8      	it	lt
 8009012:	f1ca 0a00 	rsblt	sl, sl, #0
 8009016:	f7f7 f93f 	bl	8000298 <__aeabi_dsub>
 800901a:	4680      	mov	r8, r0
 800901c:	4689      	mov	r9, r1
 800901e:	4632      	mov	r2, r6
 8009020:	463b      	mov	r3, r7
 8009022:	4640      	mov	r0, r8
 8009024:	4649      	mov	r1, r9
 8009026:	f7f7 f939 	bl	800029c <__adddf3>
 800902a:	2400      	movs	r4, #0
 800902c:	a37c      	add	r3, pc, #496	@ (adr r3, 8009220 <__ieee754_pow+0xa28>)
 800902e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009032:	4620      	mov	r0, r4
 8009034:	460d      	mov	r5, r1
 8009036:	f7f7 fae7 	bl	8000608 <__aeabi_dmul>
 800903a:	4642      	mov	r2, r8
 800903c:	e9cd 0100 	strd	r0, r1, [sp]
 8009040:	464b      	mov	r3, r9
 8009042:	4620      	mov	r0, r4
 8009044:	4629      	mov	r1, r5
 8009046:	f7f7 f927 	bl	8000298 <__aeabi_dsub>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4630      	mov	r0, r6
 8009050:	4639      	mov	r1, r7
 8009052:	f7f7 f921 	bl	8000298 <__aeabi_dsub>
 8009056:	a374      	add	r3, pc, #464	@ (adr r3, 8009228 <__ieee754_pow+0xa30>)
 8009058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800905c:	f7f7 fad4 	bl	8000608 <__aeabi_dmul>
 8009060:	a373      	add	r3, pc, #460	@ (adr r3, 8009230 <__ieee754_pow+0xa38>)
 8009062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009066:	4680      	mov	r8, r0
 8009068:	4689      	mov	r9, r1
 800906a:	4620      	mov	r0, r4
 800906c:	4629      	mov	r1, r5
 800906e:	f7f7 facb 	bl	8000608 <__aeabi_dmul>
 8009072:	4602      	mov	r2, r0
 8009074:	460b      	mov	r3, r1
 8009076:	4640      	mov	r0, r8
 8009078:	4649      	mov	r1, r9
 800907a:	f7f7 f90f 	bl	800029c <__adddf3>
 800907e:	4604      	mov	r4, r0
 8009080:	460d      	mov	r5, r1
 8009082:	4602      	mov	r2, r0
 8009084:	460b      	mov	r3, r1
 8009086:	e9dd 0100 	ldrd	r0, r1, [sp]
 800908a:	f7f7 f907 	bl	800029c <__adddf3>
 800908e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009092:	4680      	mov	r8, r0
 8009094:	4689      	mov	r9, r1
 8009096:	f7f7 f8ff 	bl	8000298 <__aeabi_dsub>
 800909a:	4602      	mov	r2, r0
 800909c:	460b      	mov	r3, r1
 800909e:	4620      	mov	r0, r4
 80090a0:	4629      	mov	r1, r5
 80090a2:	f7f7 f8f9 	bl	8000298 <__aeabi_dsub>
 80090a6:	4642      	mov	r2, r8
 80090a8:	4606      	mov	r6, r0
 80090aa:	460f      	mov	r7, r1
 80090ac:	464b      	mov	r3, r9
 80090ae:	4640      	mov	r0, r8
 80090b0:	4649      	mov	r1, r9
 80090b2:	f7f7 faa9 	bl	8000608 <__aeabi_dmul>
 80090b6:	a360      	add	r3, pc, #384	@ (adr r3, 8009238 <__ieee754_pow+0xa40>)
 80090b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090bc:	4604      	mov	r4, r0
 80090be:	460d      	mov	r5, r1
 80090c0:	f7f7 faa2 	bl	8000608 <__aeabi_dmul>
 80090c4:	a35e      	add	r3, pc, #376	@ (adr r3, 8009240 <__ieee754_pow+0xa48>)
 80090c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ca:	f7f7 f8e5 	bl	8000298 <__aeabi_dsub>
 80090ce:	4622      	mov	r2, r4
 80090d0:	462b      	mov	r3, r5
 80090d2:	f7f7 fa99 	bl	8000608 <__aeabi_dmul>
 80090d6:	a35c      	add	r3, pc, #368	@ (adr r3, 8009248 <__ieee754_pow+0xa50>)
 80090d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090dc:	f7f7 f8de 	bl	800029c <__adddf3>
 80090e0:	4622      	mov	r2, r4
 80090e2:	462b      	mov	r3, r5
 80090e4:	f7f7 fa90 	bl	8000608 <__aeabi_dmul>
 80090e8:	a359      	add	r3, pc, #356	@ (adr r3, 8009250 <__ieee754_pow+0xa58>)
 80090ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ee:	f7f7 f8d3 	bl	8000298 <__aeabi_dsub>
 80090f2:	4622      	mov	r2, r4
 80090f4:	462b      	mov	r3, r5
 80090f6:	f7f7 fa87 	bl	8000608 <__aeabi_dmul>
 80090fa:	a357      	add	r3, pc, #348	@ (adr r3, 8009258 <__ieee754_pow+0xa60>)
 80090fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009100:	f7f7 f8cc 	bl	800029c <__adddf3>
 8009104:	4622      	mov	r2, r4
 8009106:	462b      	mov	r3, r5
 8009108:	f7f7 fa7e 	bl	8000608 <__aeabi_dmul>
 800910c:	4602      	mov	r2, r0
 800910e:	460b      	mov	r3, r1
 8009110:	4640      	mov	r0, r8
 8009112:	4649      	mov	r1, r9
 8009114:	f7f7 f8c0 	bl	8000298 <__aeabi_dsub>
 8009118:	4604      	mov	r4, r0
 800911a:	460d      	mov	r5, r1
 800911c:	4602      	mov	r2, r0
 800911e:	460b      	mov	r3, r1
 8009120:	4640      	mov	r0, r8
 8009122:	4649      	mov	r1, r9
 8009124:	f7f7 fa70 	bl	8000608 <__aeabi_dmul>
 8009128:	2200      	movs	r2, #0
 800912a:	e9cd 0100 	strd	r0, r1, [sp]
 800912e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009132:	4620      	mov	r0, r4
 8009134:	4629      	mov	r1, r5
 8009136:	f7f7 f8af 	bl	8000298 <__aeabi_dsub>
 800913a:	4602      	mov	r2, r0
 800913c:	460b      	mov	r3, r1
 800913e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009142:	f7f7 fb8b 	bl	800085c <__aeabi_ddiv>
 8009146:	4632      	mov	r2, r6
 8009148:	4604      	mov	r4, r0
 800914a:	460d      	mov	r5, r1
 800914c:	463b      	mov	r3, r7
 800914e:	4640      	mov	r0, r8
 8009150:	4649      	mov	r1, r9
 8009152:	f7f7 fa59 	bl	8000608 <__aeabi_dmul>
 8009156:	4632      	mov	r2, r6
 8009158:	463b      	mov	r3, r7
 800915a:	f7f7 f89f 	bl	800029c <__adddf3>
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	4620      	mov	r0, r4
 8009164:	4629      	mov	r1, r5
 8009166:	f7f7 f897 	bl	8000298 <__aeabi_dsub>
 800916a:	4642      	mov	r2, r8
 800916c:	464b      	mov	r3, r9
 800916e:	f7f7 f893 	bl	8000298 <__aeabi_dsub>
 8009172:	460b      	mov	r3, r1
 8009174:	4602      	mov	r2, r0
 8009176:	493b      	ldr	r1, [pc, #236]	@ (8009264 <__ieee754_pow+0xa6c>)
 8009178:	2000      	movs	r0, #0
 800917a:	f7f7 f88d 	bl	8000298 <__aeabi_dsub>
 800917e:	ec41 0b10 	vmov	d0, r0, r1
 8009182:	ee10 3a90 	vmov	r3, s1
 8009186:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800918a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800918e:	da30      	bge.n	80091f2 <__ieee754_pow+0x9fa>
 8009190:	4650      	mov	r0, sl
 8009192:	f000 f87d 	bl	8009290 <scalbn>
 8009196:	ec51 0b10 	vmov	r0, r1, d0
 800919a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800919e:	f7ff bbd2 	b.w	8008946 <__ieee754_pow+0x14e>
 80091a2:	4c31      	ldr	r4, [pc, #196]	@ (8009268 <__ieee754_pow+0xa70>)
 80091a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80091a8:	42a3      	cmp	r3, r4
 80091aa:	d91a      	bls.n	80091e2 <__ieee754_pow+0x9ea>
 80091ac:	4b2f      	ldr	r3, [pc, #188]	@ (800926c <__ieee754_pow+0xa74>)
 80091ae:	440b      	add	r3, r1
 80091b0:	4303      	orrs	r3, r0
 80091b2:	d009      	beq.n	80091c8 <__ieee754_pow+0x9d0>
 80091b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80091b8:	2200      	movs	r2, #0
 80091ba:	2300      	movs	r3, #0
 80091bc:	f7f7 fc96 	bl	8000aec <__aeabi_dcmplt>
 80091c0:	3800      	subs	r0, #0
 80091c2:	bf18      	it	ne
 80091c4:	2001      	movne	r0, #1
 80091c6:	e42b      	b.n	8008a20 <__ieee754_pow+0x228>
 80091c8:	4642      	mov	r2, r8
 80091ca:	464b      	mov	r3, r9
 80091cc:	f7f7 f864 	bl	8000298 <__aeabi_dsub>
 80091d0:	4632      	mov	r2, r6
 80091d2:	463b      	mov	r3, r7
 80091d4:	f7f7 fc9e 	bl	8000b14 <__aeabi_dcmpge>
 80091d8:	2800      	cmp	r0, #0
 80091da:	d1eb      	bne.n	80091b4 <__ieee754_pow+0x9bc>
 80091dc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800927c <__ieee754_pow+0xa84>
 80091e0:	e6f7      	b.n	8008fd2 <__ieee754_pow+0x7da>
 80091e2:	469a      	mov	sl, r3
 80091e4:	4b22      	ldr	r3, [pc, #136]	@ (8009270 <__ieee754_pow+0xa78>)
 80091e6:	459a      	cmp	sl, r3
 80091e8:	f63f aef3 	bhi.w	8008fd2 <__ieee754_pow+0x7da>
 80091ec:	f8dd a010 	ldr.w	sl, [sp, #16]
 80091f0:	e715      	b.n	800901e <__ieee754_pow+0x826>
 80091f2:	ec51 0b10 	vmov	r0, r1, d0
 80091f6:	4619      	mov	r1, r3
 80091f8:	e7cf      	b.n	800919a <__ieee754_pow+0x9a2>
 80091fa:	491a      	ldr	r1, [pc, #104]	@ (8009264 <__ieee754_pow+0xa6c>)
 80091fc:	2000      	movs	r0, #0
 80091fe:	f7ff bb18 	b.w	8008832 <__ieee754_pow+0x3a>
 8009202:	2000      	movs	r0, #0
 8009204:	2100      	movs	r1, #0
 8009206:	f7ff bb14 	b.w	8008832 <__ieee754_pow+0x3a>
 800920a:	4630      	mov	r0, r6
 800920c:	4639      	mov	r1, r7
 800920e:	f7ff bb10 	b.w	8008832 <__ieee754_pow+0x3a>
 8009212:	460c      	mov	r4, r1
 8009214:	f7ff bb5e 	b.w	80088d4 <__ieee754_pow+0xdc>
 8009218:	2400      	movs	r4, #0
 800921a:	f7ff bb49 	b.w	80088b0 <__ieee754_pow+0xb8>
 800921e:	bf00      	nop
 8009220:	00000000 	.word	0x00000000
 8009224:	3fe62e43 	.word	0x3fe62e43
 8009228:	fefa39ef 	.word	0xfefa39ef
 800922c:	3fe62e42 	.word	0x3fe62e42
 8009230:	0ca86c39 	.word	0x0ca86c39
 8009234:	be205c61 	.word	0xbe205c61
 8009238:	72bea4d0 	.word	0x72bea4d0
 800923c:	3e663769 	.word	0x3e663769
 8009240:	c5d26bf1 	.word	0xc5d26bf1
 8009244:	3ebbbd41 	.word	0x3ebbbd41
 8009248:	af25de2c 	.word	0xaf25de2c
 800924c:	3f11566a 	.word	0x3f11566a
 8009250:	16bebd93 	.word	0x16bebd93
 8009254:	3f66c16c 	.word	0x3f66c16c
 8009258:	5555553e 	.word	0x5555553e
 800925c:	3fc55555 	.word	0x3fc55555
 8009260:	fff00000 	.word	0xfff00000
 8009264:	3ff00000 	.word	0x3ff00000
 8009268:	4090cbff 	.word	0x4090cbff
 800926c:	3f6f3400 	.word	0x3f6f3400
 8009270:	3fe00000 	.word	0x3fe00000
 8009274:	652b82fe 	.word	0x652b82fe
 8009278:	3c971547 	.word	0x3c971547
 800927c:	4090cc00 	.word	0x4090cc00

08009280 <fabs>:
 8009280:	ec51 0b10 	vmov	r0, r1, d0
 8009284:	4602      	mov	r2, r0
 8009286:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800928a:	ec43 2b10 	vmov	d0, r2, r3
 800928e:	4770      	bx	lr

08009290 <scalbn>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	ec55 4b10 	vmov	r4, r5, d0
 8009296:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800929a:	4606      	mov	r6, r0
 800929c:	462b      	mov	r3, r5
 800929e:	b991      	cbnz	r1, 80092c6 <scalbn+0x36>
 80092a0:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80092a4:	4323      	orrs	r3, r4
 80092a6:	d03d      	beq.n	8009324 <scalbn+0x94>
 80092a8:	4b35      	ldr	r3, [pc, #212]	@ (8009380 <scalbn+0xf0>)
 80092aa:	4620      	mov	r0, r4
 80092ac:	4629      	mov	r1, r5
 80092ae:	2200      	movs	r2, #0
 80092b0:	f7f7 f9aa 	bl	8000608 <__aeabi_dmul>
 80092b4:	4b33      	ldr	r3, [pc, #204]	@ (8009384 <scalbn+0xf4>)
 80092b6:	429e      	cmp	r6, r3
 80092b8:	4604      	mov	r4, r0
 80092ba:	460d      	mov	r5, r1
 80092bc:	da0f      	bge.n	80092de <scalbn+0x4e>
 80092be:	a328      	add	r3, pc, #160	@ (adr r3, 8009360 <scalbn+0xd0>)
 80092c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c4:	e01e      	b.n	8009304 <scalbn+0x74>
 80092c6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80092ca:	4291      	cmp	r1, r2
 80092cc:	d10b      	bne.n	80092e6 <scalbn+0x56>
 80092ce:	4622      	mov	r2, r4
 80092d0:	4620      	mov	r0, r4
 80092d2:	4629      	mov	r1, r5
 80092d4:	f7f6 ffe2 	bl	800029c <__adddf3>
 80092d8:	4604      	mov	r4, r0
 80092da:	460d      	mov	r5, r1
 80092dc:	e022      	b.n	8009324 <scalbn+0x94>
 80092de:	460b      	mov	r3, r1
 80092e0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80092e4:	3936      	subs	r1, #54	@ 0x36
 80092e6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80092ea:	4296      	cmp	r6, r2
 80092ec:	dd0d      	ble.n	800930a <scalbn+0x7a>
 80092ee:	2d00      	cmp	r5, #0
 80092f0:	a11d      	add	r1, pc, #116	@ (adr r1, 8009368 <scalbn+0xd8>)
 80092f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092f6:	da02      	bge.n	80092fe <scalbn+0x6e>
 80092f8:	a11d      	add	r1, pc, #116	@ (adr r1, 8009370 <scalbn+0xe0>)
 80092fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092fe:	a31a      	add	r3, pc, #104	@ (adr r3, 8009368 <scalbn+0xd8>)
 8009300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009304:	f7f7 f980 	bl	8000608 <__aeabi_dmul>
 8009308:	e7e6      	b.n	80092d8 <scalbn+0x48>
 800930a:	1872      	adds	r2, r6, r1
 800930c:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009310:	428a      	cmp	r2, r1
 8009312:	dcec      	bgt.n	80092ee <scalbn+0x5e>
 8009314:	2a00      	cmp	r2, #0
 8009316:	dd08      	ble.n	800932a <scalbn+0x9a>
 8009318:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800931c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009320:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009324:	ec45 4b10 	vmov	d0, r4, r5
 8009328:	bd70      	pop	{r4, r5, r6, pc}
 800932a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800932e:	da08      	bge.n	8009342 <scalbn+0xb2>
 8009330:	2d00      	cmp	r5, #0
 8009332:	a10b      	add	r1, pc, #44	@ (adr r1, 8009360 <scalbn+0xd0>)
 8009334:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009338:	dac1      	bge.n	80092be <scalbn+0x2e>
 800933a:	a10f      	add	r1, pc, #60	@ (adr r1, 8009378 <scalbn+0xe8>)
 800933c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009340:	e7bd      	b.n	80092be <scalbn+0x2e>
 8009342:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009346:	3236      	adds	r2, #54	@ 0x36
 8009348:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800934c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009350:	4620      	mov	r0, r4
 8009352:	4b0d      	ldr	r3, [pc, #52]	@ (8009388 <scalbn+0xf8>)
 8009354:	4629      	mov	r1, r5
 8009356:	2200      	movs	r2, #0
 8009358:	e7d4      	b.n	8009304 <scalbn+0x74>
 800935a:	bf00      	nop
 800935c:	f3af 8000 	nop.w
 8009360:	c2f8f359 	.word	0xc2f8f359
 8009364:	01a56e1f 	.word	0x01a56e1f
 8009368:	8800759c 	.word	0x8800759c
 800936c:	7e37e43c 	.word	0x7e37e43c
 8009370:	8800759c 	.word	0x8800759c
 8009374:	fe37e43c 	.word	0xfe37e43c
 8009378:	c2f8f359 	.word	0xc2f8f359
 800937c:	81a56e1f 	.word	0x81a56e1f
 8009380:	43500000 	.word	0x43500000
 8009384:	ffff3cb0 	.word	0xffff3cb0
 8009388:	3c900000 	.word	0x3c900000

0800938c <with_errno>:
 800938c:	b510      	push	{r4, lr}
 800938e:	ed2d 8b02 	vpush	{d8}
 8009392:	eeb0 8a40 	vmov.f32	s16, s0
 8009396:	eef0 8a60 	vmov.f32	s17, s1
 800939a:	4604      	mov	r4, r0
 800939c:	f7fd f954 	bl	8006648 <__errno>
 80093a0:	eeb0 0a48 	vmov.f32	s0, s16
 80093a4:	eef0 0a68 	vmov.f32	s1, s17
 80093a8:	ecbd 8b02 	vpop	{d8}
 80093ac:	6004      	str	r4, [r0, #0]
 80093ae:	bd10      	pop	{r4, pc}

080093b0 <xflow>:
 80093b0:	4603      	mov	r3, r0
 80093b2:	b507      	push	{r0, r1, r2, lr}
 80093b4:	ec51 0b10 	vmov	r0, r1, d0
 80093b8:	b183      	cbz	r3, 80093dc <xflow+0x2c>
 80093ba:	4602      	mov	r2, r0
 80093bc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80093c0:	e9cd 2300 	strd	r2, r3, [sp]
 80093c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80093c8:	f7f7 f91e 	bl	8000608 <__aeabi_dmul>
 80093cc:	ec41 0b10 	vmov	d0, r0, r1
 80093d0:	2022      	movs	r0, #34	@ 0x22
 80093d2:	b003      	add	sp, #12
 80093d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80093d8:	f7ff bfd8 	b.w	800938c <with_errno>
 80093dc:	4602      	mov	r2, r0
 80093de:	460b      	mov	r3, r1
 80093e0:	e7ee      	b.n	80093c0 <xflow+0x10>
 80093e2:	0000      	movs	r0, r0
 80093e4:	0000      	movs	r0, r0
	...

080093e8 <__math_uflow>:
 80093e8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80093f0 <__math_uflow+0x8>
 80093ec:	f7ff bfe0 	b.w	80093b0 <xflow>
 80093f0:	00000000 	.word	0x00000000
 80093f4:	10000000 	.word	0x10000000

080093f8 <__math_oflow>:
 80093f8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009400 <__math_oflow+0x8>
 80093fc:	f7ff bfd8 	b.w	80093b0 <xflow>
 8009400:	00000000 	.word	0x00000000
 8009404:	70000000 	.word	0x70000000

08009408 <__ieee754_sqrt>:
 8009408:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800940c:	4a68      	ldr	r2, [pc, #416]	@ (80095b0 <__ieee754_sqrt+0x1a8>)
 800940e:	ec55 4b10 	vmov	r4, r5, d0
 8009412:	43aa      	bics	r2, r5
 8009414:	462b      	mov	r3, r5
 8009416:	4621      	mov	r1, r4
 8009418:	d110      	bne.n	800943c <__ieee754_sqrt+0x34>
 800941a:	4622      	mov	r2, r4
 800941c:	4620      	mov	r0, r4
 800941e:	4629      	mov	r1, r5
 8009420:	f7f7 f8f2 	bl	8000608 <__aeabi_dmul>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	4620      	mov	r0, r4
 800942a:	4629      	mov	r1, r5
 800942c:	f7f6 ff36 	bl	800029c <__adddf3>
 8009430:	4604      	mov	r4, r0
 8009432:	460d      	mov	r5, r1
 8009434:	ec45 4b10 	vmov	d0, r4, r5
 8009438:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800943c:	2d00      	cmp	r5, #0
 800943e:	dc0e      	bgt.n	800945e <__ieee754_sqrt+0x56>
 8009440:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009444:	4322      	orrs	r2, r4
 8009446:	d0f5      	beq.n	8009434 <__ieee754_sqrt+0x2c>
 8009448:	b19d      	cbz	r5, 8009472 <__ieee754_sqrt+0x6a>
 800944a:	4622      	mov	r2, r4
 800944c:	4620      	mov	r0, r4
 800944e:	4629      	mov	r1, r5
 8009450:	f7f6 ff22 	bl	8000298 <__aeabi_dsub>
 8009454:	4602      	mov	r2, r0
 8009456:	460b      	mov	r3, r1
 8009458:	f7f7 fa00 	bl	800085c <__aeabi_ddiv>
 800945c:	e7e8      	b.n	8009430 <__ieee754_sqrt+0x28>
 800945e:	152a      	asrs	r2, r5, #20
 8009460:	d115      	bne.n	800948e <__ieee754_sqrt+0x86>
 8009462:	2000      	movs	r0, #0
 8009464:	e009      	b.n	800947a <__ieee754_sqrt+0x72>
 8009466:	0acb      	lsrs	r3, r1, #11
 8009468:	3a15      	subs	r2, #21
 800946a:	0549      	lsls	r1, r1, #21
 800946c:	2b00      	cmp	r3, #0
 800946e:	d0fa      	beq.n	8009466 <__ieee754_sqrt+0x5e>
 8009470:	e7f7      	b.n	8009462 <__ieee754_sqrt+0x5a>
 8009472:	462a      	mov	r2, r5
 8009474:	e7fa      	b.n	800946c <__ieee754_sqrt+0x64>
 8009476:	005b      	lsls	r3, r3, #1
 8009478:	3001      	adds	r0, #1
 800947a:	02dc      	lsls	r4, r3, #11
 800947c:	d5fb      	bpl.n	8009476 <__ieee754_sqrt+0x6e>
 800947e:	1e44      	subs	r4, r0, #1
 8009480:	1b12      	subs	r2, r2, r4
 8009482:	f1c0 0420 	rsb	r4, r0, #32
 8009486:	fa21 f404 	lsr.w	r4, r1, r4
 800948a:	4323      	orrs	r3, r4
 800948c:	4081      	lsls	r1, r0
 800948e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009492:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009496:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800949a:	07d2      	lsls	r2, r2, #31
 800949c:	bf5c      	itt	pl
 800949e:	005b      	lslpl	r3, r3, #1
 80094a0:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 80094a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80094a8:	bf58      	it	pl
 80094aa:	0049      	lslpl	r1, r1, #1
 80094ac:	2600      	movs	r6, #0
 80094ae:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 80094b2:	106d      	asrs	r5, r5, #1
 80094b4:	0049      	lsls	r1, r1, #1
 80094b6:	2016      	movs	r0, #22
 80094b8:	4632      	mov	r2, r6
 80094ba:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 80094be:	1917      	adds	r7, r2, r4
 80094c0:	429f      	cmp	r7, r3
 80094c2:	bfde      	ittt	le
 80094c4:	193a      	addle	r2, r7, r4
 80094c6:	1bdb      	suble	r3, r3, r7
 80094c8:	1936      	addle	r6, r6, r4
 80094ca:	0fcf      	lsrs	r7, r1, #31
 80094cc:	3801      	subs	r0, #1
 80094ce:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80094d2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80094d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80094da:	d1f0      	bne.n	80094be <__ieee754_sqrt+0xb6>
 80094dc:	4604      	mov	r4, r0
 80094de:	2720      	movs	r7, #32
 80094e0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80094e4:	429a      	cmp	r2, r3
 80094e6:	eb00 0e0c 	add.w	lr, r0, ip
 80094ea:	db02      	blt.n	80094f2 <__ieee754_sqrt+0xea>
 80094ec:	d113      	bne.n	8009516 <__ieee754_sqrt+0x10e>
 80094ee:	458e      	cmp	lr, r1
 80094f0:	d811      	bhi.n	8009516 <__ieee754_sqrt+0x10e>
 80094f2:	f1be 0f00 	cmp.w	lr, #0
 80094f6:	eb0e 000c 	add.w	r0, lr, ip
 80094fa:	da42      	bge.n	8009582 <__ieee754_sqrt+0x17a>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	db40      	blt.n	8009582 <__ieee754_sqrt+0x17a>
 8009500:	f102 0801 	add.w	r8, r2, #1
 8009504:	1a9b      	subs	r3, r3, r2
 8009506:	458e      	cmp	lr, r1
 8009508:	bf88      	it	hi
 800950a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800950e:	eba1 010e 	sub.w	r1, r1, lr
 8009512:	4464      	add	r4, ip
 8009514:	4642      	mov	r2, r8
 8009516:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800951a:	3f01      	subs	r7, #1
 800951c:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009520:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009524:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009528:	d1dc      	bne.n	80094e4 <__ieee754_sqrt+0xdc>
 800952a:	4319      	orrs	r1, r3
 800952c:	d01b      	beq.n	8009566 <__ieee754_sqrt+0x15e>
 800952e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 80095b4 <__ieee754_sqrt+0x1ac>
 8009532:	f8df b084 	ldr.w	fp, [pc, #132]	@ 80095b8 <__ieee754_sqrt+0x1b0>
 8009536:	e9da 0100 	ldrd	r0, r1, [sl]
 800953a:	e9db 2300 	ldrd	r2, r3, [fp]
 800953e:	f7f6 feab 	bl	8000298 <__aeabi_dsub>
 8009542:	e9da 8900 	ldrd	r8, r9, [sl]
 8009546:	4602      	mov	r2, r0
 8009548:	460b      	mov	r3, r1
 800954a:	4640      	mov	r0, r8
 800954c:	4649      	mov	r1, r9
 800954e:	f7f7 fad7 	bl	8000b00 <__aeabi_dcmple>
 8009552:	b140      	cbz	r0, 8009566 <__ieee754_sqrt+0x15e>
 8009554:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009558:	e9da 0100 	ldrd	r0, r1, [sl]
 800955c:	e9db 2300 	ldrd	r2, r3, [fp]
 8009560:	d111      	bne.n	8009586 <__ieee754_sqrt+0x17e>
 8009562:	3601      	adds	r6, #1
 8009564:	463c      	mov	r4, r7
 8009566:	1072      	asrs	r2, r6, #1
 8009568:	0863      	lsrs	r3, r4, #1
 800956a:	07f1      	lsls	r1, r6, #31
 800956c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009570:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009574:	bf48      	it	mi
 8009576:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800957a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800957e:	4618      	mov	r0, r3
 8009580:	e756      	b.n	8009430 <__ieee754_sqrt+0x28>
 8009582:	4690      	mov	r8, r2
 8009584:	e7be      	b.n	8009504 <__ieee754_sqrt+0xfc>
 8009586:	f7f6 fe89 	bl	800029c <__adddf3>
 800958a:	e9da 8900 	ldrd	r8, r9, [sl]
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4640      	mov	r0, r8
 8009594:	4649      	mov	r1, r9
 8009596:	f7f7 faa9 	bl	8000aec <__aeabi_dcmplt>
 800959a:	b120      	cbz	r0, 80095a6 <__ieee754_sqrt+0x19e>
 800959c:	1ca0      	adds	r0, r4, #2
 800959e:	bf08      	it	eq
 80095a0:	3601      	addeq	r6, #1
 80095a2:	3402      	adds	r4, #2
 80095a4:	e7df      	b.n	8009566 <__ieee754_sqrt+0x15e>
 80095a6:	1c63      	adds	r3, r4, #1
 80095a8:	f023 0401 	bic.w	r4, r3, #1
 80095ac:	e7db      	b.n	8009566 <__ieee754_sqrt+0x15e>
 80095ae:	bf00      	nop
 80095b0:	7ff00000 	.word	0x7ff00000
 80095b4:	200001f0 	.word	0x200001f0
 80095b8:	200001e8 	.word	0x200001e8

080095bc <_init>:
 80095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095be:	bf00      	nop
 80095c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095c2:	bc08      	pop	{r3}
 80095c4:	469e      	mov	lr, r3
 80095c6:	4770      	bx	lr

080095c8 <_fini>:
 80095c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ca:	bf00      	nop
 80095cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80095ce:	bc08      	pop	{r3}
 80095d0:	469e      	mov	lr, r3
 80095d2:	4770      	bx	lr
