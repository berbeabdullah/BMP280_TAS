
BMP280_TAS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007480  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003b0  08007620  08007620  00008620  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079d0  080079d0  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  080079d0  080079d0  000089d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079d8  080079d8  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079d8  080079d8  000089d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079dc  080079dc  000089dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080079e0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200001d4  08007bb4  000091d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000418  08007bb4  00009418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ad68  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a24  00000000  00000000  00013f6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  00015990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007c5  00000000  00000000  00016388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c1b  00000000  00000000  00016b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d0af  00000000  00000000  0002d768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a08c  00000000  00000000  0003a817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c48a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad4  00000000  00000000  000c48e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000c83bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007608 	.word	0x08007608

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007608 	.word	0x08007608

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_ldivmod>:
 8000c58:	b97b      	cbnz	r3, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5a:	b972      	cbnz	r2, 8000c7a <__aeabi_ldivmod+0x22>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bfbe      	ittt	lt
 8000c60:	2000      	movlt	r0, #0
 8000c62:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c66:	e006      	blt.n	8000c76 <__aeabi_ldivmod+0x1e>
 8000c68:	bf08      	it	eq
 8000c6a:	2800      	cmpeq	r0, #0
 8000c6c:	bf1c      	itt	ne
 8000c6e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c72:	f04f 30ff 	movne.w	r0, #4294967295
 8000c76:	f000 b9b5 	b.w	8000fe4 <__aeabi_idiv0>
 8000c7a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c7e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c82:	2900      	cmp	r1, #0
 8000c84:	db09      	blt.n	8000c9a <__aeabi_ldivmod+0x42>
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	db1a      	blt.n	8000cc0 <__aeabi_ldivmod+0x68>
 8000c8a:	f000 f84d 	bl	8000d28 <__udivmoddi4>
 8000c8e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c96:	b004      	add	sp, #16
 8000c98:	4770      	bx	lr
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db1b      	blt.n	8000cdc <__aeabi_ldivmod+0x84>
 8000ca4:	f000 f840 	bl	8000d28 <__udivmoddi4>
 8000ca8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb0:	b004      	add	sp, #16
 8000cb2:	4240      	negs	r0, r0
 8000cb4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb8:	4252      	negs	r2, r2
 8000cba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cbe:	4770      	bx	lr
 8000cc0:	4252      	negs	r2, r2
 8000cc2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cc6:	f000 f82f 	bl	8000d28 <__udivmoddi4>
 8000cca:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd2:	b004      	add	sp, #16
 8000cd4:	4240      	negs	r0, r0
 8000cd6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cda:	4770      	bx	lr
 8000cdc:	4252      	negs	r2, r2
 8000cde:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce2:	f000 f821 	bl	8000d28 <__udivmoddi4>
 8000ce6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cee:	b004      	add	sp, #16
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_uldivmod>:
 8000cf8:	b953      	cbnz	r3, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfa:	b94a      	cbnz	r2, 8000d10 <__aeabi_uldivmod+0x18>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bf08      	it	eq
 8000d00:	2800      	cmpeq	r0, #0
 8000d02:	bf1c      	itt	ne
 8000d04:	f04f 31ff 	movne.w	r1, #4294967295
 8000d08:	f04f 30ff 	movne.w	r0, #4294967295
 8000d0c:	f000 b96a 	b.w	8000fe4 <__aeabi_idiv0>
 8000d10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d18:	f000 f806 	bl	8000d28 <__udivmoddi4>
 8000d1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d24:	b004      	add	sp, #16
 8000d26:	4770      	bx	lr

08000d28 <__udivmoddi4>:
 8000d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d2c:	9d08      	ldr	r5, [sp, #32]
 8000d2e:	460c      	mov	r4, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14e      	bne.n	8000dd2 <__udivmoddi4+0xaa>
 8000d34:	4694      	mov	ip, r2
 8000d36:	458c      	cmp	ip, r1
 8000d38:	4686      	mov	lr, r0
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	d962      	bls.n	8000e06 <__udivmoddi4+0xde>
 8000d40:	b14a      	cbz	r2, 8000d56 <__udivmoddi4+0x2e>
 8000d42:	f1c2 0320 	rsb	r3, r2, #32
 8000d46:	4091      	lsls	r1, r2
 8000d48:	fa20 f303 	lsr.w	r3, r0, r3
 8000d4c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d50:	4319      	orrs	r1, r3
 8000d52:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d5a:	fa1f f68c 	uxth.w	r6, ip
 8000d5e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d62:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d66:	fb07 1114 	mls	r1, r7, r4, r1
 8000d6a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6e:	fb04 f106 	mul.w	r1, r4, r6
 8000d72:	4299      	cmp	r1, r3
 8000d74:	d90a      	bls.n	8000d8c <__udivmoddi4+0x64>
 8000d76:	eb1c 0303 	adds.w	r3, ip, r3
 8000d7a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7e:	f080 8112 	bcs.w	8000fa6 <__udivmoddi4+0x27e>
 8000d82:	4299      	cmp	r1, r3
 8000d84:	f240 810f 	bls.w	8000fa6 <__udivmoddi4+0x27e>
 8000d88:	3c02      	subs	r4, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	1a59      	subs	r1, r3, r1
 8000d8e:	fa1f f38e 	uxth.w	r3, lr
 8000d92:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d96:	fb07 1110 	mls	r1, r7, r0, r1
 8000d9a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9e:	fb00 f606 	mul.w	r6, r0, r6
 8000da2:	429e      	cmp	r6, r3
 8000da4:	d90a      	bls.n	8000dbc <__udivmoddi4+0x94>
 8000da6:	eb1c 0303 	adds.w	r3, ip, r3
 8000daa:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dae:	f080 80fc 	bcs.w	8000faa <__udivmoddi4+0x282>
 8000db2:	429e      	cmp	r6, r3
 8000db4:	f240 80f9 	bls.w	8000faa <__udivmoddi4+0x282>
 8000db8:	4463      	add	r3, ip
 8000dba:	3802      	subs	r0, #2
 8000dbc:	1b9b      	subs	r3, r3, r6
 8000dbe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	b11d      	cbz	r5, 8000dce <__udivmoddi4+0xa6>
 8000dc6:	40d3      	lsrs	r3, r2
 8000dc8:	2200      	movs	r2, #0
 8000dca:	e9c5 3200 	strd	r3, r2, [r5]
 8000dce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d905      	bls.n	8000de2 <__udivmoddi4+0xba>
 8000dd6:	b10d      	cbz	r5, 8000ddc <__udivmoddi4+0xb4>
 8000dd8:	e9c5 0100 	strd	r0, r1, [r5]
 8000ddc:	2100      	movs	r1, #0
 8000dde:	4608      	mov	r0, r1
 8000de0:	e7f5      	b.n	8000dce <__udivmoddi4+0xa6>
 8000de2:	fab3 f183 	clz	r1, r3
 8000de6:	2900      	cmp	r1, #0
 8000de8:	d146      	bne.n	8000e78 <__udivmoddi4+0x150>
 8000dea:	42a3      	cmp	r3, r4
 8000dec:	d302      	bcc.n	8000df4 <__udivmoddi4+0xcc>
 8000dee:	4290      	cmp	r0, r2
 8000df0:	f0c0 80f0 	bcc.w	8000fd4 <__udivmoddi4+0x2ac>
 8000df4:	1a86      	subs	r6, r0, r2
 8000df6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dfa:	2001      	movs	r0, #1
 8000dfc:	2d00      	cmp	r5, #0
 8000dfe:	d0e6      	beq.n	8000dce <__udivmoddi4+0xa6>
 8000e00:	e9c5 6300 	strd	r6, r3, [r5]
 8000e04:	e7e3      	b.n	8000dce <__udivmoddi4+0xa6>
 8000e06:	2a00      	cmp	r2, #0
 8000e08:	f040 8090 	bne.w	8000f2c <__udivmoddi4+0x204>
 8000e0c:	eba1 040c 	sub.w	r4, r1, ip
 8000e10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e14:	fa1f f78c 	uxth.w	r7, ip
 8000e18:	2101      	movs	r1, #1
 8000e1a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e22:	fb08 4416 	mls	r4, r8, r6, r4
 8000e26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e2a:	fb07 f006 	mul.w	r0, r7, r6
 8000e2e:	4298      	cmp	r0, r3
 8000e30:	d908      	bls.n	8000e44 <__udivmoddi4+0x11c>
 8000e32:	eb1c 0303 	adds.w	r3, ip, r3
 8000e36:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e3a:	d202      	bcs.n	8000e42 <__udivmoddi4+0x11a>
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	f200 80cd 	bhi.w	8000fdc <__udivmoddi4+0x2b4>
 8000e42:	4626      	mov	r6, r4
 8000e44:	1a1c      	subs	r4, r3, r0
 8000e46:	fa1f f38e 	uxth.w	r3, lr
 8000e4a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e56:	fb00 f707 	mul.w	r7, r0, r7
 8000e5a:	429f      	cmp	r7, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x148>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x146>
 8000e68:	429f      	cmp	r7, r3
 8000e6a:	f200 80b0 	bhi.w	8000fce <__udivmoddi4+0x2a6>
 8000e6e:	4620      	mov	r0, r4
 8000e70:	1bdb      	subs	r3, r3, r7
 8000e72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0x9c>
 8000e78:	f1c1 0620 	rsb	r6, r1, #32
 8000e7c:	408b      	lsls	r3, r1
 8000e7e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e82:	431f      	orrs	r7, r3
 8000e84:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e88:	fa04 f301 	lsl.w	r3, r4, r1
 8000e8c:	ea43 030c 	orr.w	r3, r3, ip
 8000e90:	40f4      	lsrs	r4, r6
 8000e92:	fa00 f801 	lsl.w	r8, r0, r1
 8000e96:	0c38      	lsrs	r0, r7, #16
 8000e98:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e9c:	fbb4 fef0 	udiv	lr, r4, r0
 8000ea0:	fa1f fc87 	uxth.w	ip, r7
 8000ea4:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eac:	fb0e f90c 	mul.w	r9, lr, ip
 8000eb0:	45a1      	cmp	r9, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	d90a      	bls.n	8000ece <__udivmoddi4+0x1a6>
 8000eb8:	193c      	adds	r4, r7, r4
 8000eba:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ebe:	f080 8084 	bcs.w	8000fca <__udivmoddi4+0x2a2>
 8000ec2:	45a1      	cmp	r9, r4
 8000ec4:	f240 8081 	bls.w	8000fca <__udivmoddi4+0x2a2>
 8000ec8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ecc:	443c      	add	r4, r7
 8000ece:	eba4 0409 	sub.w	r4, r4, r9
 8000ed2:	fa1f f983 	uxth.w	r9, r3
 8000ed6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eda:	fb00 4413 	mls	r4, r0, r3, r4
 8000ede:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ee2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee6:	45a4      	cmp	ip, r4
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x1d2>
 8000eea:	193c      	adds	r4, r7, r4
 8000eec:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ef0:	d267      	bcs.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d965      	bls.n	8000fc2 <__udivmoddi4+0x29a>
 8000ef6:	3b02      	subs	r3, #2
 8000ef8:	443c      	add	r4, r7
 8000efa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efe:	fba0 9302 	umull	r9, r3, r0, r2
 8000f02:	eba4 040c 	sub.w	r4, r4, ip
 8000f06:	429c      	cmp	r4, r3
 8000f08:	46ce      	mov	lr, r9
 8000f0a:	469c      	mov	ip, r3
 8000f0c:	d351      	bcc.n	8000fb2 <__udivmoddi4+0x28a>
 8000f0e:	d04e      	beq.n	8000fae <__udivmoddi4+0x286>
 8000f10:	b155      	cbz	r5, 8000f28 <__udivmoddi4+0x200>
 8000f12:	ebb8 030e 	subs.w	r3, r8, lr
 8000f16:	eb64 040c 	sbc.w	r4, r4, ip
 8000f1a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1e:	40cb      	lsrs	r3, r1
 8000f20:	431e      	orrs	r6, r3
 8000f22:	40cc      	lsrs	r4, r1
 8000f24:	e9c5 6400 	strd	r6, r4, [r5]
 8000f28:	2100      	movs	r1, #0
 8000f2a:	e750      	b.n	8000dce <__udivmoddi4+0xa6>
 8000f2c:	f1c2 0320 	rsb	r3, r2, #32
 8000f30:	fa20 f103 	lsr.w	r1, r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa24 f303 	lsr.w	r3, r4, r3
 8000f3c:	4094      	lsls	r4, r2
 8000f3e:	430c      	orrs	r4, r1
 8000f40:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f44:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f48:	fa1f f78c 	uxth.w	r7, ip
 8000f4c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f50:	fb08 3110 	mls	r1, r8, r0, r3
 8000f54:	0c23      	lsrs	r3, r4, #16
 8000f56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f5a:	fb00 f107 	mul.w	r1, r0, r7
 8000f5e:	4299      	cmp	r1, r3
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x24c>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f6a:	d22c      	bcs.n	8000fc6 <__udivmoddi4+0x29e>
 8000f6c:	4299      	cmp	r1, r3
 8000f6e:	d92a      	bls.n	8000fc6 <__udivmoddi4+0x29e>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1a5b      	subs	r3, r3, r1
 8000f76:	b2a4      	uxth	r4, r4
 8000f78:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f7c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f84:	fb01 f307 	mul.w	r3, r1, r7
 8000f88:	42a3      	cmp	r3, r4
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x276>
 8000f8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f90:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f94:	d213      	bcs.n	8000fbe <__udivmoddi4+0x296>
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	d911      	bls.n	8000fbe <__udivmoddi4+0x296>
 8000f9a:	3902      	subs	r1, #2
 8000f9c:	4464      	add	r4, ip
 8000f9e:	1ae4      	subs	r4, r4, r3
 8000fa0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa4:	e739      	b.n	8000e1a <__udivmoddi4+0xf2>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	e6f0      	b.n	8000d8c <__udivmoddi4+0x64>
 8000faa:	4608      	mov	r0, r1
 8000fac:	e706      	b.n	8000dbc <__udivmoddi4+0x94>
 8000fae:	45c8      	cmp	r8, r9
 8000fb0:	d2ae      	bcs.n	8000f10 <__udivmoddi4+0x1e8>
 8000fb2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fba:	3801      	subs	r0, #1
 8000fbc:	e7a8      	b.n	8000f10 <__udivmoddi4+0x1e8>
 8000fbe:	4631      	mov	r1, r6
 8000fc0:	e7ed      	b.n	8000f9e <__udivmoddi4+0x276>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	e799      	b.n	8000efa <__udivmoddi4+0x1d2>
 8000fc6:	4630      	mov	r0, r6
 8000fc8:	e7d4      	b.n	8000f74 <__udivmoddi4+0x24c>
 8000fca:	46d6      	mov	lr, sl
 8000fcc:	e77f      	b.n	8000ece <__udivmoddi4+0x1a6>
 8000fce:	4463      	add	r3, ip
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	e74d      	b.n	8000e70 <__udivmoddi4+0x148>
 8000fd4:	4606      	mov	r6, r0
 8000fd6:	4623      	mov	r3, r4
 8000fd8:	4608      	mov	r0, r1
 8000fda:	e70f      	b.n	8000dfc <__udivmoddi4+0xd4>
 8000fdc:	3e02      	subs	r6, #2
 8000fde:	4463      	add	r3, ip
 8000fe0:	e730      	b.n	8000e44 <__udivmoddi4+0x11c>
 8000fe2:	bf00      	nop

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <TrimRead>:

signed short		dig_T2, dig_T3, \
					dig_P2, dig_P3, dig_P4, dig_P5, dig_P6, dig_P7, dig_P8, dig_P9;

void TrimRead(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b08a      	sub	sp, #40	@ 0x28
 8000fec:	af04      	add	r7, sp, #16
	uint8_t trimdata[24];
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDR, 0x88,1,trimdata, 24,HAL_MAX_DELAY);
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	9302      	str	r3, [sp, #8]
 8000ff4:	2318      	movs	r3, #24
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	2288      	movs	r2, #136	@ 0x88
 8001000:	21ec      	movs	r1, #236	@ 0xec
 8001002:	483a      	ldr	r0, [pc, #232]	@ (80010ec <TrimRead+0x104>)
 8001004:	f001 fe30 	bl	8002c68 <HAL_I2C_Mem_Read>

	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001008:	787b      	ldrb	r3, [r7, #1]
 800100a:	021b      	lsls	r3, r3, #8
 800100c:	b21a      	sxth	r2, r3
 800100e:	783b      	ldrb	r3, [r7, #0]
 8001010:	b21b      	sxth	r3, r3
 8001012:	4313      	orrs	r3, r2
 8001014:	b21b      	sxth	r3, r3
 8001016:	b29a      	uxth	r2, r3
 8001018:	4b35      	ldr	r3, [pc, #212]	@ (80010f0 <TrimRead+0x108>)
 800101a:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21a      	sxth	r2, r3
 8001022:	78bb      	ldrb	r3, [r7, #2]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21a      	sxth	r2, r3
 800102a:	4b32      	ldr	r3, [pc, #200]	@ (80010f4 <TrimRead+0x10c>)
 800102c:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800102e:	797b      	ldrb	r3, [r7, #5]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	793b      	ldrb	r3, [r7, #4]
 8001036:	b21b      	sxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b21a      	sxth	r2, r3
 800103c:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <TrimRead+0x110>)
 800103e:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[6];
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	021b      	lsls	r3, r3, #8
 8001044:	b21a      	sxth	r2, r3
 8001046:	79bb      	ldrb	r3, [r7, #6]
 8001048:	b21b      	sxth	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b21b      	sxth	r3, r3
 800104e:	b29a      	uxth	r2, r3
 8001050:	4b2a      	ldr	r3, [pc, #168]	@ (80010fc <TrimRead+0x114>)
 8001052:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[8];
 8001054:	7a7b      	ldrb	r3, [r7, #9]
 8001056:	021b      	lsls	r3, r3, #8
 8001058:	b21a      	sxth	r2, r3
 800105a:	7a3b      	ldrb	r3, [r7, #8]
 800105c:	b21b      	sxth	r3, r3
 800105e:	4313      	orrs	r3, r2
 8001060:	b21a      	sxth	r2, r3
 8001062:	4b27      	ldr	r3, [pc, #156]	@ (8001100 <TrimRead+0x118>)
 8001064:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001066:	7afb      	ldrb	r3, [r7, #11]
 8001068:	021b      	lsls	r3, r3, #8
 800106a:	b21a      	sxth	r2, r3
 800106c:	7abb      	ldrb	r3, [r7, #10]
 800106e:	b21b      	sxth	r3, r3
 8001070:	4313      	orrs	r3, r2
 8001072:	b21a      	sxth	r2, r3
 8001074:	4b23      	ldr	r3, [pc, #140]	@ (8001104 <TrimRead+0x11c>)
 8001076:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001078:	7b7b      	ldrb	r3, [r7, #13]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	7b3b      	ldrb	r3, [r7, #12]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21a      	sxth	r2, r3
 8001086:	4b20      	ldr	r3, [pc, #128]	@ (8001108 <TrimRead+0x120>)
 8001088:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	021b      	lsls	r3, r3, #8
 800108e:	b21a      	sxth	r2, r3
 8001090:	7bbb      	ldrb	r3, [r7, #14]
 8001092:	b21b      	sxth	r3, r3
 8001094:	4313      	orrs	r3, r2
 8001096:	b21a      	sxth	r2, r3
 8001098:	4b1c      	ldr	r3, [pc, #112]	@ (800110c <TrimRead+0x124>)
 800109a:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 800109c:	7c7b      	ldrb	r3, [r7, #17]
 800109e:	021b      	lsls	r3, r3, #8
 80010a0:	b21a      	sxth	r2, r3
 80010a2:	7c3b      	ldrb	r3, [r7, #16]
 80010a4:	b21b      	sxth	r3, r3
 80010a6:	4313      	orrs	r3, r2
 80010a8:	b21a      	sxth	r2, r3
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <TrimRead+0x128>)
 80010ac:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010ae:	7cfb      	ldrb	r3, [r7, #19]
 80010b0:	021b      	lsls	r3, r3, #8
 80010b2:	b21a      	sxth	r2, r3
 80010b4:	7cbb      	ldrb	r3, [r7, #18]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	4313      	orrs	r3, r2
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	4b15      	ldr	r3, [pc, #84]	@ (8001114 <TrimRead+0x12c>)
 80010be:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010c0:	7d7b      	ldrb	r3, [r7, #21]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	7d3b      	ldrb	r3, [r7, #20]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <TrimRead+0x130>)
 80010d0:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010d2:	7dfb      	ldrb	r3, [r7, #23]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	7dbb      	ldrb	r3, [r7, #22]
 80010da:	b21b      	sxth	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b21a      	sxth	r2, r3
 80010e0:	4b0e      	ldr	r3, [pc, #56]	@ (800111c <TrimRead+0x134>)
 80010e2:	801a      	strh	r2, [r3, #0]
}
 80010e4:	bf00      	nop
 80010e6:	3718      	adds	r7, #24
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20000218 	.word	0x20000218
 80010f0:	200001fc 	.word	0x200001fc
 80010f4:	20000200 	.word	0x20000200
 80010f8:	20000202 	.word	0x20000202
 80010fc:	200001fe 	.word	0x200001fe
 8001100:	20000204 	.word	0x20000204
 8001104:	20000206 	.word	0x20000206
 8001108:	20000208 	.word	0x20000208
 800110c:	2000020a 	.word	0x2000020a
 8001110:	2000020c 	.word	0x2000020c
 8001114:	2000020e 	.word	0x2000020e
 8001118:	20000210 	.word	0x20000210
 800111c:	20000212 	.word	0x20000212

08001120 <BMP280_Config>:

int BMP280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 8001120:	b590      	push	{r4, r7, lr}
 8001122:	b089      	sub	sp, #36	@ 0x24
 8001124:	af04      	add	r7, sp, #16
 8001126:	4604      	mov	r4, r0
 8001128:	4608      	mov	r0, r1
 800112a:	4611      	mov	r1, r2
 800112c:	461a      	mov	r2, r3
 800112e:	4623      	mov	r3, r4
 8001130:	71fb      	strb	r3, [r7, #7]
 8001132:	4603      	mov	r3, r0
 8001134:	71bb      	strb	r3, [r7, #6]
 8001136:	460b      	mov	r3, r1
 8001138:	717b      	strb	r3, [r7, #5]
 800113a:	4613      	mov	r3, r2
 800113c:	713b      	strb	r3, [r7, #4]
	TrimRead();
 800113e:	f7ff ff53 	bl	8000fe8 <TrimRead>

	uint8_t datatowrite = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	73bb      	strb	r3, [r7, #14]

	datatowrite = 0xB6;
 800114a:	23b6      	movs	r3, #182	@ 0xb6
 800114c:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDR, REG_RESET, 1, &datatowrite, 1, 1000) != HAL_OK)
 800114e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001152:	9302      	str	r3, [sp, #8]
 8001154:	2301      	movs	r3, #1
 8001156:	9301      	str	r3, [sp, #4]
 8001158:	f107 030f 	add.w	r3, r7, #15
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	2301      	movs	r3, #1
 8001160:	22e0      	movs	r2, #224	@ 0xe0
 8001162:	21ec      	movs	r1, #236	@ 0xec
 8001164:	4840      	ldr	r0, [pc, #256]	@ (8001268 <BMP280_Config+0x148>)
 8001166:	f001 fc85 	bl	8002a74 <HAL_I2C_Mem_Write>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d002      	beq.n	8001176 <BMP280_Config+0x56>
	{
		return -1;
 8001170:	f04f 33ff 	mov.w	r3, #4294967295
 8001174:	e074      	b.n	8001260 <BMP280_Config+0x140>
	}
	HAL_Delay(100);
 8001176:	2064      	movs	r0, #100	@ 0x64
 8001178:	f001 f876 	bl	8002268 <HAL_Delay>

	datatowrite = (t_sb << 5) | (filter << 2);
 800117c:	793b      	ldrb	r3, [r7, #4]
 800117e:	015b      	lsls	r3, r3, #5
 8001180:	b25a      	sxtb	r2, r3
 8001182:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	b25b      	sxtb	r3, r3
 800118a:	4313      	orrs	r3, r2
 800118c:	b25b      	sxtb	r3, r3
 800118e:	b2db      	uxtb	r3, r3
 8001190:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDR, REG_CONFIG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001196:	9302      	str	r3, [sp, #8]
 8001198:	2301      	movs	r3, #1
 800119a:	9301      	str	r3, [sp, #4]
 800119c:	f107 030f 	add.w	r3, r7, #15
 80011a0:	9300      	str	r3, [sp, #0]
 80011a2:	2301      	movs	r3, #1
 80011a4:	22f5      	movs	r2, #245	@ 0xf5
 80011a6:	21ec      	movs	r1, #236	@ 0xec
 80011a8:	482f      	ldr	r0, [pc, #188]	@ (8001268 <BMP280_Config+0x148>)
 80011aa:	f001 fc63 	bl	8002a74 <HAL_I2C_Mem_Write>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d002      	beq.n	80011ba <BMP280_Config+0x9a>
	{
		return -1;
 80011b4:	f04f 33ff 	mov.w	r3, #4294967295
 80011b8:	e052      	b.n	8001260 <BMP280_Config+0x140>
	}
	HAL_Delay(100);
 80011ba:	2064      	movs	r0, #100	@ 0x64
 80011bc:	f001 f854 	bl	8002268 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDR, REG_CONFIG, 1, &datacheck, 1, 1000);
 80011c0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2301      	movs	r3, #1
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	f107 030e 	add.w	r3, r7, #14
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	22f5      	movs	r2, #245	@ 0xf5
 80011d4:	21ec      	movs	r1, #236	@ 0xec
 80011d6:	4824      	ldr	r0, [pc, #144]	@ (8001268 <BMP280_Config+0x148>)
 80011d8:	f001 fd46 	bl	8002c68 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80011dc:	7bba      	ldrb	r2, [r7, #14]
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d002      	beq.n	80011ea <BMP280_Config+0xca>
	{
		return -1;
 80011e4:	f04f 33ff 	mov.w	r3, #4294967295
 80011e8:	e03a      	b.n	8001260 <BMP280_Config+0x140>
	}

	datatowrite = (osrs_t << 5) | (osrs_p << 2) | mode;
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	015b      	lsls	r3, r3, #5
 80011ee:	b25a      	sxtb	r2, r3
 80011f0:	79bb      	ldrb	r3, [r7, #6]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	b25b      	sxtb	r3, r3
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25a      	sxtb	r2, r3
 80011fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80011fe:	4313      	orrs	r3, r2
 8001200:	b25b      	sxtb	r3, r3
 8001202:	b2db      	uxtb	r3, r3
 8001204:	73fb      	strb	r3, [r7, #15]
	if(HAL_I2C_Mem_Write(BMP280_I2C, BMP280_ADDR, REG_CTRL_MEAS, 1, &datatowrite, 1, 1000)!= HAL_OK)
 8001206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	2301      	movs	r3, #1
 800120e:	9301      	str	r3, [sp, #4]
 8001210:	f107 030f 	add.w	r3, r7, #15
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2301      	movs	r3, #1
 8001218:	22f4      	movs	r2, #244	@ 0xf4
 800121a:	21ec      	movs	r1, #236	@ 0xec
 800121c:	4812      	ldr	r0, [pc, #72]	@ (8001268 <BMP280_Config+0x148>)
 800121e:	f001 fc29 	bl	8002a74 <HAL_I2C_Mem_Write>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d002      	beq.n	800122e <BMP280_Config+0x10e>
	{
		return -1;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295
 800122c:	e018      	b.n	8001260 <BMP280_Config+0x140>
	}
	HAL_Delay(100);
 800122e:	2064      	movs	r0, #100	@ 0x64
 8001230:	f001 f81a 	bl	8002268 <HAL_Delay>
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDR, REG_CTRL_MEAS, 1, &datacheck, 1, 1000);
 8001234:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001238:	9302      	str	r3, [sp, #8]
 800123a:	2301      	movs	r3, #1
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	f107 030e 	add.w	r3, r7, #14
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	2301      	movs	r3, #1
 8001246:	22f4      	movs	r2, #244	@ 0xf4
 8001248:	21ec      	movs	r1, #236	@ 0xec
 800124a:	4807      	ldr	r0, [pc, #28]	@ (8001268 <BMP280_Config+0x148>)
 800124c:	f001 fd0c 	bl	8002c68 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001250:	7bba      	ldrb	r2, [r7, #14]
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	429a      	cmp	r2, r3
 8001256:	d002      	beq.n	800125e <BMP280_Config+0x13e>
	{
		return -1;
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	e000      	b.n	8001260 <BMP280_Config+0x140>
	}
	return 0;
 800125e:	2300      	movs	r3, #0
}
 8001260:	4618      	mov	r0, r3
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	bd90      	pop	{r4, r7, pc}
 8001268:	20000218 	.word	0x20000218

0800126c <BMP280_ReadRaw>:

int BMP280_ReadRaw(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af04      	add	r7, sp, #16
	uint8_t RawData[6];
	// check the device id before reading
	HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDR, REG_ID, 1, &chipID, 1, 1000);
 8001272:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001276:	9302      	str	r3, [sp, #8]
 8001278:	2301      	movs	r3, #1
 800127a:	9301      	str	r3, [sp, #4]
 800127c:	4b1c      	ldr	r3, [pc, #112]	@ (80012f0 <BMP280_ReadRaw+0x84>)
 800127e:	9300      	str	r3, [sp, #0]
 8001280:	2301      	movs	r3, #1
 8001282:	22d0      	movs	r2, #208	@ 0xd0
 8001284:	21ec      	movs	r1, #236	@ 0xec
 8001286:	481b      	ldr	r0, [pc, #108]	@ (80012f4 <BMP280_ReadRaw+0x88>)
 8001288:	f001 fcee 	bl	8002c68 <HAL_I2C_Mem_Read>
	if(chipID == 0x58)
 800128c:	4b18      	ldr	r3, [pc, #96]	@ (80012f0 <BMP280_ReadRaw+0x84>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b58      	cmp	r3, #88	@ 0x58
 8001292:	d126      	bne.n	80012e2 <BMP280_ReadRaw+0x76>
	{
		HAL_I2C_Mem_Read(BMP280_I2C, BMP280_ADDR, REG_PRESS, 1, RawData, 6, HAL_MAX_DELAY);
 8001294:	f04f 33ff 	mov.w	r3, #4294967295
 8001298:	9302      	str	r3, [sp, #8]
 800129a:	2306      	movs	r3, #6
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	463b      	mov	r3, r7
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	22f7      	movs	r2, #247	@ 0xf7
 80012a6:	21ec      	movs	r1, #236	@ 0xec
 80012a8:	4812      	ldr	r0, [pc, #72]	@ (80012f4 <BMP280_ReadRaw+0x88>)
 80012aa:	f001 fcdd 	bl	8002c68 <HAL_I2C_Mem_Read>
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 80012ae:	783b      	ldrb	r3, [r7, #0]
 80012b0:	031a      	lsls	r2, r3, #12
 80012b2:	787b      	ldrb	r3, [r7, #1]
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4313      	orrs	r3, r2
 80012b8:	78ba      	ldrb	r2, [r7, #2]
 80012ba:	0912      	lsrs	r2, r2, #4
 80012bc:	b2d2      	uxtb	r2, r2
 80012be:	4313      	orrs	r3, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4b0d      	ldr	r3, [pc, #52]	@ (80012f8 <BMP280_ReadRaw+0x8c>)
 80012c4:	601a      	str	r2, [r3, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80012c6:	78fb      	ldrb	r3, [r7, #3]
 80012c8:	031a      	lsls	r2, r3, #12
 80012ca:	793b      	ldrb	r3, [r7, #4]
 80012cc:	011b      	lsls	r3, r3, #4
 80012ce:	4313      	orrs	r3, r2
 80012d0:	797a      	ldrb	r2, [r7, #5]
 80012d2:	0912      	lsrs	r2, r2, #4
 80012d4:	b2d2      	uxtb	r2, r2
 80012d6:	4313      	orrs	r3, r2
 80012d8:	461a      	mov	r2, r3
 80012da:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <BMP280_ReadRaw+0x90>)
 80012dc:	601a      	str	r2, [r3, #0]

		return 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	e001      	b.n	80012e6 <BMP280_ReadRaw+0x7a>
	}
	else return -1;
 80012e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	200001f0 	.word	0x200001f0
 80012f4:	20000218 	.word	0x20000218
 80012f8:	200001f8 	.word	0x200001f8
 80012fc:	200001f4 	.word	0x200001f4

08001300 <BMP280_compensate_T_int32>:

}

int32_t t_fine;
int32_t BMP280_compensate_T_int32(int32_t adc_T)
{
 8001300:	b480      	push	{r7}
 8001302:	b087      	sub	sp, #28
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	10da      	asrs	r2, r3, #3
 800130c:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <BMP280_compensate_T_int32+0x74>)
 800130e:	881b      	ldrh	r3, [r3, #0]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	1ad3      	subs	r3, r2, r3
 8001314:	4a18      	ldr	r2, [pc, #96]	@ (8001378 <BMP280_compensate_T_int32+0x78>)
 8001316:	f9b2 2000 	ldrsh.w	r2, [r2]
 800131a:	fb02 f303 	mul.w	r3, r2, r3
 800131e:	12db      	asrs	r3, r3, #11
 8001320:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	111b      	asrs	r3, r3, #4
 8001326:	4a13      	ldr	r2, [pc, #76]	@ (8001374 <BMP280_compensate_T_int32+0x74>)
 8001328:	8812      	ldrh	r2, [r2, #0]
 800132a:	1a9b      	subs	r3, r3, r2
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	1112      	asrs	r2, r2, #4
 8001330:	4910      	ldr	r1, [pc, #64]	@ (8001374 <BMP280_compensate_T_int32+0x74>)
 8001332:	8809      	ldrh	r1, [r1, #0]
 8001334:	1a52      	subs	r2, r2, r1
 8001336:	fb02 f303 	mul.w	r3, r2, r3
 800133a:	131b      	asrs	r3, r3, #12
 800133c:	4a0f      	ldr	r2, [pc, #60]	@ (800137c <BMP280_compensate_T_int32+0x7c>)
 800133e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001342:	fb02 f303 	mul.w	r3, r2, r3
 8001346:	139b      	asrs	r3, r3, #14
 8001348:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 800134a:	697a      	ldr	r2, [r7, #20]
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	4413      	add	r3, r2
 8001350:	4a0b      	ldr	r2, [pc, #44]	@ (8001380 <BMP280_compensate_T_int32+0x80>)
 8001352:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8001354:	4b0a      	ldr	r3, [pc, #40]	@ (8001380 <BMP280_compensate_T_int32+0x80>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	3380      	adds	r3, #128	@ 0x80
 8001360:	121b      	asrs	r3, r3, #8
 8001362:	60fb      	str	r3, [r7, #12]
	return T;
 8001364:	68fb      	ldr	r3, [r7, #12]
}
 8001366:	4618      	mov	r0, r3
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	200001fc 	.word	0x200001fc
 8001378:	20000200 	.word	0x20000200
 800137c:	20000202 	.word	0x20000202
 8001380:	20000214 	.word	0x20000214

08001384 <BMP280_compensate_P_int64>:

uint32_t BMP280_compensate_P_int64(int32_t adc_P)
{
 8001384:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001388:	b0ca      	sub	sp, #296	@ 0x128
 800138a:	af00      	add	r7, sp, #0
 800138c:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001390:	4baf      	ldr	r3, [pc, #700]	@ (8001650 <BMP280_compensate_P_int64+0x2cc>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	17da      	asrs	r2, r3, #31
 8001396:	461c      	mov	r4, r3
 8001398:	4615      	mov	r5, r2
 800139a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800139e:	f145 3bff 	adc.w	fp, r5, #4294967295
 80013a2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 80013a6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013aa:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013ae:	fb03 f102 	mul.w	r1, r3, r2
 80013b2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80013b6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013ba:	fb02 f303 	mul.w	r3, r2, r3
 80013be:	18ca      	adds	r2, r1, r3
 80013c0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013c4:	fba3 8903 	umull	r8, r9, r3, r3
 80013c8:	eb02 0309 	add.w	r3, r2, r9
 80013cc:	4699      	mov	r9, r3
 80013ce:	4ba1      	ldr	r3, [pc, #644]	@ (8001654 <BMP280_compensate_P_int64+0x2d0>)
 80013d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013d4:	b21b      	sxth	r3, r3
 80013d6:	17da      	asrs	r2, r3, #31
 80013d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80013dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80013e0:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80013e4:	4603      	mov	r3, r0
 80013e6:	fb03 f209 	mul.w	r2, r3, r9
 80013ea:	460b      	mov	r3, r1
 80013ec:	fb08 f303 	mul.w	r3, r8, r3
 80013f0:	4413      	add	r3, r2
 80013f2:	4602      	mov	r2, r0
 80013f4:	fba8 1202 	umull	r1, r2, r8, r2
 80013f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80013fc:	460a      	mov	r2, r1
 80013fe:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001406:	4413      	add	r3, r2
 8001408:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800140c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001410:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001414:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001418:	4b8f      	ldr	r3, [pc, #572]	@ (8001658 <BMP280_compensate_P_int64+0x2d4>)
 800141a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800141e:	b21b      	sxth	r3, r3
 8001420:	17da      	asrs	r2, r3, #31
 8001422:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001426:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800142a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800142e:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001432:	462a      	mov	r2, r5
 8001434:	fb02 f203 	mul.w	r2, r2, r3
 8001438:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800143c:	4621      	mov	r1, r4
 800143e:	fb01 f303 	mul.w	r3, r1, r3
 8001442:	441a      	add	r2, r3
 8001444:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001448:	4621      	mov	r1, r4
 800144a:	fba3 1301 	umull	r1, r3, r3, r1
 800144e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001452:	460b      	mov	r3, r1
 8001454:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001458:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800145c:	18d3      	adds	r3, r2, r3
 800145e:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001462:	f04f 0000 	mov.w	r0, #0
 8001466:	f04f 0100 	mov.w	r1, #0
 800146a:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800146e:	462b      	mov	r3, r5
 8001470:	0459      	lsls	r1, r3, #17
 8001472:	4623      	mov	r3, r4
 8001474:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001478:	4623      	mov	r3, r4
 800147a:	0458      	lsls	r0, r3, #17
 800147c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001480:	1814      	adds	r4, r2, r0
 8001482:	643c      	str	r4, [r7, #64]	@ 0x40
 8001484:	414b      	adcs	r3, r1
 8001486:	647b      	str	r3, [r7, #68]	@ 0x44
 8001488:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800148c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001490:	4b72      	ldr	r3, [pc, #456]	@ (800165c <BMP280_compensate_P_int64+0x2d8>)
 8001492:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001496:	b21b      	sxth	r3, r3
 8001498:	17da      	asrs	r2, r3, #31
 800149a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800149e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80014a2:	f04f 0000 	mov.w	r0, #0
 80014a6:	f04f 0100 	mov.w	r1, #0
 80014aa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80014ae:	00d9      	lsls	r1, r3, #3
 80014b0:	2000      	movs	r0, #0
 80014b2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80014b6:	1814      	adds	r4, r2, r0
 80014b8:	63bc      	str	r4, [r7, #56]	@ 0x38
 80014ba:	414b      	adcs	r3, r1
 80014bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80014be:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80014c2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80014c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80014ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014ce:	fb03 f102 	mul.w	r1, r3, r2
 80014d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80014d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	18ca      	adds	r2, r1, r3
 80014e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014e4:	fba3 1303 	umull	r1, r3, r3, r3
 80014e8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80014ec:	460b      	mov	r3, r1
 80014ee:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80014f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80014f6:	18d3      	adds	r3, r2, r3
 80014f8:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80014fc:	4b58      	ldr	r3, [pc, #352]	@ (8001660 <BMP280_compensate_P_int64+0x2dc>)
 80014fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001502:	b21b      	sxth	r3, r3
 8001504:	17da      	asrs	r2, r3, #31
 8001506:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800150a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800150e:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001512:	462b      	mov	r3, r5
 8001514:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001518:	4642      	mov	r2, r8
 800151a:	fb02 f203 	mul.w	r2, r2, r3
 800151e:	464b      	mov	r3, r9
 8001520:	4621      	mov	r1, r4
 8001522:	fb01 f303 	mul.w	r3, r1, r3
 8001526:	4413      	add	r3, r2
 8001528:	4622      	mov	r2, r4
 800152a:	4641      	mov	r1, r8
 800152c:	fba2 1201 	umull	r1, r2, r2, r1
 8001530:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001534:	460a      	mov	r2, r1
 8001536:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800153a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800153e:	4413      	add	r3, r2
 8001540:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001544:	f04f 0000 	mov.w	r0, #0
 8001548:	f04f 0100 	mov.w	r1, #0
 800154c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001550:	4623      	mov	r3, r4
 8001552:	0a18      	lsrs	r0, r3, #8
 8001554:	462b      	mov	r3, r5
 8001556:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800155a:	462b      	mov	r3, r5
 800155c:	1219      	asrs	r1, r3, #8
 800155e:	4b41      	ldr	r3, [pc, #260]	@ (8001664 <BMP280_compensate_P_int64+0x2e0>)
 8001560:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001564:	b21b      	sxth	r3, r3
 8001566:	17da      	asrs	r2, r3, #31
 8001568:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800156c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001570:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001574:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001578:	464a      	mov	r2, r9
 800157a:	fb02 f203 	mul.w	r2, r2, r3
 800157e:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001582:	4644      	mov	r4, r8
 8001584:	fb04 f303 	mul.w	r3, r4, r3
 8001588:	441a      	add	r2, r3
 800158a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800158e:	4644      	mov	r4, r8
 8001590:	fba3 4304 	umull	r4, r3, r3, r4
 8001594:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001598:	4623      	mov	r3, r4
 800159a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800159e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80015a2:	18d3      	adds	r3, r2, r3
 80015a4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80015a8:	f04f 0200 	mov.w	r2, #0
 80015ac:	f04f 0300 	mov.w	r3, #0
 80015b0:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80015b4:	464c      	mov	r4, r9
 80015b6:	0323      	lsls	r3, r4, #12
 80015b8:	4644      	mov	r4, r8
 80015ba:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80015be:	4644      	mov	r4, r8
 80015c0:	0322      	lsls	r2, r4, #12
 80015c2:	1884      	adds	r4, r0, r2
 80015c4:	633c      	str	r4, [r7, #48]	@ 0x30
 80015c6:	eb41 0303 	adc.w	r3, r1, r3
 80015ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80015cc:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80015d0:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80015d4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80015d8:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80015dc:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80015e0:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80015e4:	4b20      	ldr	r3, [pc, #128]	@ (8001668 <BMP280_compensate_P_int64+0x2e4>)
 80015e6:	881b      	ldrh	r3, [r3, #0]
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	2200      	movs	r2, #0
 80015ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80015f0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80015f4:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80015f8:	462b      	mov	r3, r5
 80015fa:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80015fe:	4642      	mov	r2, r8
 8001600:	fb02 f203 	mul.w	r2, r2, r3
 8001604:	464b      	mov	r3, r9
 8001606:	4621      	mov	r1, r4
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	4413      	add	r3, r2
 800160e:	4622      	mov	r2, r4
 8001610:	4641      	mov	r1, r8
 8001612:	fba2 1201 	umull	r1, r2, r2, r1
 8001616:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800161a:	460a      	mov	r2, r1
 800161c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001620:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001624:	4413      	add	r3, r2
 8001626:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001636:	4629      	mov	r1, r5
 8001638:	104a      	asrs	r2, r1, #1
 800163a:	4629      	mov	r1, r5
 800163c:	17cb      	asrs	r3, r1, #31
 800163e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 8001642:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001646:	4313      	orrs	r3, r2
 8001648:	d110      	bne.n	800166c <BMP280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 800164a:	2300      	movs	r3, #0
 800164c:	e154      	b.n	80018f8 <BMP280_compensate_P_int64+0x574>
 800164e:	bf00      	nop
 8001650:	20000214 	.word	0x20000214
 8001654:	2000020c 	.word	0x2000020c
 8001658:	2000020a 	.word	0x2000020a
 800165c:	20000208 	.word	0x20000208
 8001660:	20000206 	.word	0x20000206
 8001664:	20000204 	.word	0x20000204
 8001668:	200001fe 	.word	0x200001fe
	}
	p = 1048576-adc_P;
 800166c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001670:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001674:	17da      	asrs	r2, r3, #31
 8001676:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001678:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800167a:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800167e:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 8001682:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001686:	105b      	asrs	r3, r3, #1
 8001688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800168c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001690:	07db      	lsls	r3, r3, #31
 8001692:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001696:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800169a:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800169e:	4621      	mov	r1, r4
 80016a0:	1a89      	subs	r1, r1, r2
 80016a2:	67b9      	str	r1, [r7, #120]	@ 0x78
 80016a4:	4629      	mov	r1, r5
 80016a6:	eb61 0303 	sbc.w	r3, r1, r3
 80016aa:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80016ac:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80016b0:	4622      	mov	r2, r4
 80016b2:	462b      	mov	r3, r5
 80016b4:	1891      	adds	r1, r2, r2
 80016b6:	6239      	str	r1, [r7, #32]
 80016b8:	415b      	adcs	r3, r3
 80016ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80016bc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016c0:	4621      	mov	r1, r4
 80016c2:	1851      	adds	r1, r2, r1
 80016c4:	61b9      	str	r1, [r7, #24]
 80016c6:	4629      	mov	r1, r5
 80016c8:	414b      	adcs	r3, r1
 80016ca:	61fb      	str	r3, [r7, #28]
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80016d8:	4649      	mov	r1, r9
 80016da:	018b      	lsls	r3, r1, #6
 80016dc:	4641      	mov	r1, r8
 80016de:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e2:	4641      	mov	r1, r8
 80016e4:	018a      	lsls	r2, r1, #6
 80016e6:	4641      	mov	r1, r8
 80016e8:	1889      	adds	r1, r1, r2
 80016ea:	6139      	str	r1, [r7, #16]
 80016ec:	4649      	mov	r1, r9
 80016ee:	eb43 0101 	adc.w	r1, r3, r1
 80016f2:	6179      	str	r1, [r7, #20]
 80016f4:	f04f 0200 	mov.w	r2, #0
 80016f8:	f04f 0300 	mov.w	r3, #0
 80016fc:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001700:	4649      	mov	r1, r9
 8001702:	008b      	lsls	r3, r1, #2
 8001704:	4641      	mov	r1, r8
 8001706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800170a:	4641      	mov	r1, r8
 800170c:	008a      	lsls	r2, r1, #2
 800170e:	4610      	mov	r0, r2
 8001710:	4619      	mov	r1, r3
 8001712:	4603      	mov	r3, r0
 8001714:	4622      	mov	r2, r4
 8001716:	189b      	adds	r3, r3, r2
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	460b      	mov	r3, r1
 800171c:	462a      	mov	r2, r5
 800171e:	eb42 0303 	adc.w	r3, r2, r3
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	f04f 0200 	mov.w	r2, #0
 8001728:	f04f 0300 	mov.w	r3, #0
 800172c:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001730:	4649      	mov	r1, r9
 8001732:	008b      	lsls	r3, r1, #2
 8001734:	4641      	mov	r1, r8
 8001736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800173a:	4641      	mov	r1, r8
 800173c:	008a      	lsls	r2, r1, #2
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	4603      	mov	r3, r0
 8001744:	4622      	mov	r2, r4
 8001746:	189b      	adds	r3, r3, r2
 8001748:	673b      	str	r3, [r7, #112]	@ 0x70
 800174a:	462b      	mov	r3, r5
 800174c:	460a      	mov	r2, r1
 800174e:	eb42 0303 	adc.w	r3, r2, r3
 8001752:	677b      	str	r3, [r7, #116]	@ 0x74
 8001754:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001758:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800175c:	f7ff fa7c 	bl	8000c58 <__aeabi_ldivmod>
 8001760:	4602      	mov	r2, r0
 8001762:	460b      	mov	r3, r1
 8001764:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001768:	4b66      	ldr	r3, [pc, #408]	@ (8001904 <BMP280_compensate_P_int64+0x580>)
 800176a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800176e:	b21b      	sxth	r3, r3
 8001770:	17da      	asrs	r2, r3, #31
 8001772:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001774:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001776:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800177a:	f04f 0000 	mov.w	r0, #0
 800177e:	f04f 0100 	mov.w	r1, #0
 8001782:	0b50      	lsrs	r0, r2, #13
 8001784:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001788:	1359      	asrs	r1, r3, #13
 800178a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800178e:	462b      	mov	r3, r5
 8001790:	fb00 f203 	mul.w	r2, r0, r3
 8001794:	4623      	mov	r3, r4
 8001796:	fb03 f301 	mul.w	r3, r3, r1
 800179a:	4413      	add	r3, r2
 800179c:	4622      	mov	r2, r4
 800179e:	fba2 1200 	umull	r1, r2, r2, r0
 80017a2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80017a6:	460a      	mov	r2, r1
 80017a8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80017ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80017b0:	4413      	add	r3, r2
 80017b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80017b6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80017ba:	f04f 0000 	mov.w	r0, #0
 80017be:	f04f 0100 	mov.w	r1, #0
 80017c2:	0b50      	lsrs	r0, r2, #13
 80017c4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80017c8:	1359      	asrs	r1, r3, #13
 80017ca:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80017ce:	462b      	mov	r3, r5
 80017d0:	fb00 f203 	mul.w	r2, r0, r3
 80017d4:	4623      	mov	r3, r4
 80017d6:	fb03 f301 	mul.w	r3, r3, r1
 80017da:	4413      	add	r3, r2
 80017dc:	4622      	mov	r2, r4
 80017de:	fba2 1200 	umull	r1, r2, r2, r0
 80017e2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80017e6:	460a      	mov	r2, r1
 80017e8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80017ec:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80017f0:	4413      	add	r3, r2
 80017f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80017f6:	f04f 0200 	mov.w	r2, #0
 80017fa:	f04f 0300 	mov.w	r3, #0
 80017fe:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001802:	4621      	mov	r1, r4
 8001804:	0e4a      	lsrs	r2, r1, #25
 8001806:	4629      	mov	r1, r5
 8001808:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800180c:	4629      	mov	r1, r5
 800180e:	164b      	asrs	r3, r1, #25
 8001810:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 8001814:	4b3c      	ldr	r3, [pc, #240]	@ (8001908 <BMP280_compensate_P_int64+0x584>)
 8001816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181a:	b21b      	sxth	r3, r3
 800181c:	17da      	asrs	r2, r3, #31
 800181e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001820:	667a      	str	r2, [r7, #100]	@ 0x64
 8001822:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001826:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800182a:	462a      	mov	r2, r5
 800182c:	fb02 f203 	mul.w	r2, r2, r3
 8001830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001834:	4621      	mov	r1, r4
 8001836:	fb01 f303 	mul.w	r3, r1, r3
 800183a:	4413      	add	r3, r2
 800183c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001840:	4621      	mov	r1, r4
 8001842:	fba2 1201 	umull	r1, r2, r2, r1
 8001846:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800184a:	460a      	mov	r2, r1
 800184c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001850:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001854:	4413      	add	r3, r2
 8001856:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800185a:	f04f 0200 	mov.w	r2, #0
 800185e:	f04f 0300 	mov.w	r3, #0
 8001862:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001866:	4621      	mov	r1, r4
 8001868:	0cca      	lsrs	r2, r1, #19
 800186a:	4629      	mov	r1, r5
 800186c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001870:	4629      	mov	r1, r5
 8001872:	14cb      	asrs	r3, r1, #19
 8001874:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001878:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800187c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001880:	1884      	adds	r4, r0, r2
 8001882:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001884:	eb41 0303 	adc.w	r3, r1, r3
 8001888:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800188a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800188e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001892:	4621      	mov	r1, r4
 8001894:	1889      	adds	r1, r1, r2
 8001896:	6539      	str	r1, [r7, #80]	@ 0x50
 8001898:	4629      	mov	r1, r5
 800189a:	eb43 0101 	adc.w	r1, r3, r1
 800189e:	6579      	str	r1, [r7, #84]	@ 0x54
 80018a0:	f04f 0000 	mov.w	r0, #0
 80018a4:	f04f 0100 	mov.w	r1, #0
 80018a8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80018ac:	4623      	mov	r3, r4
 80018ae:	0a18      	lsrs	r0, r3, #8
 80018b0:	462b      	mov	r3, r5
 80018b2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80018b6:	462b      	mov	r3, r5
 80018b8:	1219      	asrs	r1, r3, #8
 80018ba:	4b14      	ldr	r3, [pc, #80]	@ (800190c <BMP280_compensate_P_int64+0x588>)
 80018bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c0:	b21b      	sxth	r3, r3
 80018c2:	17da      	asrs	r2, r3, #31
 80018c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80018c6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80018d4:	464c      	mov	r4, r9
 80018d6:	0123      	lsls	r3, r4, #4
 80018d8:	4644      	mov	r4, r8
 80018da:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80018de:	4644      	mov	r4, r8
 80018e0:	0122      	lsls	r2, r4, #4
 80018e2:	1884      	adds	r4, r0, r2
 80018e4:	603c      	str	r4, [r7, #0]
 80018e6:	eb41 0303 	adc.w	r3, r1, r3
 80018ea:	607b      	str	r3, [r7, #4]
 80018ec:	e9d7 3400 	ldrd	r3, r4, [r7]
 80018f0:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80018f4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80018fe:	46bd      	mov	sp, r7
 8001900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001904:	20000212 	.word	0x20000212
 8001908:	20000210 	.word	0x20000210
 800190c:	2000020e 	.word	0x2000020e

08001910 <BMP280_Get_Press>:


float BMP280_Get_Press()
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
	float Press;
	if(BMP280_ReadRaw() == 0)
 8001916:	f7ff fca9 	bl	800126c <BMP280_ReadRaw>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d11e      	bne.n	800195e <BMP280_Get_Press+0x4e>
	{
		if(pRaw==0x800000)  Press = 0.0;
 8001920:	4b13      	ldr	r3, [pc, #76]	@ (8001970 <BMP280_Get_Press+0x60>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001928:	d103      	bne.n	8001932 <BMP280_Get_Press+0x22>
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	e015      	b.n	800195e <BMP280_Get_Press+0x4e>
		else
		{
			Press =(BMP280_compensate_P_int64(pRaw))/256.0;
 8001932:	4b0f      	ldr	r3, [pc, #60]	@ (8001970 <BMP280_Get_Press+0x60>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fd24 	bl	8001384 <BMP280_compensate_P_int64>
 800193c:	4603      	mov	r3, r0
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fde8 	bl	8000514 <__aeabi_ui2d>
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <BMP280_Get_Press+0x64>)
 800194a:	f7fe ff87 	bl	800085c <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f7ff f92f 	bl	8000bb8 <__aeabi_d2f>
 800195a:	4603      	mov	r3, r0
 800195c:	607b      	str	r3, [r7, #4]
		}
	}
	return Press;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	ee07 3a90 	vmov	s15, r3
}
 8001964:	eeb0 0a67 	vmov.f32	s0, s15
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	200001f8 	.word	0x200001f8
 8001974:	40700000 	.word	0x40700000

08001978 <BMP280_Get_Temp>:
float BMP280_Get_Temp()
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
	float Temp;
	if(BMP280_ReadRaw() == 0)
 800197e:	f7ff fc75 	bl	800126c <BMP280_ReadRaw>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d11e      	bne.n	80019c6 <BMP280_Get_Temp+0x4e>
	{
		if(tRaw==0x800000)  Temp = 0.0;
 8001988:	4b13      	ldr	r3, [pc, #76]	@ (80019d8 <BMP280_Get_Temp+0x60>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001990:	d103      	bne.n	800199a <BMP280_Get_Temp+0x22>
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	607b      	str	r3, [r7, #4]
 8001998:	e015      	b.n	80019c6 <BMP280_Get_Temp+0x4e>
		else
		{
			Temp =(BMP280_compensate_T_int32(tRaw))/100.0;
 800199a:	4b0f      	ldr	r3, [pc, #60]	@ (80019d8 <BMP280_Get_Temp+0x60>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff fcae 	bl	8001300 <BMP280_compensate_T_int32>
 80019a4:	4603      	mov	r3, r0
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe fdc4 	bl	8000534 <__aeabi_i2d>
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b0a      	ldr	r3, [pc, #40]	@ (80019dc <BMP280_Get_Temp+0x64>)
 80019b2:	f7fe ff53 	bl	800085c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f8fb 	bl	8000bb8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	607b      	str	r3, [r7, #4]
		}
	}
	return Temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	ee07 3a90 	vmov	s15, r3
}
 80019cc:	eeb0 0a67 	vmov.f32	s0, s15
 80019d0:	3708      	adds	r7, #8
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200001f4 	.word	0x200001f4
 80019dc:	40590000 	.word	0x40590000

080019e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e0:	b590      	push	{r4, r7, lr}
 80019e2:	b09d      	sub	sp, #116	@ 0x74
 80019e4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019e6:	f000 fbcd 	bl	8002184 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019ea:	f000 f8ad 	bl	8001b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019ee:	f000 f96b 	bl	8001cc8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80019f2:	f000 f93f 	bl	8001c74 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80019f6:	f000 f90f 	bl	8001c18 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BMP280_Config(OSRS_2, OSRS_16, MODE_NORMAL, T_SB_0p5, IRR_16);
 80019fa:	2304      	movs	r3, #4
 80019fc:	9300      	str	r3, [sp, #0]
 80019fe:	2300      	movs	r3, #0
 8001a00:	2203      	movs	r2, #3
 8001a02:	2105      	movs	r1, #5
 8001a04:	2002      	movs	r0, #2
 8001a06:	f7ff fb8b 	bl	8001120 <BMP280_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	tTemp = Temp = BMP280_Get_Temp();
 8001a0a:	f7ff ffb5 	bl	8001978 <BMP280_Get_Temp>
 8001a0e:	eef0 7a40 	vmov.f32	s15, s0
 8001a12:	4b42      	ldr	r3, [pc, #264]	@ (8001b1c <main+0x13c>)
 8001a14:	edc3 7a00 	vstr	s15, [r3]
 8001a18:	4b40      	ldr	r3, [pc, #256]	@ (8001b1c <main+0x13c>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a40      	ldr	r2, [pc, #256]	@ (8001b20 <main+0x140>)
 8001a1e:	6013      	str	r3, [r2, #0]
	tPress = Press = BMP280_Get_Press();
 8001a20:	f7ff ff76 	bl	8001910 <BMP280_Get_Press>
 8001a24:	eef0 7a40 	vmov.f32	s15, s0
 8001a28:	4b3e      	ldr	r3, [pc, #248]	@ (8001b24 <main+0x144>)
 8001a2a:	edc3 7a00 	vstr	s15, [r3]
 8001a2e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b24 <main+0x144>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a3d      	ldr	r2, [pc, #244]	@ (8001b28 <main+0x148>)
 8001a34:	6013      	str	r3, [r2, #0]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8001a36:	2120      	movs	r1, #32
 8001a38:	483c      	ldr	r0, [pc, #240]	@ (8001b2c <main+0x14c>)
 8001a3a:	f000 febc 	bl	80027b6 <HAL_GPIO_TogglePin>
	HAL_Delay(50);
 8001a3e:	2032      	movs	r0, #50	@ 0x32
 8001a40:	f000 fc12 	bl	8002268 <HAL_Delay>
	tTemp *= 1000;
 8001a44:	4b36      	ldr	r3, [pc, #216]	@ (8001b20 <main+0x140>)
 8001a46:	edd3 7a00 	vldr	s15, [r3]
 8001a4a:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 8001b30 <main+0x150>
 8001a4e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a52:	4b33      	ldr	r3, [pc, #204]	@ (8001b20 <main+0x140>)
 8001a54:	edc3 7a00 	vstr	s15, [r3]
	sprintf(buff,"sicaklik= %d.%d\n",(int)tTemp/1000,(int)tTemp%1000);
 8001a58:	4b31      	ldr	r3, [pc, #196]	@ (8001b20 <main+0x140>)
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a62:	ee17 1a90 	vmov	r1, s15
 8001a66:	4b33      	ldr	r3, [pc, #204]	@ (8001b34 <main+0x154>)
 8001a68:	fb83 2301 	smull	r2, r3, r3, r1
 8001a6c:	119a      	asrs	r2, r3, #6
 8001a6e:	17cb      	asrs	r3, r1, #31
 8001a70:	1ad4      	subs	r4, r2, r3
 8001a72:	4b2b      	ldr	r3, [pc, #172]	@ (8001b20 <main+0x140>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a7c:	ee17 2a90 	vmov	r2, s15
 8001a80:	4b2c      	ldr	r3, [pc, #176]	@ (8001b34 <main+0x154>)
 8001a82:	fb83 1302 	smull	r1, r3, r3, r2
 8001a86:	1199      	asrs	r1, r3, #6
 8001a88:	17d3      	asrs	r3, r2, #31
 8001a8a:	1acb      	subs	r3, r1, r3
 8001a8c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a90:	fb01 f303 	mul.w	r3, r1, r3
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	1d38      	adds	r0, r7, #4
 8001a98:	4622      	mov	r2, r4
 8001a9a:	4927      	ldr	r1, [pc, #156]	@ (8001b38 <main+0x158>)
 8001a9c:	f003 fc88 	bl	80053b0 <siprintf>
	HAL_UART_Transmit(&huart2, buff, strlen(buff), 10000);
 8001aa0:	1d3b      	adds	r3, r7, #4
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fbec 	bl	8000280 <strlen>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	1d39      	adds	r1, r7, #4
 8001aae:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001ab2:	4822      	ldr	r0, [pc, #136]	@ (8001b3c <main+0x15c>)
 8001ab4:	f002 fba6 	bl	8004204 <HAL_UART_Transmit>
	sprintf(buff,"basinc = %d.%d\n",(int)tPress/100,(int)tPress%100);
 8001ab8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b28 <main+0x148>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac2:	ee17 1a90 	vmov	r1, s15
 8001ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b40 <main+0x160>)
 8001ac8:	fb83 2301 	smull	r2, r3, r3, r1
 8001acc:	115a      	asrs	r2, r3, #5
 8001ace:	17cb      	asrs	r3, r1, #31
 8001ad0:	1ad4      	subs	r4, r2, r3
 8001ad2:	4b15      	ldr	r3, [pc, #84]	@ (8001b28 <main+0x148>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001adc:	ee17 2a90 	vmov	r2, s15
 8001ae0:	4b17      	ldr	r3, [pc, #92]	@ (8001b40 <main+0x160>)
 8001ae2:	fb83 1302 	smull	r1, r3, r3, r2
 8001ae6:	1159      	asrs	r1, r3, #5
 8001ae8:	17d3      	asrs	r3, r2, #31
 8001aea:	1acb      	subs	r3, r1, r3
 8001aec:	2164      	movs	r1, #100	@ 0x64
 8001aee:	fb01 f303 	mul.w	r3, r1, r3
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	1d38      	adds	r0, r7, #4
 8001af6:	4622      	mov	r2, r4
 8001af8:	4912      	ldr	r1, [pc, #72]	@ (8001b44 <main+0x164>)
 8001afa:	f003 fc59 	bl	80053b0 <siprintf>
	HAL_UART_Transmit(&huart2, buff, strlen(buff), 10000);
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	4618      	mov	r0, r3
 8001b02:	f7fe fbbd 	bl	8000280 <strlen>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	1d39      	adds	r1, r7, #4
 8001b0c:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001b10:	480a      	ldr	r0, [pc, #40]	@ (8001b3c <main+0x15c>)
 8001b12:	f002 fb77 	bl	8004204 <HAL_UART_Transmit>
	tTemp = Temp = BMP280_Get_Temp();
 8001b16:	bf00      	nop
 8001b18:	e777      	b.n	8001a0a <main+0x2a>
 8001b1a:	bf00      	nop
 8001b1c:	200002b4 	.word	0x200002b4
 8001b20:	200002bc 	.word	0x200002bc
 8001b24:	200002b8 	.word	0x200002b8
 8001b28:	200002c0 	.word	0x200002c0
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	447a0000 	.word	0x447a0000
 8001b34:	10624dd3 	.word	0x10624dd3
 8001b38:	08007620 	.word	0x08007620
 8001b3c:	2000026c 	.word	0x2000026c
 8001b40:	51eb851f 	.word	0x51eb851f
 8001b44:	08007634 	.word	0x08007634

08001b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b094      	sub	sp, #80	@ 0x50
 8001b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b4e:	f107 0320 	add.w	r3, r7, #32
 8001b52:	2230      	movs	r2, #48	@ 0x30
 8001b54:	2100      	movs	r1, #0
 8001b56:	4618      	mov	r0, r3
 8001b58:	f003 fc8d 	bl	8005476 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b5c:	f107 030c 	add.w	r3, r7, #12
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
 8001b66:	609a      	str	r2, [r3, #8]
 8001b68:	60da      	str	r2, [r3, #12]
 8001b6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	4b27      	ldr	r3, [pc, #156]	@ (8001c10 <SystemClock_Config+0xc8>)
 8001b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b74:	4a26      	ldr	r2, [pc, #152]	@ (8001c10 <SystemClock_Config+0xc8>)
 8001b76:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7c:	4b24      	ldr	r3, [pc, #144]	@ (8001c10 <SystemClock_Config+0xc8>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b80:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	60bb      	str	r3, [r7, #8]
 8001b86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b88:	2300      	movs	r3, #0
 8001b8a:	607b      	str	r3, [r7, #4]
 8001b8c:	4b21      	ldr	r3, [pc, #132]	@ (8001c14 <SystemClock_Config+0xcc>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a20      	ldr	r2, [pc, #128]	@ (8001c14 <SystemClock_Config+0xcc>)
 8001b92:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001b96:	6013      	str	r3, [r2, #0]
 8001b98:	4b1e      	ldr	r3, [pc, #120]	@ (8001c14 <SystemClock_Config+0xcc>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ba0:	607b      	str	r3, [r7, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bac:	2310      	movs	r3, #16
 8001bae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001bb8:	2308      	movs	r3, #8
 8001bba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001bbc:	2364      	movs	r3, #100	@ 0x64
 8001bbe:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bc0:	2302      	movs	r3, #2
 8001bc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001bc4:	2304      	movs	r3, #4
 8001bc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bc8:	f107 0320 	add.w	r3, r7, #32
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f001 fe31 	bl	8003834 <HAL_RCC_OscConfig>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001bd8:	f000 f8e4 	bl	8001da4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001bdc:	230f      	movs	r3, #15
 8001bde:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001be0:	2302      	movs	r3, #2
 8001be2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001be8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001bf2:	f107 030c 	add.w	r3, r7, #12
 8001bf6:	2103      	movs	r1, #3
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 f893 	bl	8003d24 <HAL_RCC_ClockConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c04:	f000 f8ce 	bl	8001da4 <Error_Handler>
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3750      	adds	r7, #80	@ 0x50
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40007000 	.word	0x40007000

08001c18 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	@ (8001c68 <MX_I2C1_Init+0x50>)
 8001c1e:	4a13      	ldr	r2, [pc, #76]	@ (8001c6c <MX_I2C1_Init+0x54>)
 8001c20:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c22:	4b11      	ldr	r3, [pc, #68]	@ (8001c68 <MX_I2C1_Init+0x50>)
 8001c24:	4a12      	ldr	r2, [pc, #72]	@ (8001c70 <MX_I2C1_Init+0x58>)
 8001c26:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	@ (8001c68 <MX_I2C1_Init+0x50>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001c68 <MX_I2C1_Init+0x50>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c34:	4b0c      	ldr	r3, [pc, #48]	@ (8001c68 <MX_I2C1_Init+0x50>)
 8001c36:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001c3a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	@ (8001c68 <MX_I2C1_Init+0x50>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c42:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <MX_I2C1_Init+0x50>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c48:	4b07      	ldr	r3, [pc, #28]	@ (8001c68 <MX_I2C1_Init+0x50>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <MX_I2C1_Init+0x50>)
 8001c50:	2200      	movs	r2, #0
 8001c52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c54:	4804      	ldr	r0, [pc, #16]	@ (8001c68 <MX_I2C1_Init+0x50>)
 8001c56:	f000 fdc9 	bl	80027ec <HAL_I2C_Init>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c60:	f000 f8a0 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	20000218 	.word	0x20000218
 8001c6c:	40005400 	.word	0x40005400
 8001c70:	00061a80 	.word	0x00061a80

08001c74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c78:	4b11      	ldr	r3, [pc, #68]	@ (8001cc0 <MX_USART2_UART_Init+0x4c>)
 8001c7a:	4a12      	ldr	r2, [pc, #72]	@ (8001cc4 <MX_USART2_UART_Init+0x50>)
 8001c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <MX_USART2_UART_Init+0x4c>)
 8001c80:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c86:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc0 <MX_USART2_UART_Init+0x4c>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc0 <MX_USART2_UART_Init+0x4c>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c92:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc0 <MX_USART2_UART_Init+0x4c>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c98:	4b09      	ldr	r3, [pc, #36]	@ (8001cc0 <MX_USART2_UART_Init+0x4c>)
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c9e:	4b08      	ldr	r3, [pc, #32]	@ (8001cc0 <MX_USART2_UART_Init+0x4c>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <MX_USART2_UART_Init+0x4c>)
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001caa:	4805      	ldr	r0, [pc, #20]	@ (8001cc0 <MX_USART2_UART_Init+0x4c>)
 8001cac:	f002 fa5a 	bl	8004164 <HAL_UART_Init>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cb6:	f000 f875 	bl	8001da4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	2000026c 	.word	0x2000026c
 8001cc4:	40004400 	.word	0x40004400

08001cc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	@ 0x28
 8001ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	605a      	str	r2, [r3, #4]
 8001cd8:	609a      	str	r2, [r3, #8]
 8001cda:	60da      	str	r2, [r3, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cde:	2300      	movs	r3, #0
 8001ce0:	613b      	str	r3, [r7, #16]
 8001ce2:	4b2d      	ldr	r3, [pc, #180]	@ (8001d98 <MX_GPIO_Init+0xd0>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	4a2c      	ldr	r2, [pc, #176]	@ (8001d98 <MX_GPIO_Init+0xd0>)
 8001ce8:	f043 0304 	orr.w	r3, r3, #4
 8001cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cee:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <MX_GPIO_Init+0xd0>)
 8001cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	613b      	str	r3, [r7, #16]
 8001cf8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	60fb      	str	r3, [r7, #12]
 8001cfe:	4b26      	ldr	r3, [pc, #152]	@ (8001d98 <MX_GPIO_Init+0xd0>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d02:	4a25      	ldr	r2, [pc, #148]	@ (8001d98 <MX_GPIO_Init+0xd0>)
 8001d04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0a:	4b23      	ldr	r3, [pc, #140]	@ (8001d98 <MX_GPIO_Init+0xd0>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	60bb      	str	r3, [r7, #8]
 8001d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8001d98 <MX_GPIO_Init+0xd0>)
 8001d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8001d98 <MX_GPIO_Init+0xd0>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d26:	4b1c      	ldr	r3, [pc, #112]	@ (8001d98 <MX_GPIO_Init+0xd0>)
 8001d28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60bb      	str	r3, [r7, #8]
 8001d30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	607b      	str	r3, [r7, #4]
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <MX_GPIO_Init+0xd0>)
 8001d38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3a:	4a17      	ldr	r2, [pc, #92]	@ (8001d98 <MX_GPIO_Init+0xd0>)
 8001d3c:	f043 0302 	orr.w	r3, r3, #2
 8001d40:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <MX_GPIO_Init+0xd0>)
 8001d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d46:	f003 0302 	and.w	r3, r3, #2
 8001d4a:	607b      	str	r3, [r7, #4]
 8001d4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2120      	movs	r1, #32
 8001d52:	4812      	ldr	r0, [pc, #72]	@ (8001d9c <MX_GPIO_Init+0xd4>)
 8001d54:	f000 fd16 	bl	8002784 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d5e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	480c      	ldr	r0, [pc, #48]	@ (8001da0 <MX_GPIO_Init+0xd8>)
 8001d70:	f000 fb84 	bl	800247c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001d74:	2320      	movs	r3, #32
 8001d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d80:	2300      	movs	r3, #0
 8001d82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 8001d84:	f107 0314 	add.w	r3, r7, #20
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4804      	ldr	r0, [pc, #16]	@ (8001d9c <MX_GPIO_Init+0xd4>)
 8001d8c:	f000 fb76 	bl	800247c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d90:	bf00      	nop
 8001d92:	3728      	adds	r7, #40	@ 0x28
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40023800 	.word	0x40023800
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	40020800 	.word	0x40020800

08001da4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001da8:	b672      	cpsid	i
}
 8001daa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dac:	bf00      	nop
 8001dae:	e7fd      	b.n	8001dac <Error_Handler+0x8>

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b10      	ldr	r3, [pc, #64]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	4b09      	ldr	r3, [pc, #36]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	4a08      	ldr	r2, [pc, #32]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de2:	4b06      	ldr	r3, [pc, #24]	@ (8001dfc <HAL_MspInit+0x4c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dee:	2007      	movs	r0, #7
 8001df0:	f000 fb10 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800

08001e00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b08a      	sub	sp, #40	@ 0x28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]
 8001e10:	605a      	str	r2, [r3, #4]
 8001e12:	609a      	str	r2, [r3, #8]
 8001e14:	60da      	str	r2, [r3, #12]
 8001e16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a19      	ldr	r2, [pc, #100]	@ (8001e84 <HAL_I2C_MspInit+0x84>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d12c      	bne.n	8001e7c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	613b      	str	r3, [r7, #16]
 8001e26:	4b18      	ldr	r3, [pc, #96]	@ (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e2a:	4a17      	ldr	r2, [pc, #92]	@ (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e2c:	f043 0302 	orr.w	r3, r3, #2
 8001e30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e32:	4b15      	ldr	r3, [pc, #84]	@ (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	613b      	str	r3, [r7, #16]
 8001e3c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001e3e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001e42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e44:	2312      	movs	r3, #18
 8001e46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e50:	2304      	movs	r3, #4
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 0314 	add.w	r3, r7, #20
 8001e58:	4619      	mov	r1, r3
 8001e5a:	480c      	ldr	r0, [pc, #48]	@ (8001e8c <HAL_I2C_MspInit+0x8c>)
 8001e5c:	f000 fb0e 	bl	800247c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	4b08      	ldr	r3, [pc, #32]	@ (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e68:	4a07      	ldr	r2, [pc, #28]	@ (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e70:	4b05      	ldr	r3, [pc, #20]	@ (8001e88 <HAL_I2C_MspInit+0x88>)
 8001e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e78:	60fb      	str	r3, [r7, #12]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e7c:	bf00      	nop
 8001e7e:	3728      	adds	r7, #40	@ 0x28
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	40005400 	.word	0x40005400
 8001e88:	40023800 	.word	0x40023800
 8001e8c:	40020400 	.word	0x40020400

08001e90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b08a      	sub	sp, #40	@ 0x28
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 0314 	add.w	r3, r7, #20
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a19      	ldr	r2, [pc, #100]	@ (8001f14 <HAL_UART_MspInit+0x84>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d12b      	bne.n	8001f0a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
 8001eb6:	4b18      	ldr	r3, [pc, #96]	@ (8001f18 <HAL_UART_MspInit+0x88>)
 8001eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eba:	4a17      	ldr	r2, [pc, #92]	@ (8001f18 <HAL_UART_MspInit+0x88>)
 8001ebc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ec0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ec2:	4b15      	ldr	r3, [pc, #84]	@ (8001f18 <HAL_UART_MspInit+0x88>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <HAL_UART_MspInit+0x88>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <HAL_UART_MspInit+0x88>)
 8001ed8:	f043 0301 	orr.w	r3, r3, #1
 8001edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ede:	4b0e      	ldr	r3, [pc, #56]	@ (8001f18 <HAL_UART_MspInit+0x88>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001eea:	230c      	movs	r3, #12
 8001eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eee:	2302      	movs	r3, #2
 8001ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001efa:	2307      	movs	r3, #7
 8001efc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efe:	f107 0314 	add.w	r3, r7, #20
 8001f02:	4619      	mov	r1, r3
 8001f04:	4805      	ldr	r0, [pc, #20]	@ (8001f1c <HAL_UART_MspInit+0x8c>)
 8001f06:	f000 fab9 	bl	800247c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f0a:	bf00      	nop
 8001f0c:	3728      	adds	r7, #40	@ 0x28
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40004400 	.word	0x40004400
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	40020000 	.word	0x40020000

08001f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f24:	bf00      	nop
 8001f26:	e7fd      	b.n	8001f24 <NMI_Handler+0x4>

08001f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f2c:	bf00      	nop
 8001f2e:	e7fd      	b.n	8001f2c <HardFault_Handler+0x4>

08001f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f30:	b480      	push	{r7}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f34:	bf00      	nop
 8001f36:	e7fd      	b.n	8001f34 <MemManage_Handler+0x4>

08001f38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <BusFault_Handler+0x4>

08001f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <UsageFault_Handler+0x4>

08001f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr

08001f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f56:	b480      	push	{r7}
 8001f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr

08001f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f76:	f000 f957 	bl	8002228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  return 1;
 8001f82:	2301      	movs	r3, #1
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr

08001f8e <_kill>:

int _kill(int pid, int sig)
{
 8001f8e:	b580      	push	{r7, lr}
 8001f90:	b082      	sub	sp, #8
 8001f92:	af00      	add	r7, sp, #0
 8001f94:	6078      	str	r0, [r7, #4]
 8001f96:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001f98:	f003 fac0 	bl	800551c <__errno>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2216      	movs	r2, #22
 8001fa0:	601a      	str	r2, [r3, #0]
  return -1;
 8001fa2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}

08001fae <_exit>:

void _exit (int status)
{
 8001fae:	b580      	push	{r7, lr}
 8001fb0:	b082      	sub	sp, #8
 8001fb2:	af00      	add	r7, sp, #0
 8001fb4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fb6:	f04f 31ff 	mov.w	r1, #4294967295
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f7ff ffe7 	bl	8001f8e <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <_exit+0x12>

08001fc4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b086      	sub	sp, #24
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e00a      	b.n	8001fec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001fd6:	f3af 8000 	nop.w
 8001fda:	4601      	mov	r1, r0
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	60ba      	str	r2, [r7, #8]
 8001fe2:	b2ca      	uxtb	r2, r1
 8001fe4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	617b      	str	r3, [r7, #20]
 8001fec:	697a      	ldr	r2, [r7, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	429a      	cmp	r2, r3
 8001ff2:	dbf0      	blt.n	8001fd6 <_read+0x12>
  }

  return len;
 8001ff4:	687b      	ldr	r3, [r7, #4]
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	3718      	adds	r7, #24
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}

08001ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ffe:	b580      	push	{r7, lr}
 8002000:	b086      	sub	sp, #24
 8002002:	af00      	add	r7, sp, #0
 8002004:	60f8      	str	r0, [r7, #12]
 8002006:	60b9      	str	r1, [r7, #8]
 8002008:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800200a:	2300      	movs	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e009      	b.n	8002024 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1c5a      	adds	r2, r3, #1
 8002014:	60ba      	str	r2, [r7, #8]
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	3301      	adds	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697a      	ldr	r2, [r7, #20]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	429a      	cmp	r2, r3
 800202a:	dbf1      	blt.n	8002010 <_write+0x12>
  }
  return len;
 800202c:	687b      	ldr	r3, [r7, #4]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3718      	adds	r7, #24
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <_close>:

int _close(int file)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800203e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002042:	4618      	mov	r0, r3
 8002044:	370c      	adds	r7, #12
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr

0800204e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800204e:	b480      	push	{r7}
 8002050:	b083      	sub	sp, #12
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
 8002056:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800205e:	605a      	str	r2, [r3, #4]
  return 0;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr

0800206e <_isatty>:

int _isatty(int file)
{
 800206e:	b480      	push	{r7}
 8002070:	b083      	sub	sp, #12
 8002072:	af00      	add	r7, sp, #0
 8002074:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002076:	2301      	movs	r3, #1
}
 8002078:	4618      	mov	r0, r3
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002084:	b480      	push	{r7}
 8002086:	b085      	sub	sp, #20
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	3714      	adds	r7, #20
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a8:	4a14      	ldr	r2, [pc, #80]	@ (80020fc <_sbrk+0x5c>)
 80020aa:	4b15      	ldr	r3, [pc, #84]	@ (8002100 <_sbrk+0x60>)
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b4:	4b13      	ldr	r3, [pc, #76]	@ (8002104 <_sbrk+0x64>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d102      	bne.n	80020c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020bc:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <_sbrk+0x64>)
 80020be:	4a12      	ldr	r2, [pc, #72]	@ (8002108 <_sbrk+0x68>)
 80020c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020c2:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <_sbrk+0x64>)
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d207      	bcs.n	80020e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020d0:	f003 fa24 	bl	800551c <__errno>
 80020d4:	4603      	mov	r3, r0
 80020d6:	220c      	movs	r2, #12
 80020d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020da:	f04f 33ff 	mov.w	r3, #4294967295
 80020de:	e009      	b.n	80020f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020e0:	4b08      	ldr	r3, [pc, #32]	@ (8002104 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e6:	4b07      	ldr	r3, [pc, #28]	@ (8002104 <_sbrk+0x64>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4413      	add	r3, r2
 80020ee:	4a05      	ldr	r2, [pc, #20]	@ (8002104 <_sbrk+0x64>)
 80020f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020f2:	68fb      	ldr	r3, [r7, #12]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20020000 	.word	0x20020000
 8002100:	00000400 	.word	0x00000400
 8002104:	200002c4 	.word	0x200002c4
 8002108:	20000418 	.word	0x20000418

0800210c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002110:	4b06      	ldr	r3, [pc, #24]	@ (800212c <SystemInit+0x20>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002116:	4a05      	ldr	r2, [pc, #20]	@ (800212c <SystemInit+0x20>)
 8002118:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800211c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop
 800212c:	e000ed00 	.word	0xe000ed00

08002130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002130:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002168 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002134:	f7ff ffea 	bl	800210c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002138:	480c      	ldr	r0, [pc, #48]	@ (800216c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800213a:	490d      	ldr	r1, [pc, #52]	@ (8002170 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800213c:	4a0d      	ldr	r2, [pc, #52]	@ (8002174 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800213e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002140:	e002      	b.n	8002148 <LoopCopyDataInit>

08002142 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002142:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002144:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002146:	3304      	adds	r3, #4

08002148 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002148:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800214a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800214c:	d3f9      	bcc.n	8002142 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800214e:	4a0a      	ldr	r2, [pc, #40]	@ (8002178 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002150:	4c0a      	ldr	r4, [pc, #40]	@ (800217c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002152:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002154:	e001      	b.n	800215a <LoopFillZerobss>

08002156 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002156:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002158:	3204      	adds	r2, #4

0800215a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800215a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800215c:	d3fb      	bcc.n	8002156 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800215e:	f003 f9e3 	bl	8005528 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002162:	f7ff fc3d 	bl	80019e0 <main>
  bx  lr    
 8002166:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002168:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800216c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002170:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002174:	080079e0 	.word	0x080079e0
  ldr r2, =_sbss
 8002178:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800217c:	20000418 	.word	0x20000418

08002180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002180:	e7fe      	b.n	8002180 <ADC_IRQHandler>
	...

08002184 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002188:	4b0e      	ldr	r3, [pc, #56]	@ (80021c4 <HAL_Init+0x40>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a0d      	ldr	r2, [pc, #52]	@ (80021c4 <HAL_Init+0x40>)
 800218e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002192:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <HAL_Init+0x40>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a0a      	ldr	r2, [pc, #40]	@ (80021c4 <HAL_Init+0x40>)
 800219a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800219e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021a0:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <HAL_Init+0x40>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a07      	ldr	r2, [pc, #28]	@ (80021c4 <HAL_Init+0x40>)
 80021a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021ac:	2003      	movs	r0, #3
 80021ae:	f000 f931 	bl	8002414 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021b2:	2000      	movs	r0, #0
 80021b4:	f000 f808 	bl	80021c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021b8:	f7ff fdfa 	bl	8001db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	bd80      	pop	{r7, pc}
 80021c2:	bf00      	nop
 80021c4:	40023c00 	.word	0x40023c00

080021c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021d0:	4b12      	ldr	r3, [pc, #72]	@ (800221c <HAL_InitTick+0x54>)
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	4b12      	ldr	r3, [pc, #72]	@ (8002220 <HAL_InitTick+0x58>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	4619      	mov	r1, r3
 80021da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80021de:	fbb3 f3f1 	udiv	r3, r3, r1
 80021e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e6:	4618      	mov	r0, r3
 80021e8:	f000 f93b 	bl	8002462 <HAL_SYSTICK_Config>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e00e      	b.n	8002214 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2b0f      	cmp	r3, #15
 80021fa:	d80a      	bhi.n	8002212 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021fc:	2200      	movs	r2, #0
 80021fe:	6879      	ldr	r1, [r7, #4]
 8002200:	f04f 30ff 	mov.w	r0, #4294967295
 8002204:	f000 f911 	bl	800242a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002208:	4a06      	ldr	r2, [pc, #24]	@ (8002224 <HAL_InitTick+0x5c>)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	e000      	b.n	8002214 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000000 	.word	0x20000000
 8002220:	20000008 	.word	0x20000008
 8002224:	20000004 	.word	0x20000004

08002228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002228:	b480      	push	{r7}
 800222a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800222c:	4b06      	ldr	r3, [pc, #24]	@ (8002248 <HAL_IncTick+0x20>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	461a      	mov	r2, r3
 8002232:	4b06      	ldr	r3, [pc, #24]	@ (800224c <HAL_IncTick+0x24>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4413      	add	r3, r2
 8002238:	4a04      	ldr	r2, [pc, #16]	@ (800224c <HAL_IncTick+0x24>)
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	20000008 	.word	0x20000008
 800224c:	200002c8 	.word	0x200002c8

08002250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return uwTick;
 8002254:	4b03      	ldr	r3, [pc, #12]	@ (8002264 <HAL_GetTick+0x14>)
 8002256:	681b      	ldr	r3, [r3, #0]
}
 8002258:	4618      	mov	r0, r3
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr
 8002262:	bf00      	nop
 8002264:	200002c8 	.word	0x200002c8

08002268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002270:	f7ff ffee 	bl	8002250 <HAL_GetTick>
 8002274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002280:	d005      	beq.n	800228e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002282:	4b0a      	ldr	r3, [pc, #40]	@ (80022ac <HAL_Delay+0x44>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800228e:	bf00      	nop
 8002290:	f7ff ffde 	bl	8002250 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	429a      	cmp	r2, r3
 800229e:	d8f7      	bhi.n	8002290 <HAL_Delay+0x28>
  {
  }
}
 80022a0:	bf00      	nop
 80022a2:	bf00      	nop
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000008 	.word	0x20000008

080022b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022c0:	4b0c      	ldr	r3, [pc, #48]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022c6:	68ba      	ldr	r2, [r7, #8]
 80022c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022cc:	4013      	ands	r3, r2
 80022ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022e2:	4a04      	ldr	r2, [pc, #16]	@ (80022f4 <__NVIC_SetPriorityGrouping+0x44>)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	60d3      	str	r3, [r2, #12]
}
 80022e8:	bf00      	nop
 80022ea:	3714      	adds	r7, #20
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000ed00 	.word	0xe000ed00

080022f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022fc:	4b04      	ldr	r3, [pc, #16]	@ (8002310 <__NVIC_GetPriorityGrouping+0x18>)
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	0a1b      	lsrs	r3, r3, #8
 8002302:	f003 0307 	and.w	r3, r3, #7
}
 8002306:	4618      	mov	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230e:	4770      	bx	lr
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	4603      	mov	r3, r0
 800231c:	6039      	str	r1, [r7, #0]
 800231e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002324:	2b00      	cmp	r3, #0
 8002326:	db0a      	blt.n	800233e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	b2da      	uxtb	r2, r3
 800232c:	490c      	ldr	r1, [pc, #48]	@ (8002360 <__NVIC_SetPriority+0x4c>)
 800232e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002332:	0112      	lsls	r2, r2, #4
 8002334:	b2d2      	uxtb	r2, r2
 8002336:	440b      	add	r3, r1
 8002338:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800233c:	e00a      	b.n	8002354 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	b2da      	uxtb	r2, r3
 8002342:	4908      	ldr	r1, [pc, #32]	@ (8002364 <__NVIC_SetPriority+0x50>)
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	3b04      	subs	r3, #4
 800234c:	0112      	lsls	r2, r2, #4
 800234e:	b2d2      	uxtb	r2, r2
 8002350:	440b      	add	r3, r1
 8002352:	761a      	strb	r2, [r3, #24]
}
 8002354:	bf00      	nop
 8002356:	370c      	adds	r7, #12
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr
 8002360:	e000e100 	.word	0xe000e100
 8002364:	e000ed00 	.word	0xe000ed00

08002368 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002368:	b480      	push	{r7}
 800236a:	b089      	sub	sp, #36	@ 0x24
 800236c:	af00      	add	r7, sp, #0
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	f1c3 0307 	rsb	r3, r3, #7
 8002382:	2b04      	cmp	r3, #4
 8002384:	bf28      	it	cs
 8002386:	2304      	movcs	r3, #4
 8002388:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	3304      	adds	r3, #4
 800238e:	2b06      	cmp	r3, #6
 8002390:	d902      	bls.n	8002398 <NVIC_EncodePriority+0x30>
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3b03      	subs	r3, #3
 8002396:	e000      	b.n	800239a <NVIC_EncodePriority+0x32>
 8002398:	2300      	movs	r3, #0
 800239a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800239c:	f04f 32ff 	mov.w	r2, #4294967295
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43da      	mvns	r2, r3
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	401a      	ands	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b0:	f04f 31ff 	mov.w	r1, #4294967295
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	43d9      	mvns	r1, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c0:	4313      	orrs	r3, r2
         );
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	3724      	adds	r7, #36	@ 0x24
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
	...

080023d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	3b01      	subs	r3, #1
 80023dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e0:	d301      	bcc.n	80023e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e2:	2301      	movs	r3, #1
 80023e4:	e00f      	b.n	8002406 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002410 <SysTick_Config+0x40>)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3b01      	subs	r3, #1
 80023ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ee:	210f      	movs	r1, #15
 80023f0:	f04f 30ff 	mov.w	r0, #4294967295
 80023f4:	f7ff ff8e 	bl	8002314 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023f8:	4b05      	ldr	r3, [pc, #20]	@ (8002410 <SysTick_Config+0x40>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023fe:	4b04      	ldr	r3, [pc, #16]	@ (8002410 <SysTick_Config+0x40>)
 8002400:	2207      	movs	r2, #7
 8002402:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002404:	2300      	movs	r3, #0
}
 8002406:	4618      	mov	r0, r3
 8002408:	3708      	adds	r7, #8
 800240a:	46bd      	mov	sp, r7
 800240c:	bd80      	pop	{r7, pc}
 800240e:	bf00      	nop
 8002410:	e000e010 	.word	0xe000e010

08002414 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800241c:	6878      	ldr	r0, [r7, #4]
 800241e:	f7ff ff47 	bl	80022b0 <__NVIC_SetPriorityGrouping>
}
 8002422:	bf00      	nop
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242a:	b580      	push	{r7, lr}
 800242c:	b086      	sub	sp, #24
 800242e:	af00      	add	r7, sp, #0
 8002430:	4603      	mov	r3, r0
 8002432:	60b9      	str	r1, [r7, #8]
 8002434:	607a      	str	r2, [r7, #4]
 8002436:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800243c:	f7ff ff5c 	bl	80022f8 <__NVIC_GetPriorityGrouping>
 8002440:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002442:	687a      	ldr	r2, [r7, #4]
 8002444:	68b9      	ldr	r1, [r7, #8]
 8002446:	6978      	ldr	r0, [r7, #20]
 8002448:	f7ff ff8e 	bl	8002368 <NVIC_EncodePriority>
 800244c:	4602      	mov	r2, r0
 800244e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f7ff ff5d 	bl	8002314 <__NVIC_SetPriority>
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}

08002462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002462:	b580      	push	{r7, lr}
 8002464:	b082      	sub	sp, #8
 8002466:	af00      	add	r7, sp, #0
 8002468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f7ff ffb0 	bl	80023d0 <SysTick_Config>
 8002470:	4603      	mov	r3, r0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
	...

0800247c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800247c:	b480      	push	{r7}
 800247e:	b089      	sub	sp, #36	@ 0x24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800248a:	2300      	movs	r3, #0
 800248c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
 8002496:	e159      	b.n	800274c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002498:	2201      	movs	r2, #1
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024ac:	693a      	ldr	r2, [r7, #16]
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	f040 8148 	bne.w	8002746 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d005      	beq.n	80024ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d130      	bne.n	8002530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	005b      	lsls	r3, r3, #1
 80024d8:	2203      	movs	r2, #3
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43db      	mvns	r3, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4013      	ands	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	68da      	ldr	r2, [r3, #12]
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	005b      	lsls	r3, r3, #1
 80024ee:	fa02 f303 	lsl.w	r3, r2, r3
 80024f2:	69ba      	ldr	r2, [r7, #24]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002504:	2201      	movs	r2, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43db      	mvns	r3, r3
 800250e:	69ba      	ldr	r2, [r7, #24]
 8002510:	4013      	ands	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 0201 	and.w	r2, r3, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4313      	orrs	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f003 0303 	and.w	r3, r3, #3
 8002538:	2b03      	cmp	r3, #3
 800253a:	d017      	beq.n	800256c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	2203      	movs	r2, #3
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	fa02 f303 	lsl.w	r3, r2, r3
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	4313      	orrs	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	f003 0303 	and.w	r3, r3, #3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d123      	bne.n	80025c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	08da      	lsrs	r2, r3, #3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	3208      	adds	r2, #8
 8002580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	220f      	movs	r2, #15
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	43db      	mvns	r3, r3
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	4013      	ands	r3, r2
 800259a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	691a      	ldr	r2, [r3, #16]
 80025a0:	69fb      	ldr	r3, [r7, #28]
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	08da      	lsrs	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3208      	adds	r2, #8
 80025ba:	69b9      	ldr	r1, [r7, #24]
 80025bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	f003 0203 	and.w	r2, r3, #3
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	005b      	lsls	r3, r3, #1
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	69ba      	ldr	r2, [r7, #24]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	f000 80a2 	beq.w	8002746 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	60fb      	str	r3, [r7, #12]
 8002606:	4b57      	ldr	r3, [pc, #348]	@ (8002764 <HAL_GPIO_Init+0x2e8>)
 8002608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800260a:	4a56      	ldr	r2, [pc, #344]	@ (8002764 <HAL_GPIO_Init+0x2e8>)
 800260c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002610:	6453      	str	r3, [r2, #68]	@ 0x44
 8002612:	4b54      	ldr	r3, [pc, #336]	@ (8002764 <HAL_GPIO_Init+0x2e8>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002616:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800261a:	60fb      	str	r3, [r7, #12]
 800261c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800261e:	4a52      	ldr	r2, [pc, #328]	@ (8002768 <HAL_GPIO_Init+0x2ec>)
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	089b      	lsrs	r3, r3, #2
 8002624:	3302      	adds	r3, #2
 8002626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800262a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	220f      	movs	r2, #15
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43db      	mvns	r3, r3
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	4013      	ands	r3, r2
 8002640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a49      	ldr	r2, [pc, #292]	@ (800276c <HAL_GPIO_Init+0x2f0>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d019      	beq.n	800267e <HAL_GPIO_Init+0x202>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a48      	ldr	r2, [pc, #288]	@ (8002770 <HAL_GPIO_Init+0x2f4>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d013      	beq.n	800267a <HAL_GPIO_Init+0x1fe>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a47      	ldr	r2, [pc, #284]	@ (8002774 <HAL_GPIO_Init+0x2f8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00d      	beq.n	8002676 <HAL_GPIO_Init+0x1fa>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a46      	ldr	r2, [pc, #280]	@ (8002778 <HAL_GPIO_Init+0x2fc>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <HAL_GPIO_Init+0x1f6>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a45      	ldr	r2, [pc, #276]	@ (800277c <HAL_GPIO_Init+0x300>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d101      	bne.n	800266e <HAL_GPIO_Init+0x1f2>
 800266a:	2304      	movs	r3, #4
 800266c:	e008      	b.n	8002680 <HAL_GPIO_Init+0x204>
 800266e:	2307      	movs	r3, #7
 8002670:	e006      	b.n	8002680 <HAL_GPIO_Init+0x204>
 8002672:	2303      	movs	r3, #3
 8002674:	e004      	b.n	8002680 <HAL_GPIO_Init+0x204>
 8002676:	2302      	movs	r3, #2
 8002678:	e002      	b.n	8002680 <HAL_GPIO_Init+0x204>
 800267a:	2301      	movs	r3, #1
 800267c:	e000      	b.n	8002680 <HAL_GPIO_Init+0x204>
 800267e:	2300      	movs	r3, #0
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	f002 0203 	and.w	r2, r2, #3
 8002686:	0092      	lsls	r2, r2, #2
 8002688:	4093      	lsls	r3, r2
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4313      	orrs	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002690:	4935      	ldr	r1, [pc, #212]	@ (8002768 <HAL_GPIO_Init+0x2ec>)
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	089b      	lsrs	r3, r3, #2
 8002696:	3302      	adds	r3, #2
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269e:	4b38      	ldr	r3, [pc, #224]	@ (8002780 <HAL_GPIO_Init+0x304>)
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4013      	ands	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d003      	beq.n	80026c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	4313      	orrs	r3, r2
 80026c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026c2:	4a2f      	ldr	r2, [pc, #188]	@ (8002780 <HAL_GPIO_Init+0x304>)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002780 <HAL_GPIO_Init+0x304>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d003      	beq.n	80026ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	4313      	orrs	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026ec:	4a24      	ldr	r2, [pc, #144]	@ (8002780 <HAL_GPIO_Init+0x304>)
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026f2:	4b23      	ldr	r3, [pc, #140]	@ (8002780 <HAL_GPIO_Init+0x304>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	4313      	orrs	r3, r2
 8002714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002716:	4a1a      	ldr	r2, [pc, #104]	@ (8002780 <HAL_GPIO_Init+0x304>)
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800271c:	4b18      	ldr	r3, [pc, #96]	@ (8002780 <HAL_GPIO_Init+0x304>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002734:	2b00      	cmp	r3, #0
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	4313      	orrs	r3, r2
 800273e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002740:	4a0f      	ldr	r2, [pc, #60]	@ (8002780 <HAL_GPIO_Init+0x304>)
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002746:	69fb      	ldr	r3, [r7, #28]
 8002748:	3301      	adds	r3, #1
 800274a:	61fb      	str	r3, [r7, #28]
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	2b0f      	cmp	r3, #15
 8002750:	f67f aea2 	bls.w	8002498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002754:	bf00      	nop
 8002756:	bf00      	nop
 8002758:	3724      	adds	r7, #36	@ 0x24
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40013800 	.word	0x40013800
 800276c:	40020000 	.word	0x40020000
 8002770:	40020400 	.word	0x40020400
 8002774:	40020800 	.word	0x40020800
 8002778:	40020c00 	.word	0x40020c00
 800277c:	40021000 	.word	0x40021000
 8002780:	40013c00 	.word	0x40013c00

08002784 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
 8002790:	4613      	mov	r3, r2
 8002792:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002794:	787b      	ldrb	r3, [r7, #1]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800279a:	887a      	ldrh	r2, [r7, #2]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a0:	e003      	b.n	80027aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027a2:	887b      	ldrh	r3, [r7, #2]
 80027a4:	041a      	lsls	r2, r3, #16
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	619a      	str	r2, [r3, #24]
}
 80027aa:	bf00      	nop
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b085      	sub	sp, #20
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	460b      	mov	r3, r1
 80027c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	695b      	ldr	r3, [r3, #20]
 80027c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027c8:	887a      	ldrh	r2, [r7, #2]
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4013      	ands	r3, r2
 80027ce:	041a      	lsls	r2, r3, #16
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	43d9      	mvns	r1, r3
 80027d4:	887b      	ldrh	r3, [r7, #2]
 80027d6:	400b      	ands	r3, r1
 80027d8:	431a      	orrs	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	619a      	str	r2, [r3, #24]
}
 80027de:	bf00      	nop
 80027e0:	3714      	adds	r7, #20
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
	...

080027ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e12b      	b.n	8002a56 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d106      	bne.n	8002818 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f7ff faf4 	bl	8001e00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2224      	movs	r2, #36	@ 0x24
 800281c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f022 0201 	bic.w	r2, r2, #1
 800282e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800283e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800284e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002850:	f001 fc60 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 8002854:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	4a81      	ldr	r2, [pc, #516]	@ (8002a60 <HAL_I2C_Init+0x274>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d807      	bhi.n	8002870 <HAL_I2C_Init+0x84>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	4a80      	ldr	r2, [pc, #512]	@ (8002a64 <HAL_I2C_Init+0x278>)
 8002864:	4293      	cmp	r3, r2
 8002866:	bf94      	ite	ls
 8002868:	2301      	movls	r3, #1
 800286a:	2300      	movhi	r3, #0
 800286c:	b2db      	uxtb	r3, r3
 800286e:	e006      	b.n	800287e <HAL_I2C_Init+0x92>
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4a7d      	ldr	r2, [pc, #500]	@ (8002a68 <HAL_I2C_Init+0x27c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	bf94      	ite	ls
 8002878:	2301      	movls	r3, #1
 800287a:	2300      	movhi	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e0e7      	b.n	8002a56 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	4a78      	ldr	r2, [pc, #480]	@ (8002a6c <HAL_I2C_Init+0x280>)
 800288a:	fba2 2303 	umull	r2, r3, r2, r3
 800288e:	0c9b      	lsrs	r3, r3, #18
 8002890:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	68ba      	ldr	r2, [r7, #8]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002a60 <HAL_I2C_Init+0x274>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d802      	bhi.n	80028c0 <HAL_I2C_Init+0xd4>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	3301      	adds	r3, #1
 80028be:	e009      	b.n	80028d4 <HAL_I2C_Init+0xe8>
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80028c6:	fb02 f303 	mul.w	r3, r2, r3
 80028ca:	4a69      	ldr	r2, [pc, #420]	@ (8002a70 <HAL_I2C_Init+0x284>)
 80028cc:	fba2 2303 	umull	r2, r3, r2, r3
 80028d0:	099b      	lsrs	r3, r3, #6
 80028d2:	3301      	adds	r3, #1
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	430b      	orrs	r3, r1
 80028da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	69db      	ldr	r3, [r3, #28]
 80028e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80028e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	495c      	ldr	r1, [pc, #368]	@ (8002a60 <HAL_I2C_Init+0x274>)
 80028f0:	428b      	cmp	r3, r1
 80028f2:	d819      	bhi.n	8002928 <HAL_I2C_Init+0x13c>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	1e59      	subs	r1, r3, #1
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002902:	1c59      	adds	r1, r3, #1
 8002904:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002908:	400b      	ands	r3, r1
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00a      	beq.n	8002924 <HAL_I2C_Init+0x138>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	1e59      	subs	r1, r3, #1
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	fbb1 f3f3 	udiv	r3, r1, r3
 800291c:	3301      	adds	r3, #1
 800291e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002922:	e051      	b.n	80029c8 <HAL_I2C_Init+0x1dc>
 8002924:	2304      	movs	r3, #4
 8002926:	e04f      	b.n	80029c8 <HAL_I2C_Init+0x1dc>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d111      	bne.n	8002954 <HAL_I2C_Init+0x168>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1e58      	subs	r0, r3, #1
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	460b      	mov	r3, r1
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	440b      	add	r3, r1
 800293e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002942:	3301      	adds	r3, #1
 8002944:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002948:	2b00      	cmp	r3, #0
 800294a:	bf0c      	ite	eq
 800294c:	2301      	moveq	r3, #1
 800294e:	2300      	movne	r3, #0
 8002950:	b2db      	uxtb	r3, r3
 8002952:	e012      	b.n	800297a <HAL_I2C_Init+0x18e>
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	1e58      	subs	r0, r3, #1
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6859      	ldr	r1, [r3, #4]
 800295c:	460b      	mov	r3, r1
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	0099      	lsls	r1, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	fbb0 f3f3 	udiv	r3, r0, r3
 800296a:	3301      	adds	r3, #1
 800296c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002970:	2b00      	cmp	r3, #0
 8002972:	bf0c      	ite	eq
 8002974:	2301      	moveq	r3, #1
 8002976:	2300      	movne	r3, #0
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d001      	beq.n	8002982 <HAL_I2C_Init+0x196>
 800297e:	2301      	movs	r3, #1
 8002980:	e022      	b.n	80029c8 <HAL_I2C_Init+0x1dc>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10e      	bne.n	80029a8 <HAL_I2C_Init+0x1bc>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	1e58      	subs	r0, r3, #1
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6859      	ldr	r1, [r3, #4]
 8002992:	460b      	mov	r3, r1
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	440b      	add	r3, r1
 8002998:	fbb0 f3f3 	udiv	r3, r0, r3
 800299c:	3301      	adds	r3, #1
 800299e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80029a6:	e00f      	b.n	80029c8 <HAL_I2C_Init+0x1dc>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	1e58      	subs	r0, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6859      	ldr	r1, [r3, #4]
 80029b0:	460b      	mov	r3, r1
 80029b2:	009b      	lsls	r3, r3, #2
 80029b4:	440b      	add	r3, r1
 80029b6:	0099      	lsls	r1, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80029be:	3301      	adds	r3, #1
 80029c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	6809      	ldr	r1, [r1, #0]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	69da      	ldr	r2, [r3, #28]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	431a      	orrs	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80029f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6911      	ldr	r1, [r2, #16]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	68d2      	ldr	r2, [r2, #12]
 8002a02:	4311      	orrs	r1, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6812      	ldr	r2, [r2, #0]
 8002a08:	430b      	orrs	r3, r1
 8002a0a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	695a      	ldr	r2, [r3, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	430a      	orrs	r2, r1
 8002a26:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f042 0201 	orr.w	r2, r2, #1
 8002a36:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2220      	movs	r2, #32
 8002a42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2200      	movs	r2, #0
 8002a4a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002a54:	2300      	movs	r3, #0
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	000186a0 	.word	0x000186a0
 8002a64:	001e847f 	.word	0x001e847f
 8002a68:	003d08ff 	.word	0x003d08ff
 8002a6c:	431bde83 	.word	0x431bde83
 8002a70:	10624dd3 	.word	0x10624dd3

08002a74 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b088      	sub	sp, #32
 8002a78:	af02      	add	r7, sp, #8
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	4608      	mov	r0, r1
 8002a7e:	4611      	mov	r1, r2
 8002a80:	461a      	mov	r2, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	817b      	strh	r3, [r7, #10]
 8002a86:	460b      	mov	r3, r1
 8002a88:	813b      	strh	r3, [r7, #8]
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a8e:	f7ff fbdf 	bl	8002250 <HAL_GetTick>
 8002a92:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	2b20      	cmp	r3, #32
 8002a9e:	f040 80d9 	bne.w	8002c54 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	2319      	movs	r3, #25
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	496d      	ldr	r1, [pc, #436]	@ (8002c60 <HAL_I2C_Mem_Write+0x1ec>)
 8002aac:	68f8      	ldr	r0, [r7, #12]
 8002aae:	f000 fc8b 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e0cc      	b.n	8002c56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_I2C_Mem_Write+0x56>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0c5      	b.n	8002c56 <HAL_I2C_Mem_Write+0x1e2>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d007      	beq.n	8002af0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681a      	ldr	r2, [r3, #0]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002afe:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	2221      	movs	r2, #33	@ 0x21
 8002b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2240      	movs	r2, #64	@ 0x40
 8002b0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2200      	movs	r2, #0
 8002b14:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	6a3a      	ldr	r2, [r7, #32]
 8002b1a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002b20:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b26:	b29a      	uxth	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a4d      	ldr	r2, [pc, #308]	@ (8002c64 <HAL_I2C_Mem_Write+0x1f0>)
 8002b30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b32:	88f8      	ldrh	r0, [r7, #6]
 8002b34:	893a      	ldrh	r2, [r7, #8]
 8002b36:	8979      	ldrh	r1, [r7, #10]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	4603      	mov	r3, r0
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 fac2 	bl	80030cc <I2C_RequestMemoryWrite>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d052      	beq.n	8002bf4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e081      	b.n	8002c56 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b52:	697a      	ldr	r2, [r7, #20]
 8002b54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fd50 	bl	80035fc <I2C_WaitOnTXEFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d107      	bne.n	8002b7a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681a      	ldr	r2, [r3, #0]
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b78:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e06b      	b.n	8002c56 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b82:	781a      	ldrb	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b98:	3b01      	subs	r3, #1
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29a      	uxth	r2, r3
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d11b      	bne.n	8002bf4 <HAL_I2C_Mem_Write+0x180>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d017      	beq.n	8002bf4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bc8:	781a      	ldrb	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd4:	1c5a      	adds	r2, r3, #1
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bde:	3b01      	subs	r3, #1
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	3b01      	subs	r3, #1
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d1aa      	bne.n	8002b52 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fd43 	bl	800368c <I2C_WaitOnBTFFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00d      	beq.n	8002c28 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d107      	bne.n	8002c24 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c22:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e016      	b.n	8002c56 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e000      	b.n	8002c56 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	00100002 	.word	0x00100002
 8002c64:	ffff0000 	.word	0xffff0000

08002c68 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08c      	sub	sp, #48	@ 0x30
 8002c6c:	af02      	add	r7, sp, #8
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	4608      	mov	r0, r1
 8002c72:	4611      	mov	r1, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	4603      	mov	r3, r0
 8002c78:	817b      	strh	r3, [r7, #10]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	813b      	strh	r3, [r7, #8]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c82:	f7ff fae5 	bl	8002250 <HAL_GetTick>
 8002c86:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	2b20      	cmp	r3, #32
 8002c92:	f040 8214 	bne.w	80030be <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	2319      	movs	r3, #25
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	497b      	ldr	r1, [pc, #492]	@ (8002e8c <HAL_I2C_Mem_Read+0x224>)
 8002ca0:	68f8      	ldr	r0, [r7, #12]
 8002ca2:	f000 fb91 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d001      	beq.n	8002cb0 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002cac:	2302      	movs	r3, #2
 8002cae:	e207      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_I2C_Mem_Read+0x56>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e200      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d007      	beq.n	8002ce4 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cf2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2222      	movs	r2, #34	@ 0x22
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2240      	movs	r2, #64	@ 0x40
 8002d00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2200      	movs	r2, #0
 8002d08:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002d0e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002d14:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	4a5b      	ldr	r2, [pc, #364]	@ (8002e90 <HAL_I2C_Mem_Read+0x228>)
 8002d24:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d26:	88f8      	ldrh	r0, [r7, #6]
 8002d28:	893a      	ldrh	r2, [r7, #8]
 8002d2a:	8979      	ldrh	r1, [r7, #10]
 8002d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d2e:	9301      	str	r3, [sp, #4]
 8002d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	4603      	mov	r3, r0
 8002d36:	68f8      	ldr	r0, [r7, #12]
 8002d38:	f000 fa5e 	bl	80031f8 <I2C_RequestMemoryRead>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d001      	beq.n	8002d46 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e1bc      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d113      	bne.n	8002d76 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	623b      	str	r3, [r7, #32]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	695b      	ldr	r3, [r3, #20]
 8002d58:	623b      	str	r3, [r7, #32]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	e190      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d11b      	bne.n	8002db6 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d8c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d8e:	2300      	movs	r3, #0
 8002d90:	61fb      	str	r3, [r7, #28]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002db2:	601a      	str	r2, [r3, #0]
 8002db4:	e170      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d11b      	bne.n	8002df6 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002dcc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002ddc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dde:	2300      	movs	r3, #0
 8002de0:	61bb      	str	r3, [r7, #24]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	695b      	ldr	r3, [r3, #20]
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	e150      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002df6:	2300      	movs	r3, #0
 8002df8:	617b      	str	r3, [r7, #20]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	695b      	ldr	r3, [r3, #20]
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	699b      	ldr	r3, [r3, #24]
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e0c:	e144      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	f200 80f1 	bhi.w	8002ffa <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d123      	bne.n	8002e68 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002e24:	68f8      	ldr	r0, [r7, #12]
 8002e26:	f000 fc79 	bl	800371c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d001      	beq.n	8002e34 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e145      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	b2d2      	uxtb	r2, r2
 8002e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e46:	1c5a      	adds	r2, r3, #1
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b29a      	uxth	r2, r3
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	b29a      	uxth	r2, r3
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e66:	e117      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d14e      	bne.n	8002f0e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e72:	9300      	str	r3, [sp, #0]
 8002e74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e76:	2200      	movs	r2, #0
 8002e78:	4906      	ldr	r1, [pc, #24]	@ (8002e94 <HAL_I2C_Mem_Read+0x22c>)
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 faa4 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e11a      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
 8002e8a:	bf00      	nop
 8002e8c:	00100002 	.word	0x00100002
 8002e90:	ffff0000 	.word	0xffff0000
 8002e94:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ea6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	691a      	ldr	r2, [r3, #16]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	b2d2      	uxtb	r2, r2
 8002eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eba:	1c5a      	adds	r2, r3, #1
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	691a      	ldr	r2, [r3, #16]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ee4:	b2d2      	uxtb	r2, r2
 8002ee6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	b29a      	uxth	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002f0c:	e0c4      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f10:	9300      	str	r3, [sp, #0]
 8002f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f14:	2200      	movs	r2, #0
 8002f16:	496c      	ldr	r1, [pc, #432]	@ (80030c8 <HAL_I2C_Mem_Read+0x460>)
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f000 fa55 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d001      	beq.n	8002f28 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e0cb      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f36:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	691a      	ldr	r2, [r3, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f42:	b2d2      	uxtb	r2, r2
 8002f44:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f4a:	1c5a      	adds	r2, r3, #1
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f54:	3b01      	subs	r3, #1
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f6c:	9300      	str	r3, [sp, #0]
 8002f6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002f70:	2200      	movs	r2, #0
 8002f72:	4955      	ldr	r1, [pc, #340]	@ (80030c8 <HAL_I2C_Mem_Read+0x460>)
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	f000 fa27 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d001      	beq.n	8002f84 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e09d      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691a      	ldr	r2, [r3, #16]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9e:	b2d2      	uxtb	r2, r2
 8002fa0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fa6:	1c5a      	adds	r2, r3, #1
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd0:	b2d2      	uxtb	r2, r2
 8002fd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fd8:	1c5a      	adds	r2, r3, #1
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	b29a      	uxth	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002ff8:	e04e      	b.n	8003098 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ffa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ffc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ffe:	68f8      	ldr	r0, [r7, #12]
 8003000:	f000 fb8c 	bl	800371c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003004:	4603      	mov	r3, r0
 8003006:	2b00      	cmp	r3, #0
 8003008:	d001      	beq.n	800300e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e058      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	691a      	ldr	r2, [r3, #16]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	1c5a      	adds	r2, r3, #1
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800302a:	3b01      	subs	r3, #1
 800302c:	b29a      	uxth	r2, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003036:	b29b      	uxth	r3, r3
 8003038:	3b01      	subs	r3, #1
 800303a:	b29a      	uxth	r2, r3
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695b      	ldr	r3, [r3, #20]
 8003046:	f003 0304 	and.w	r3, r3, #4
 800304a:	2b04      	cmp	r3, #4
 800304c:	d124      	bne.n	8003098 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003052:	2b03      	cmp	r3, #3
 8003054:	d107      	bne.n	8003066 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003064:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	691a      	ldr	r2, [r3, #16]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	b2d2      	uxtb	r2, r2
 8003072:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	1c5a      	adds	r2, r3, #1
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003082:	3b01      	subs	r3, #1
 8003084:	b29a      	uxth	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800308e:	b29b      	uxth	r3, r3
 8003090:	3b01      	subs	r3, #1
 8003092:	b29a      	uxth	r2, r3
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800309c:	2b00      	cmp	r3, #0
 800309e:	f47f aeb6 	bne.w	8002e0e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2220      	movs	r2, #32
 80030a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2200      	movs	r2, #0
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030ba:	2300      	movs	r3, #0
 80030bc:	e000      	b.n	80030c0 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80030be:	2302      	movs	r3, #2
  }
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3728      	adds	r7, #40	@ 0x28
 80030c4:	46bd      	mov	sp, r7
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	00010004 	.word	0x00010004

080030cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b088      	sub	sp, #32
 80030d0:	af02      	add	r7, sp, #8
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	4608      	mov	r0, r1
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	4603      	mov	r3, r0
 80030dc:	817b      	strh	r3, [r7, #10]
 80030de:	460b      	mov	r3, r1
 80030e0:	813b      	strh	r3, [r7, #8]
 80030e2:	4613      	mov	r3, r2
 80030e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80030f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	6a3b      	ldr	r3, [r7, #32]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f960 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00d      	beq.n	800312a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003118:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800311c:	d103      	bne.n	8003126 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003124:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e05f      	b.n	80031ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800312a:	897b      	ldrh	r3, [r7, #10]
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003138:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800313a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800313c:	6a3a      	ldr	r2, [r7, #32]
 800313e:	492d      	ldr	r1, [pc, #180]	@ (80031f4 <I2C_RequestMemoryWrite+0x128>)
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f000 f9bb 	bl	80034bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d001      	beq.n	8003150 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e04c      	b.n	80031ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	617b      	str	r3, [r7, #20]
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003166:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003168:	6a39      	ldr	r1, [r7, #32]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fa46 	bl	80035fc <I2C_WaitOnTXEFlagUntilTimeout>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00d      	beq.n	8003192 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	2b04      	cmp	r3, #4
 800317c:	d107      	bne.n	800318e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
 8003190:	e02b      	b.n	80031ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d105      	bne.n	80031a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003198:	893b      	ldrh	r3, [r7, #8]
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	611a      	str	r2, [r3, #16]
 80031a2:	e021      	b.n	80031e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031a4:	893b      	ldrh	r3, [r7, #8]
 80031a6:	0a1b      	lsrs	r3, r3, #8
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b4:	6a39      	ldr	r1, [r7, #32]
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 fa20 	bl	80035fc <I2C_WaitOnTXEFlagUntilTimeout>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00d      	beq.n	80031de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031c6:	2b04      	cmp	r3, #4
 80031c8:	d107      	bne.n	80031da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e005      	b.n	80031ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031de:	893b      	ldrh	r3, [r7, #8]
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	00010002 	.word	0x00010002

080031f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b088      	sub	sp, #32
 80031fc:	af02      	add	r7, sp, #8
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	4608      	mov	r0, r1
 8003202:	4611      	mov	r1, r2
 8003204:	461a      	mov	r2, r3
 8003206:	4603      	mov	r3, r0
 8003208:	817b      	strh	r3, [r7, #10]
 800320a:	460b      	mov	r3, r1
 800320c:	813b      	strh	r3, [r7, #8]
 800320e:	4613      	mov	r3, r2
 8003210:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003220:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003230:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	2200      	movs	r2, #0
 800323a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800323e:	68f8      	ldr	r0, [r7, #12]
 8003240:	f000 f8c2 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8003244:	4603      	mov	r3, r0
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00d      	beq.n	8003266 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003254:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003258:	d103      	bne.n	8003262 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003260:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003262:	2303      	movs	r3, #3
 8003264:	e0aa      	b.n	80033bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003266:	897b      	ldrh	r3, [r7, #10]
 8003268:	b2db      	uxtb	r3, r3
 800326a:	461a      	mov	r2, r3
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003274:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003278:	6a3a      	ldr	r2, [r7, #32]
 800327a:	4952      	ldr	r1, [pc, #328]	@ (80033c4 <I2C_RequestMemoryRead+0x1cc>)
 800327c:	68f8      	ldr	r0, [r7, #12]
 800327e:	f000 f91d 	bl	80034bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e097      	b.n	80033bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800328c:	2300      	movs	r3, #0
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	699b      	ldr	r3, [r3, #24]
 800329e:	617b      	str	r3, [r7, #20]
 80032a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032a4:	6a39      	ldr	r1, [r7, #32]
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 f9a8 	bl	80035fc <I2C_WaitOnTXEFlagUntilTimeout>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00d      	beq.n	80032ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d107      	bne.n	80032ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e076      	b.n	80033bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ce:	88fb      	ldrh	r3, [r7, #6]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d105      	bne.n	80032e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032d4:	893b      	ldrh	r3, [r7, #8]
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	611a      	str	r2, [r3, #16]
 80032de:	e021      	b.n	8003324 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032e0:	893b      	ldrh	r3, [r7, #8]
 80032e2:	0a1b      	lsrs	r3, r3, #8
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	b2da      	uxtb	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032f0:	6a39      	ldr	r1, [r7, #32]
 80032f2:	68f8      	ldr	r0, [r7, #12]
 80032f4:	f000 f982 	bl	80035fc <I2C_WaitOnTXEFlagUntilTimeout>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d00d      	beq.n	800331a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	2b04      	cmp	r3, #4
 8003304:	d107      	bne.n	8003316 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003314:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e050      	b.n	80033bc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800331a:	893b      	ldrh	r3, [r7, #8]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003324:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003326:	6a39      	ldr	r1, [r7, #32]
 8003328:	68f8      	ldr	r0, [r7, #12]
 800332a:	f000 f967 	bl	80035fc <I2C_WaitOnTXEFlagUntilTimeout>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00d      	beq.n	8003350 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	2b04      	cmp	r3, #4
 800333a:	d107      	bne.n	800334c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800334a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e035      	b.n	80033bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800335e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	9300      	str	r3, [sp, #0]
 8003364:	6a3b      	ldr	r3, [r7, #32]
 8003366:	2200      	movs	r2, #0
 8003368:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800336c:	68f8      	ldr	r0, [r7, #12]
 800336e:	f000 f82b 	bl	80033c8 <I2C_WaitOnFlagUntilTimeout>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00d      	beq.n	8003394 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003382:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003386:	d103      	bne.n	8003390 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800338e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e013      	b.n	80033bc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003394:	897b      	ldrh	r3, [r7, #10]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	b2da      	uxtb	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a6:	6a3a      	ldr	r2, [r7, #32]
 80033a8:	4906      	ldr	r1, [pc, #24]	@ (80033c4 <I2C_RequestMemoryRead+0x1cc>)
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 f886 	bl	80034bc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e000      	b.n	80033bc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	3718      	adds	r7, #24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	00010002 	.word	0x00010002

080033c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b084      	sub	sp, #16
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	4613      	mov	r3, r2
 80033d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d8:	e048      	b.n	800346c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e0:	d044      	beq.n	800346c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033e2:	f7fe ff35 	bl	8002250 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	69bb      	ldr	r3, [r7, #24]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	683a      	ldr	r2, [r7, #0]
 80033ee:	429a      	cmp	r2, r3
 80033f0:	d302      	bcc.n	80033f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d139      	bne.n	800346c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	0c1b      	lsrs	r3, r3, #16
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d10d      	bne.n	800341e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	695b      	ldr	r3, [r3, #20]
 8003408:	43da      	mvns	r2, r3
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	4013      	ands	r3, r2
 800340e:	b29b      	uxth	r3, r3
 8003410:	2b00      	cmp	r3, #0
 8003412:	bf0c      	ite	eq
 8003414:	2301      	moveq	r3, #1
 8003416:	2300      	movne	r3, #0
 8003418:	b2db      	uxtb	r3, r3
 800341a:	461a      	mov	r2, r3
 800341c:	e00c      	b.n	8003438 <I2C_WaitOnFlagUntilTimeout+0x70>
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	699b      	ldr	r3, [r3, #24]
 8003424:	43da      	mvns	r2, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	4013      	ands	r3, r2
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	461a      	mov	r2, r3
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	429a      	cmp	r2, r3
 800343c:	d116      	bne.n	800346c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003458:	f043 0220 	orr.w	r2, r3, #32
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2200      	movs	r2, #0
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e023      	b.n	80034b4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	0c1b      	lsrs	r3, r3, #16
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b01      	cmp	r3, #1
 8003474:	d10d      	bne.n	8003492 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	43da      	mvns	r2, r3
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	4013      	ands	r3, r2
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	bf0c      	ite	eq
 8003488:	2301      	moveq	r3, #1
 800348a:	2300      	movne	r3, #0
 800348c:	b2db      	uxtb	r3, r3
 800348e:	461a      	mov	r2, r3
 8003490:	e00c      	b.n	80034ac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	699b      	ldr	r3, [r3, #24]
 8003498:	43da      	mvns	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4013      	ands	r3, r2
 800349e:	b29b      	uxth	r3, r3
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	bf0c      	ite	eq
 80034a4:	2301      	moveq	r3, #1
 80034a6:	2300      	movne	r3, #0
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	461a      	mov	r2, r3
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	429a      	cmp	r2, r3
 80034b0:	d093      	beq.n	80033da <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3710      	adds	r7, #16
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}

080034bc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	60f8      	str	r0, [r7, #12]
 80034c4:	60b9      	str	r1, [r7, #8]
 80034c6:	607a      	str	r2, [r7, #4]
 80034c8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034ca:	e071      	b.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	695b      	ldr	r3, [r3, #20]
 80034d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034da:	d123      	bne.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034ea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003510:	f043 0204 	orr.w	r2, r3, #4
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e067      	b.n	80035f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352a:	d041      	beq.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800352c:	f7fe fe90 	bl	8002250 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	429a      	cmp	r2, r3
 800353a:	d302      	bcc.n	8003542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d136      	bne.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	0c1b      	lsrs	r3, r3, #16
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b01      	cmp	r3, #1
 800354a:	d10c      	bne.n	8003566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	4013      	ands	r3, r2
 8003558:	b29b      	uxth	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	bf14      	ite	ne
 800355e:	2301      	movne	r3, #1
 8003560:	2300      	moveq	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e00b      	b.n	800357e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	43da      	mvns	r2, r3
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	4013      	ands	r3, r2
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2200      	movs	r2, #0
 8003594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e021      	b.n	80035f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	0c1b      	lsrs	r3, r3, #16
 80035b4:	b2db      	uxtb	r3, r3
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d10c      	bne.n	80035d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	43da      	mvns	r2, r3
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	4013      	ands	r3, r2
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	bf14      	ite	ne
 80035cc:	2301      	movne	r3, #1
 80035ce:	2300      	moveq	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e00b      	b.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	43da      	mvns	r2, r3
 80035dc:	68bb      	ldr	r3, [r7, #8]
 80035de:	4013      	ands	r3, r2
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	bf14      	ite	ne
 80035e6:	2301      	movne	r3, #1
 80035e8:	2300      	moveq	r3, #0
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f47f af6d 	bne.w	80034cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035f2:	2300      	movs	r3, #0
}
 80035f4:	4618      	mov	r0, r3
 80035f6:	3710      	adds	r7, #16
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003608:	e034      	b.n	8003674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f8e3 	bl	80037d6 <I2C_IsAcknowledgeFailed>
 8003610:	4603      	mov	r3, r0
 8003612:	2b00      	cmp	r3, #0
 8003614:	d001      	beq.n	800361a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003616:	2301      	movs	r3, #1
 8003618:	e034      	b.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003620:	d028      	beq.n	8003674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003622:	f7fe fe15 	bl	8002250 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	68ba      	ldr	r2, [r7, #8]
 800362e:	429a      	cmp	r2, r3
 8003630:	d302      	bcc.n	8003638 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d11d      	bne.n	8003674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003642:	2b80      	cmp	r3, #128	@ 0x80
 8003644:	d016      	beq.n	8003674 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2200      	movs	r2, #0
 800364a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e007      	b.n	8003684 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800367e:	2b80      	cmp	r3, #128	@ 0x80
 8003680:	d1c3      	bne.n	800360a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	4618      	mov	r0, r3
 8003686:	3710      	adds	r7, #16
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b084      	sub	sp, #16
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003698:	e034      	b.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800369a:	68f8      	ldr	r0, [r7, #12]
 800369c:	f000 f89b 	bl	80037d6 <I2C_IsAcknowledgeFailed>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e034      	b.n	8003714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b0:	d028      	beq.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b2:	f7fe fdcd 	bl	8002250 <HAL_GetTick>
 80036b6:	4602      	mov	r2, r0
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	d302      	bcc.n	80036c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d11d      	bne.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	f003 0304 	and.w	r3, r3, #4
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d016      	beq.n	8003704 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f0:	f043 0220 	orr.w	r2, r3, #32
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e007      	b.n	8003714 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	f003 0304 	and.w	r3, r3, #4
 800370e:	2b04      	cmp	r3, #4
 8003710:	d1c3      	bne.n	800369a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3710      	adds	r7, #16
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003728:	e049      	b.n	80037be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	2b10      	cmp	r3, #16
 8003736:	d119      	bne.n	800376c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f06f 0210 	mvn.w	r2, #16
 8003740:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e030      	b.n	80037ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800376c:	f7fe fd70 	bl	8002250 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	429a      	cmp	r2, r3
 800377a:	d302      	bcc.n	8003782 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d11d      	bne.n	80037be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	695b      	ldr	r3, [r3, #20]
 8003788:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800378c:	2b40      	cmp	r3, #64	@ 0x40
 800378e:	d016      	beq.n	80037be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	2200      	movs	r2, #0
 8003794:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2220      	movs	r2, #32
 800379a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	f043 0220 	orr.w	r2, r3, #32
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	2200      	movs	r2, #0
 80037b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e007      	b.n	80037ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695b      	ldr	r3, [r3, #20]
 80037c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c8:	2b40      	cmp	r3, #64	@ 0x40
 80037ca:	d1ae      	bne.n	800372a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b083      	sub	sp, #12
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	695b      	ldr	r3, [r3, #20]
 80037e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80037e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80037ec:	d11b      	bne.n	8003826 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80037f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	f043 0204 	orr.w	r2, r3, #4
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	370c      	adds	r7, #12
 800382c:	46bd      	mov	sp, r7
 800382e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003832:	4770      	bx	lr

08003834 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e267      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	2b00      	cmp	r3, #0
 8003850:	d075      	beq.n	800393e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003852:	4b88      	ldr	r3, [pc, #544]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	f003 030c 	and.w	r3, r3, #12
 800385a:	2b04      	cmp	r3, #4
 800385c:	d00c      	beq.n	8003878 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385e:	4b85      	ldr	r3, [pc, #532]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003866:	2b08      	cmp	r3, #8
 8003868:	d112      	bne.n	8003890 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800386a:	4b82      	ldr	r3, [pc, #520]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003872:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003876:	d10b      	bne.n	8003890 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003878:	4b7e      	ldr	r3, [pc, #504]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003880:	2b00      	cmp	r3, #0
 8003882:	d05b      	beq.n	800393c <HAL_RCC_OscConfig+0x108>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d157      	bne.n	800393c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e242      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003898:	d106      	bne.n	80038a8 <HAL_RCC_OscConfig+0x74>
 800389a:	4b76      	ldr	r3, [pc, #472]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a75      	ldr	r2, [pc, #468]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038a4:	6013      	str	r3, [r2, #0]
 80038a6:	e01d      	b.n	80038e4 <HAL_RCC_OscConfig+0xb0>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038b0:	d10c      	bne.n	80038cc <HAL_RCC_OscConfig+0x98>
 80038b2:	4b70      	ldr	r3, [pc, #448]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a6f      	ldr	r2, [pc, #444]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80038bc:	6013      	str	r3, [r2, #0]
 80038be:	4b6d      	ldr	r3, [pc, #436]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a6c      	ldr	r2, [pc, #432]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c8:	6013      	str	r3, [r2, #0]
 80038ca:	e00b      	b.n	80038e4 <HAL_RCC_OscConfig+0xb0>
 80038cc:	4b69      	ldr	r3, [pc, #420]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a68      	ldr	r2, [pc, #416]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	4b66      	ldr	r3, [pc, #408]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a65      	ldr	r2, [pc, #404]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80038de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ec:	f7fe fcb0 	bl	8002250 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f4:	f7fe fcac 	bl	8002250 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	@ 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e207      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003906:	4b5b      	ldr	r3, [pc, #364]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0xc0>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003914:	f7fe fc9c 	bl	8002250 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800391c:	f7fe fc98 	bl	8002250 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b64      	cmp	r3, #100	@ 0x64
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e1f3      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392e:	4b51      	ldr	r3, [pc, #324]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0xe8>
 800393a:	e000      	b.n	800393e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800393c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 0302 	and.w	r3, r3, #2
 8003946:	2b00      	cmp	r3, #0
 8003948:	d063      	beq.n	8003a12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800394a:	4b4a      	ldr	r3, [pc, #296]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f003 030c 	and.w	r3, r3, #12
 8003952:	2b00      	cmp	r3, #0
 8003954:	d00b      	beq.n	800396e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003956:	4b47      	ldr	r3, [pc, #284]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800395e:	2b08      	cmp	r3, #8
 8003960:	d11c      	bne.n	800399c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003962:	4b44      	ldr	r3, [pc, #272]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d116      	bne.n	800399c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396e:	4b41      	ldr	r3, [pc, #260]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0302 	and.w	r3, r3, #2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d005      	beq.n	8003986 <HAL_RCC_OscConfig+0x152>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d001      	beq.n	8003986 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e1c7      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003986:	4b3b      	ldr	r3, [pc, #236]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	4937      	ldr	r1, [pc, #220]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003996:	4313      	orrs	r3, r2
 8003998:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800399a:	e03a      	b.n	8003a12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a4:	4b34      	ldr	r3, [pc, #208]	@ (8003a78 <HAL_RCC_OscConfig+0x244>)
 80039a6:	2201      	movs	r2, #1
 80039a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039aa:	f7fe fc51 	bl	8002250 <HAL_GetTick>
 80039ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039b0:	e008      	b.n	80039c4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039b2:	f7fe fc4d 	bl	8002250 <HAL_GetTick>
 80039b6:	4602      	mov	r2, r0
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	2b02      	cmp	r3, #2
 80039be:	d901      	bls.n	80039c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039c0:	2303      	movs	r3, #3
 80039c2:	e1a8      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c4:	4b2b      	ldr	r3, [pc, #172]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0302 	and.w	r3, r3, #2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d0f0      	beq.n	80039b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039d0:	4b28      	ldr	r3, [pc, #160]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4925      	ldr	r1, [pc, #148]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 80039e0:	4313      	orrs	r3, r2
 80039e2:	600b      	str	r3, [r1, #0]
 80039e4:	e015      	b.n	8003a12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e6:	4b24      	ldr	r3, [pc, #144]	@ (8003a78 <HAL_RCC_OscConfig+0x244>)
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039ec:	f7fe fc30 	bl	8002250 <HAL_GetTick>
 80039f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039f2:	e008      	b.n	8003a06 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f4:	f7fe fc2c 	bl	8002250 <HAL_GetTick>
 80039f8:	4602      	mov	r2, r0
 80039fa:	693b      	ldr	r3, [r7, #16]
 80039fc:	1ad3      	subs	r3, r2, r3
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e187      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a06:	4b1b      	ldr	r3, [pc, #108]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1f0      	bne.n	80039f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 0308 	and.w	r3, r3, #8
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d036      	beq.n	8003a8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d016      	beq.n	8003a54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a26:	4b15      	ldr	r3, [pc, #84]	@ (8003a7c <HAL_RCC_OscConfig+0x248>)
 8003a28:	2201      	movs	r2, #1
 8003a2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a2c:	f7fe fc10 	bl	8002250 <HAL_GetTick>
 8003a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a32:	e008      	b.n	8003a46 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a34:	f7fe fc0c 	bl	8002250 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	1ad3      	subs	r3, r2, r3
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d901      	bls.n	8003a46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a42:	2303      	movs	r3, #3
 8003a44:	e167      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a46:	4b0b      	ldr	r3, [pc, #44]	@ (8003a74 <HAL_RCC_OscConfig+0x240>)
 8003a48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d0f0      	beq.n	8003a34 <HAL_RCC_OscConfig+0x200>
 8003a52:	e01b      	b.n	8003a8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a54:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <HAL_RCC_OscConfig+0x248>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5a:	f7fe fbf9 	bl	8002250 <HAL_GetTick>
 8003a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a60:	e00e      	b.n	8003a80 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a62:	f7fe fbf5 	bl	8002250 <HAL_GetTick>
 8003a66:	4602      	mov	r2, r0
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	1ad3      	subs	r3, r2, r3
 8003a6c:	2b02      	cmp	r3, #2
 8003a6e:	d907      	bls.n	8003a80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a70:	2303      	movs	r3, #3
 8003a72:	e150      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
 8003a74:	40023800 	.word	0x40023800
 8003a78:	42470000 	.word	0x42470000
 8003a7c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a80:	4b88      	ldr	r3, [pc, #544]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003a82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d1ea      	bne.n	8003a62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8097 	beq.w	8003bc8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9e:	4b81      	ldr	r3, [pc, #516]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10f      	bne.n	8003aca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aaa:	2300      	movs	r3, #0
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	4b7d      	ldr	r3, [pc, #500]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab2:	4a7c      	ldr	r2, [pc, #496]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003ab4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003aba:	4b7a      	ldr	r3, [pc, #488]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003aca:	4b77      	ldr	r3, [pc, #476]	@ (8003ca8 <HAL_RCC_OscConfig+0x474>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d118      	bne.n	8003b08 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad6:	4b74      	ldr	r3, [pc, #464]	@ (8003ca8 <HAL_RCC_OscConfig+0x474>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a73      	ldr	r2, [pc, #460]	@ (8003ca8 <HAL_RCC_OscConfig+0x474>)
 8003adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ae2:	f7fe fbb5 	bl	8002250 <HAL_GetTick>
 8003ae6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae8:	e008      	b.n	8003afc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003aea:	f7fe fbb1 	bl	8002250 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	2b02      	cmp	r3, #2
 8003af6:	d901      	bls.n	8003afc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003af8:	2303      	movs	r3, #3
 8003afa:	e10c      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003afc:	4b6a      	ldr	r3, [pc, #424]	@ (8003ca8 <HAL_RCC_OscConfig+0x474>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d0f0      	beq.n	8003aea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d106      	bne.n	8003b1e <HAL_RCC_OscConfig+0x2ea>
 8003b10:	4b64      	ldr	r3, [pc, #400]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b14:	4a63      	ldr	r2, [pc, #396]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b16:	f043 0301 	orr.w	r3, r3, #1
 8003b1a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b1c:	e01c      	b.n	8003b58 <HAL_RCC_OscConfig+0x324>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b05      	cmp	r3, #5
 8003b24:	d10c      	bne.n	8003b40 <HAL_RCC_OscConfig+0x30c>
 8003b26:	4b5f      	ldr	r3, [pc, #380]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b2a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b2c:	f043 0304 	orr.w	r3, r3, #4
 8003b30:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b32:	4b5c      	ldr	r3, [pc, #368]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b36:	4a5b      	ldr	r2, [pc, #364]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b38:	f043 0301 	orr.w	r3, r3, #1
 8003b3c:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b3e:	e00b      	b.n	8003b58 <HAL_RCC_OscConfig+0x324>
 8003b40:	4b58      	ldr	r3, [pc, #352]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b44:	4a57      	ldr	r2, [pc, #348]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b46:	f023 0301 	bic.w	r3, r3, #1
 8003b4a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003b4c:	4b55      	ldr	r3, [pc, #340]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b50:	4a54      	ldr	r2, [pc, #336]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b52:	f023 0304 	bic.w	r3, r3, #4
 8003b56:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d015      	beq.n	8003b8c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b60:	f7fe fb76 	bl	8002250 <HAL_GetTick>
 8003b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b66:	e00a      	b.n	8003b7e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b68:	f7fe fb72 	bl	8002250 <HAL_GetTick>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	1ad3      	subs	r3, r2, r3
 8003b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d901      	bls.n	8003b7e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b7a:	2303      	movs	r3, #3
 8003b7c:	e0cb      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7e:	4b49      	ldr	r3, [pc, #292]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b82:	f003 0302 	and.w	r3, r3, #2
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d0ee      	beq.n	8003b68 <HAL_RCC_OscConfig+0x334>
 8003b8a:	e014      	b.n	8003bb6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b8c:	f7fe fb60 	bl	8002250 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b92:	e00a      	b.n	8003baa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b94:	f7fe fb5c 	bl	8002250 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d901      	bls.n	8003baa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e0b5      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003baa:	4b3e      	ldr	r3, [pc, #248]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d1ee      	bne.n	8003b94 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bb6:	7dfb      	ldrb	r3, [r7, #23]
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d105      	bne.n	8003bc8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bbc:	4b39      	ldr	r3, [pc, #228]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bc0:	4a38      	ldr	r2, [pc, #224]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003bc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003bc6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f000 80a1 	beq.w	8003d14 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bd2:	4b34      	ldr	r3, [pc, #208]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b08      	cmp	r3, #8
 8003bdc:	d05c      	beq.n	8003c98 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d141      	bne.n	8003c6a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be6:	4b31      	ldr	r3, [pc, #196]	@ (8003cac <HAL_RCC_OscConfig+0x478>)
 8003be8:	2200      	movs	r2, #0
 8003bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bec:	f7fe fb30 	bl	8002250 <HAL_GetTick>
 8003bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bf2:	e008      	b.n	8003c06 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf4:	f7fe fb2c 	bl	8002250 <HAL_GetTick>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d901      	bls.n	8003c06 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e087      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c06:	4b27      	ldr	r3, [pc, #156]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d1f0      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	69da      	ldr	r2, [r3, #28]
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6a1b      	ldr	r3, [r3, #32]
 8003c1a:	431a      	orrs	r2, r3
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	019b      	lsls	r3, r3, #6
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c28:	085b      	lsrs	r3, r3, #1
 8003c2a:	3b01      	subs	r3, #1
 8003c2c:	041b      	lsls	r3, r3, #16
 8003c2e:	431a      	orrs	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c34:	061b      	lsls	r3, r3, #24
 8003c36:	491b      	ldr	r1, [pc, #108]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c3c:	4b1b      	ldr	r3, [pc, #108]	@ (8003cac <HAL_RCC_OscConfig+0x478>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c42:	f7fe fb05 	bl	8002250 <HAL_GetTick>
 8003c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c48:	e008      	b.n	8003c5c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c4a:	f7fe fb01 	bl	8002250 <HAL_GetTick>
 8003c4e:	4602      	mov	r2, r0
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d901      	bls.n	8003c5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e05c      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5c:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d0f0      	beq.n	8003c4a <HAL_RCC_OscConfig+0x416>
 8003c68:	e054      	b.n	8003d14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c6a:	4b10      	ldr	r3, [pc, #64]	@ (8003cac <HAL_RCC_OscConfig+0x478>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fe faee 	bl	8002250 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c78:	f7fe faea 	bl	8002250 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e045      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c8a:	4b06      	ldr	r3, [pc, #24]	@ (8003ca4 <HAL_RCC_OscConfig+0x470>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0x444>
 8003c96:	e03d      	b.n	8003d14 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d107      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e038      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
 8003ca4:	40023800 	.word	0x40023800
 8003ca8:	40007000 	.word	0x40007000
 8003cac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8003d20 <HAL_RCC_OscConfig+0x4ec>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d028      	beq.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d121      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d11a      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003ce6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d111      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cf6:	085b      	lsrs	r3, r3, #1
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d107      	bne.n	8003d10 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d0a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d001      	beq.n	8003d14 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3718      	adds	r7, #24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	bf00      	nop
 8003d20:	40023800 	.word	0x40023800

08003d24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e0cc      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d38:	4b68      	ldr	r3, [pc, #416]	@ (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	683a      	ldr	r2, [r7, #0]
 8003d42:	429a      	cmp	r2, r3
 8003d44:	d90c      	bls.n	8003d60 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d46:	4b65      	ldr	r3, [pc, #404]	@ (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003d48:	683a      	ldr	r2, [r7, #0]
 8003d4a:	b2d2      	uxtb	r2, r2
 8003d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d4e:	4b63      	ldr	r3, [pc, #396]	@ (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f003 0307 	and.w	r3, r3, #7
 8003d56:	683a      	ldr	r2, [r7, #0]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d001      	beq.n	8003d60 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e0b8      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f003 0302 	and.w	r3, r3, #2
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d020      	beq.n	8003dae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0304 	and.w	r3, r3, #4
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d78:	4b59      	ldr	r3, [pc, #356]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a58      	ldr	r2, [pc, #352]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003d82:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f003 0308 	and.w	r3, r3, #8
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d005      	beq.n	8003d9c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d90:	4b53      	ldr	r3, [pc, #332]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	4a52      	ldr	r2, [pc, #328]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d96:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003d9a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d9c:	4b50      	ldr	r3, [pc, #320]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	494d      	ldr	r1, [pc, #308]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003daa:	4313      	orrs	r3, r2
 8003dac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d044      	beq.n	8003e44 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b01      	cmp	r3, #1
 8003dc0:	d107      	bne.n	8003dd2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dc2:	4b47      	ldr	r3, [pc, #284]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d119      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e07f      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d003      	beq.n	8003de2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dde:	2b03      	cmp	r3, #3
 8003de0:	d107      	bne.n	8003df2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d109      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	e06f      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003df2:	4b3b      	ldr	r3, [pc, #236]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e067      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e02:	4b37      	ldr	r3, [pc, #220]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f023 0203 	bic.w	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	4934      	ldr	r1, [pc, #208]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e14:	f7fe fa1c 	bl	8002250 <HAL_GetTick>
 8003e18:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e1c:	f7fe fa18 	bl	8002250 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d901      	bls.n	8003e32 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e2e:	2303      	movs	r3, #3
 8003e30:	e04f      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e32:	4b2b      	ldr	r3, [pc, #172]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 020c 	and.w	r2, r3, #12
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d1eb      	bne.n	8003e1c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e44:	4b25      	ldr	r3, [pc, #148]	@ (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f003 0307 	and.w	r3, r3, #7
 8003e4c:	683a      	ldr	r2, [r7, #0]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d20c      	bcs.n	8003e6c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e52:	4b22      	ldr	r3, [pc, #136]	@ (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b20      	ldr	r3, [pc, #128]	@ (8003edc <HAL_RCC_ClockConfig+0x1b8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d001      	beq.n	8003e6c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e032      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d008      	beq.n	8003e8a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e78:	4b19      	ldr	r3, [pc, #100]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4916      	ldr	r1, [pc, #88]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	4313      	orrs	r3, r2
 8003e88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d009      	beq.n	8003eaa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e96:	4b12      	ldr	r3, [pc, #72]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	691b      	ldr	r3, [r3, #16]
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	490e      	ldr	r1, [pc, #56]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003eaa:	f000 f821 	bl	8003ef0 <HAL_RCC_GetSysClockFreq>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ee0 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	091b      	lsrs	r3, r3, #4
 8003eb6:	f003 030f 	and.w	r3, r3, #15
 8003eba:	490a      	ldr	r1, [pc, #40]	@ (8003ee4 <HAL_RCC_ClockConfig+0x1c0>)
 8003ebc:	5ccb      	ldrb	r3, [r1, r3]
 8003ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec2:	4a09      	ldr	r2, [pc, #36]	@ (8003ee8 <HAL_RCC_ClockConfig+0x1c4>)
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003ec6:	4b09      	ldr	r3, [pc, #36]	@ (8003eec <HAL_RCC_ClockConfig+0x1c8>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe f97c 	bl	80021c8 <HAL_InitTick>

  return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3710      	adds	r7, #16
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40023c00 	.word	0x40023c00
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	08007644 	.word	0x08007644
 8003ee8:	20000000 	.word	0x20000000
 8003eec:	20000004 	.word	0x20000004

08003ef0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef4:	b094      	sub	sp, #80	@ 0x50
 8003ef6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	647b      	str	r3, [r7, #68]	@ 0x44
 8003efc:	2300      	movs	r3, #0
 8003efe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f00:	2300      	movs	r3, #0
 8003f02:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f08:	4b79      	ldr	r3, [pc, #484]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f0a:	689b      	ldr	r3, [r3, #8]
 8003f0c:	f003 030c 	and.w	r3, r3, #12
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d00d      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x40>
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	f200 80e1 	bhi.w	80040dc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d002      	beq.n	8003f24 <HAL_RCC_GetSysClockFreq+0x34>
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d003      	beq.n	8003f2a <HAL_RCC_GetSysClockFreq+0x3a>
 8003f22:	e0db      	b.n	80040dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f24:	4b73      	ldr	r3, [pc, #460]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f26:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003f28:	e0db      	b.n	80040e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f2a:	4b73      	ldr	r3, [pc, #460]	@ (80040f8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f2c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003f2e:	e0d8      	b.n	80040e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f30:	4b6f      	ldr	r3, [pc, #444]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003f38:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f3a:	4b6d      	ldr	r3, [pc, #436]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d063      	beq.n	800400e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f46:	4b6a      	ldr	r3, [pc, #424]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	099b      	lsrs	r3, r3, #6
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f50:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f58:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003f62:	4622      	mov	r2, r4
 8003f64:	462b      	mov	r3, r5
 8003f66:	f04f 0000 	mov.w	r0, #0
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	0159      	lsls	r1, r3, #5
 8003f70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f74:	0150      	lsls	r0, r2, #5
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	1a51      	subs	r1, r2, r1
 8003f7e:	6139      	str	r1, [r7, #16]
 8003f80:	4629      	mov	r1, r5
 8003f82:	eb63 0301 	sbc.w	r3, r3, r1
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	f04f 0200 	mov.w	r2, #0
 8003f8c:	f04f 0300 	mov.w	r3, #0
 8003f90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f94:	4659      	mov	r1, fp
 8003f96:	018b      	lsls	r3, r1, #6
 8003f98:	4651      	mov	r1, sl
 8003f9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f9e:	4651      	mov	r1, sl
 8003fa0:	018a      	lsls	r2, r1, #6
 8003fa2:	4651      	mov	r1, sl
 8003fa4:	ebb2 0801 	subs.w	r8, r2, r1
 8003fa8:	4659      	mov	r1, fp
 8003faa:	eb63 0901 	sbc.w	r9, r3, r1
 8003fae:	f04f 0200 	mov.w	r2, #0
 8003fb2:	f04f 0300 	mov.w	r3, #0
 8003fb6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fbe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003fc2:	4690      	mov	r8, r2
 8003fc4:	4699      	mov	r9, r3
 8003fc6:	4623      	mov	r3, r4
 8003fc8:	eb18 0303 	adds.w	r3, r8, r3
 8003fcc:	60bb      	str	r3, [r7, #8]
 8003fce:	462b      	mov	r3, r5
 8003fd0:	eb49 0303 	adc.w	r3, r9, r3
 8003fd4:	60fb      	str	r3, [r7, #12]
 8003fd6:	f04f 0200 	mov.w	r2, #0
 8003fda:	f04f 0300 	mov.w	r3, #0
 8003fde:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fe2:	4629      	mov	r1, r5
 8003fe4:	024b      	lsls	r3, r1, #9
 8003fe6:	4621      	mov	r1, r4
 8003fe8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fec:	4621      	mov	r1, r4
 8003fee:	024a      	lsls	r2, r1, #9
 8003ff0:	4610      	mov	r0, r2
 8003ff2:	4619      	mov	r1, r3
 8003ff4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ffa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ffc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004000:	f7fc fe7a 	bl	8000cf8 <__aeabi_uldivmod>
 8004004:	4602      	mov	r2, r0
 8004006:	460b      	mov	r3, r1
 8004008:	4613      	mov	r3, r2
 800400a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800400c:	e058      	b.n	80040c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800400e:	4b38      	ldr	r3, [pc, #224]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004010:	685b      	ldr	r3, [r3, #4]
 8004012:	099b      	lsrs	r3, r3, #6
 8004014:	2200      	movs	r2, #0
 8004016:	4618      	mov	r0, r3
 8004018:	4611      	mov	r1, r2
 800401a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800401e:	623b      	str	r3, [r7, #32]
 8004020:	2300      	movs	r3, #0
 8004022:	627b      	str	r3, [r7, #36]	@ 0x24
 8004024:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004028:	4642      	mov	r2, r8
 800402a:	464b      	mov	r3, r9
 800402c:	f04f 0000 	mov.w	r0, #0
 8004030:	f04f 0100 	mov.w	r1, #0
 8004034:	0159      	lsls	r1, r3, #5
 8004036:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800403a:	0150      	lsls	r0, r2, #5
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4641      	mov	r1, r8
 8004042:	ebb2 0a01 	subs.w	sl, r2, r1
 8004046:	4649      	mov	r1, r9
 8004048:	eb63 0b01 	sbc.w	fp, r3, r1
 800404c:	f04f 0200 	mov.w	r2, #0
 8004050:	f04f 0300 	mov.w	r3, #0
 8004054:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004058:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800405c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004060:	ebb2 040a 	subs.w	r4, r2, sl
 8004064:	eb63 050b 	sbc.w	r5, r3, fp
 8004068:	f04f 0200 	mov.w	r2, #0
 800406c:	f04f 0300 	mov.w	r3, #0
 8004070:	00eb      	lsls	r3, r5, #3
 8004072:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004076:	00e2      	lsls	r2, r4, #3
 8004078:	4614      	mov	r4, r2
 800407a:	461d      	mov	r5, r3
 800407c:	4643      	mov	r3, r8
 800407e:	18e3      	adds	r3, r4, r3
 8004080:	603b      	str	r3, [r7, #0]
 8004082:	464b      	mov	r3, r9
 8004084:	eb45 0303 	adc.w	r3, r5, r3
 8004088:	607b      	str	r3, [r7, #4]
 800408a:	f04f 0200 	mov.w	r2, #0
 800408e:	f04f 0300 	mov.w	r3, #0
 8004092:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004096:	4629      	mov	r1, r5
 8004098:	028b      	lsls	r3, r1, #10
 800409a:	4621      	mov	r1, r4
 800409c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80040a0:	4621      	mov	r1, r4
 80040a2:	028a      	lsls	r2, r1, #10
 80040a4:	4610      	mov	r0, r2
 80040a6:	4619      	mov	r1, r3
 80040a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80040aa:	2200      	movs	r2, #0
 80040ac:	61bb      	str	r3, [r7, #24]
 80040ae:	61fa      	str	r2, [r7, #28]
 80040b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040b4:	f7fc fe20 	bl	8000cf8 <__aeabi_uldivmod>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4613      	mov	r3, r2
 80040be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040c0:	4b0b      	ldr	r3, [pc, #44]	@ (80040f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	0c1b      	lsrs	r3, r3, #16
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	3301      	adds	r3, #1
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80040d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80040d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040da:	e002      	b.n	80040e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040dc:	4b05      	ldr	r3, [pc, #20]	@ (80040f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80040de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80040e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80040e4:	4618      	mov	r0, r3
 80040e6:	3750      	adds	r7, #80	@ 0x50
 80040e8:	46bd      	mov	sp, r7
 80040ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040ee:	bf00      	nop
 80040f0:	40023800 	.word	0x40023800
 80040f4:	00f42400 	.word	0x00f42400
 80040f8:	007a1200 	.word	0x007a1200

080040fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004100:	4b03      	ldr	r3, [pc, #12]	@ (8004110 <HAL_RCC_GetHCLKFreq+0x14>)
 8004102:	681b      	ldr	r3, [r3, #0]
}
 8004104:	4618      	mov	r0, r3
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000000 	.word	0x20000000

08004114 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004118:	f7ff fff0 	bl	80040fc <HAL_RCC_GetHCLKFreq>
 800411c:	4602      	mov	r2, r0
 800411e:	4b05      	ldr	r3, [pc, #20]	@ (8004134 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	0a9b      	lsrs	r3, r3, #10
 8004124:	f003 0307 	and.w	r3, r3, #7
 8004128:	4903      	ldr	r1, [pc, #12]	@ (8004138 <HAL_RCC_GetPCLK1Freq+0x24>)
 800412a:	5ccb      	ldrb	r3, [r1, r3]
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40023800 	.word	0x40023800
 8004138:	08007654 	.word	0x08007654

0800413c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004140:	f7ff ffdc 	bl	80040fc <HAL_RCC_GetHCLKFreq>
 8004144:	4602      	mov	r2, r0
 8004146:	4b05      	ldr	r3, [pc, #20]	@ (800415c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	0b5b      	lsrs	r3, r3, #13
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	4903      	ldr	r1, [pc, #12]	@ (8004160 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004152:	5ccb      	ldrb	r3, [r1, r3]
 8004154:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004158:	4618      	mov	r0, r3
 800415a:	bd80      	pop	{r7, pc}
 800415c:	40023800 	.word	0x40023800
 8004160:	08007654 	.word	0x08007654

08004164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e042      	b.n	80041fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d106      	bne.n	8004190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7fd fe80 	bl	8001e90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2224      	movs	r2, #36	@ 0x24
 8004194:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	68da      	ldr	r2, [r3, #12]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f000 f973 	bl	8004494 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	691a      	ldr	r2, [r3, #16]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	695a      	ldr	r2, [r3, #20]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68da      	ldr	r2, [r3, #12]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2220      	movs	r2, #32
 80041e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	@ 0x28
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	603b      	str	r3, [r7, #0]
 8004210:	4613      	mov	r3, r2
 8004212:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004214:	2300      	movs	r3, #0
 8004216:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800421e:	b2db      	uxtb	r3, r3
 8004220:	2b20      	cmp	r3, #32
 8004222:	d175      	bne.n	8004310 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_UART_Transmit+0x2c>
 800422a:	88fb      	ldrh	r3, [r7, #6]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e06e      	b.n	8004312 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2200      	movs	r2, #0
 8004238:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2221      	movs	r2, #33	@ 0x21
 800423e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004242:	f7fe f805 	bl	8002250 <HAL_GetTick>
 8004246:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	88fa      	ldrh	r2, [r7, #6]
 800424c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	88fa      	ldrh	r2, [r7, #6]
 8004252:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800425c:	d108      	bne.n	8004270 <HAL_UART_Transmit+0x6c>
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d104      	bne.n	8004270 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004266:	2300      	movs	r3, #0
 8004268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	61bb      	str	r3, [r7, #24]
 800426e:	e003      	b.n	8004278 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004274:	2300      	movs	r3, #0
 8004276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004278:	e02e      	b.n	80042d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	9300      	str	r3, [sp, #0]
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	2200      	movs	r2, #0
 8004282:	2180      	movs	r1, #128	@ 0x80
 8004284:	68f8      	ldr	r0, [r7, #12]
 8004286:	f000 f848 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 800428a:	4603      	mov	r3, r0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2220      	movs	r2, #32
 8004294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004298:	2303      	movs	r3, #3
 800429a:	e03a      	b.n	8004312 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d10b      	bne.n	80042ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042a2:	69bb      	ldr	r3, [r7, #24]
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	461a      	mov	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	3302      	adds	r3, #2
 80042b6:	61bb      	str	r3, [r7, #24]
 80042b8:	e007      	b.n	80042ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	781a      	ldrb	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	3301      	adds	r3, #1
 80042c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042dc:	b29b      	uxth	r3, r3
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d1cb      	bne.n	800427a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	9300      	str	r3, [sp, #0]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	2140      	movs	r1, #64	@ 0x40
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f814 	bl	800431a <UART_WaitOnFlagUntilTimeout>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d005      	beq.n	8004304 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2220      	movs	r2, #32
 80042fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e006      	b.n	8004312 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2220      	movs	r2, #32
 8004308:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800430c:	2300      	movs	r3, #0
 800430e:	e000      	b.n	8004312 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004310:	2302      	movs	r3, #2
  }
}
 8004312:	4618      	mov	r0, r3
 8004314:	3720      	adds	r7, #32
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}

0800431a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800431a:	b580      	push	{r7, lr}
 800431c:	b086      	sub	sp, #24
 800431e:	af00      	add	r7, sp, #0
 8004320:	60f8      	str	r0, [r7, #12]
 8004322:	60b9      	str	r1, [r7, #8]
 8004324:	603b      	str	r3, [r7, #0]
 8004326:	4613      	mov	r3, r2
 8004328:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432a:	e03b      	b.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432c:	6a3b      	ldr	r3, [r7, #32]
 800432e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004332:	d037      	beq.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004334:	f7fd ff8c 	bl	8002250 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	6a3a      	ldr	r2, [r7, #32]
 8004340:	429a      	cmp	r2, r3
 8004342:	d302      	bcc.n	800434a <UART_WaitOnFlagUntilTimeout+0x30>
 8004344:	6a3b      	ldr	r3, [r7, #32]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d101      	bne.n	800434e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e03a      	b.n	80043c4 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	f003 0304 	and.w	r3, r3, #4
 8004358:	2b00      	cmp	r3, #0
 800435a:	d023      	beq.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b80      	cmp	r3, #128	@ 0x80
 8004360:	d020      	beq.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2b40      	cmp	r3, #64	@ 0x40
 8004366:	d01d      	beq.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	2b08      	cmp	r3, #8
 8004374:	d116      	bne.n	80043a4 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	617b      	str	r3, [r7, #20]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	617b      	str	r3, [r7, #20]
 800438a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800438c:	68f8      	ldr	r0, [r7, #12]
 800438e:	f000 f81d 	bl	80043cc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	2208      	movs	r2, #8
 8004396:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e00f      	b.n	80043c4 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68bb      	ldr	r3, [r7, #8]
 80043ac:	4013      	ands	r3, r2
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	bf0c      	ite	eq
 80043b4:	2301      	moveq	r3, #1
 80043b6:	2300      	movne	r3, #0
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	461a      	mov	r2, r3
 80043bc:	79fb      	ldrb	r3, [r7, #7]
 80043be:	429a      	cmp	r2, r3
 80043c0:	d0b4      	beq.n	800432c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}

080043cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b095      	sub	sp, #84	@ 0x54
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	330c      	adds	r3, #12
 80043da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043de:	e853 3f00 	ldrex	r3, [r3]
 80043e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	330c      	adds	r3, #12
 80043f2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80043f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80043fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80043fc:	e841 2300 	strex	r3, r2, [r1]
 8004400:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004404:	2b00      	cmp	r3, #0
 8004406:	d1e5      	bne.n	80043d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3314      	adds	r3, #20
 800440e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004410:	6a3b      	ldr	r3, [r7, #32]
 8004412:	e853 3f00 	ldrex	r3, [r3]
 8004416:	61fb      	str	r3, [r7, #28]
   return(result);
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	f023 0301 	bic.w	r3, r3, #1
 800441e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	3314      	adds	r3, #20
 8004426:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004428:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800442e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004430:	e841 2300 	strex	r3, r2, [r1]
 8004434:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004438:	2b00      	cmp	r3, #0
 800443a:	d1e5      	bne.n	8004408 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004440:	2b01      	cmp	r3, #1
 8004442:	d119      	bne.n	8004478 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	330c      	adds	r3, #12
 800444a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	e853 3f00 	ldrex	r3, [r3]
 8004452:	60bb      	str	r3, [r7, #8]
   return(result);
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	f023 0310 	bic.w	r3, r3, #16
 800445a:	647b      	str	r3, [r7, #68]	@ 0x44
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	330c      	adds	r3, #12
 8004462:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004464:	61ba      	str	r2, [r7, #24]
 8004466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004468:	6979      	ldr	r1, [r7, #20]
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	e841 2300 	strex	r3, r2, [r1]
 8004470:	613b      	str	r3, [r7, #16]
   return(result);
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d1e5      	bne.n	8004444 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004486:	bf00      	nop
 8004488:	3754      	adds	r7, #84	@ 0x54
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
	...

08004494 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004494:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004498:	b0c0      	sub	sp, #256	@ 0x100
 800449a:	af00      	add	r7, sp, #0
 800449c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b0:	68d9      	ldr	r1, [r3, #12]
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	ea40 0301 	orr.w	r3, r0, r1
 80044bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80044be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	431a      	orrs	r2, r3
 80044cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	431a      	orrs	r2, r3
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d8:	69db      	ldr	r3, [r3, #28]
 80044da:	4313      	orrs	r3, r2
 80044dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80044e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80044ec:	f021 010c 	bic.w	r1, r1, #12
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80044fa:	430b      	orrs	r3, r1
 80044fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800450a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800450e:	6999      	ldr	r1, [r3, #24]
 8004510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	ea40 0301 	orr.w	r3, r0, r1
 800451a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	4b8f      	ldr	r3, [pc, #572]	@ (8004760 <UART_SetConfig+0x2cc>)
 8004524:	429a      	cmp	r2, r3
 8004526:	d005      	beq.n	8004534 <UART_SetConfig+0xa0>
 8004528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452c:	681a      	ldr	r2, [r3, #0]
 800452e:	4b8d      	ldr	r3, [pc, #564]	@ (8004764 <UART_SetConfig+0x2d0>)
 8004530:	429a      	cmp	r2, r3
 8004532:	d104      	bne.n	800453e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004534:	f7ff fe02 	bl	800413c <HAL_RCC_GetPCLK2Freq>
 8004538:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800453c:	e003      	b.n	8004546 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800453e:	f7ff fde9 	bl	8004114 <HAL_RCC_GetPCLK1Freq>
 8004542:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004550:	f040 810c 	bne.w	800476c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004554:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004558:	2200      	movs	r2, #0
 800455a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800455e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004562:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004566:	4622      	mov	r2, r4
 8004568:	462b      	mov	r3, r5
 800456a:	1891      	adds	r1, r2, r2
 800456c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800456e:	415b      	adcs	r3, r3
 8004570:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004572:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004576:	4621      	mov	r1, r4
 8004578:	eb12 0801 	adds.w	r8, r2, r1
 800457c:	4629      	mov	r1, r5
 800457e:	eb43 0901 	adc.w	r9, r3, r1
 8004582:	f04f 0200 	mov.w	r2, #0
 8004586:	f04f 0300 	mov.w	r3, #0
 800458a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800458e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004592:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004596:	4690      	mov	r8, r2
 8004598:	4699      	mov	r9, r3
 800459a:	4623      	mov	r3, r4
 800459c:	eb18 0303 	adds.w	r3, r8, r3
 80045a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80045a4:	462b      	mov	r3, r5
 80045a6:	eb49 0303 	adc.w	r3, r9, r3
 80045aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80045ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80045ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80045be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80045c2:	460b      	mov	r3, r1
 80045c4:	18db      	adds	r3, r3, r3
 80045c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80045c8:	4613      	mov	r3, r2
 80045ca:	eb42 0303 	adc.w	r3, r2, r3
 80045ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80045d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80045d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80045d8:	f7fc fb8e 	bl	8000cf8 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4b61      	ldr	r3, [pc, #388]	@ (8004768 <UART_SetConfig+0x2d4>)
 80045e2:	fba3 2302 	umull	r2, r3, r3, r2
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	011c      	lsls	r4, r3, #4
 80045ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80045f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80045f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80045fc:	4642      	mov	r2, r8
 80045fe:	464b      	mov	r3, r9
 8004600:	1891      	adds	r1, r2, r2
 8004602:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004604:	415b      	adcs	r3, r3
 8004606:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004608:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800460c:	4641      	mov	r1, r8
 800460e:	eb12 0a01 	adds.w	sl, r2, r1
 8004612:	4649      	mov	r1, r9
 8004614:	eb43 0b01 	adc.w	fp, r3, r1
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004624:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004628:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800462c:	4692      	mov	sl, r2
 800462e:	469b      	mov	fp, r3
 8004630:	4643      	mov	r3, r8
 8004632:	eb1a 0303 	adds.w	r3, sl, r3
 8004636:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800463a:	464b      	mov	r3, r9
 800463c:	eb4b 0303 	adc.w	r3, fp, r3
 8004640:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004650:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004654:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004658:	460b      	mov	r3, r1
 800465a:	18db      	adds	r3, r3, r3
 800465c:	643b      	str	r3, [r7, #64]	@ 0x40
 800465e:	4613      	mov	r3, r2
 8004660:	eb42 0303 	adc.w	r3, r2, r3
 8004664:	647b      	str	r3, [r7, #68]	@ 0x44
 8004666:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800466a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800466e:	f7fc fb43 	bl	8000cf8 <__aeabi_uldivmod>
 8004672:	4602      	mov	r2, r0
 8004674:	460b      	mov	r3, r1
 8004676:	4611      	mov	r1, r2
 8004678:	4b3b      	ldr	r3, [pc, #236]	@ (8004768 <UART_SetConfig+0x2d4>)
 800467a:	fba3 2301 	umull	r2, r3, r3, r1
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	2264      	movs	r2, #100	@ 0x64
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	1acb      	subs	r3, r1, r3
 8004688:	00db      	lsls	r3, r3, #3
 800468a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800468e:	4b36      	ldr	r3, [pc, #216]	@ (8004768 <UART_SetConfig+0x2d4>)
 8004690:	fba3 2302 	umull	r2, r3, r3, r2
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	005b      	lsls	r3, r3, #1
 8004698:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800469c:	441c      	add	r4, r3
 800469e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046a2:	2200      	movs	r2, #0
 80046a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80046a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80046ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80046b0:	4642      	mov	r2, r8
 80046b2:	464b      	mov	r3, r9
 80046b4:	1891      	adds	r1, r2, r2
 80046b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80046b8:	415b      	adcs	r3, r3
 80046ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80046bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80046c0:	4641      	mov	r1, r8
 80046c2:	1851      	adds	r1, r2, r1
 80046c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80046c6:	4649      	mov	r1, r9
 80046c8:	414b      	adcs	r3, r1
 80046ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80046cc:	f04f 0200 	mov.w	r2, #0
 80046d0:	f04f 0300 	mov.w	r3, #0
 80046d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80046d8:	4659      	mov	r1, fp
 80046da:	00cb      	lsls	r3, r1, #3
 80046dc:	4651      	mov	r1, sl
 80046de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046e2:	4651      	mov	r1, sl
 80046e4:	00ca      	lsls	r2, r1, #3
 80046e6:	4610      	mov	r0, r2
 80046e8:	4619      	mov	r1, r3
 80046ea:	4603      	mov	r3, r0
 80046ec:	4642      	mov	r2, r8
 80046ee:	189b      	adds	r3, r3, r2
 80046f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80046f4:	464b      	mov	r3, r9
 80046f6:	460a      	mov	r2, r1
 80046f8:	eb42 0303 	adc.w	r3, r2, r3
 80046fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	2200      	movs	r2, #0
 8004708:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800470c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004710:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004714:	460b      	mov	r3, r1
 8004716:	18db      	adds	r3, r3, r3
 8004718:	62bb      	str	r3, [r7, #40]	@ 0x28
 800471a:	4613      	mov	r3, r2
 800471c:	eb42 0303 	adc.w	r3, r2, r3
 8004720:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004722:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004726:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800472a:	f7fc fae5 	bl	8000cf8 <__aeabi_uldivmod>
 800472e:	4602      	mov	r2, r0
 8004730:	460b      	mov	r3, r1
 8004732:	4b0d      	ldr	r3, [pc, #52]	@ (8004768 <UART_SetConfig+0x2d4>)
 8004734:	fba3 1302 	umull	r1, r3, r3, r2
 8004738:	095b      	lsrs	r3, r3, #5
 800473a:	2164      	movs	r1, #100	@ 0x64
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	1ad3      	subs	r3, r2, r3
 8004742:	00db      	lsls	r3, r3, #3
 8004744:	3332      	adds	r3, #50	@ 0x32
 8004746:	4a08      	ldr	r2, [pc, #32]	@ (8004768 <UART_SetConfig+0x2d4>)
 8004748:	fba2 2303 	umull	r2, r3, r2, r3
 800474c:	095b      	lsrs	r3, r3, #5
 800474e:	f003 0207 	and.w	r2, r3, #7
 8004752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4422      	add	r2, r4
 800475a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800475c:	e106      	b.n	800496c <UART_SetConfig+0x4d8>
 800475e:	bf00      	nop
 8004760:	40011000 	.word	0x40011000
 8004764:	40011400 	.word	0x40011400
 8004768:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800476c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004770:	2200      	movs	r2, #0
 8004772:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004776:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800477a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800477e:	4642      	mov	r2, r8
 8004780:	464b      	mov	r3, r9
 8004782:	1891      	adds	r1, r2, r2
 8004784:	6239      	str	r1, [r7, #32]
 8004786:	415b      	adcs	r3, r3
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
 800478a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800478e:	4641      	mov	r1, r8
 8004790:	1854      	adds	r4, r2, r1
 8004792:	4649      	mov	r1, r9
 8004794:	eb43 0501 	adc.w	r5, r3, r1
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	00eb      	lsls	r3, r5, #3
 80047a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047a6:	00e2      	lsls	r2, r4, #3
 80047a8:	4614      	mov	r4, r2
 80047aa:	461d      	mov	r5, r3
 80047ac:	4643      	mov	r3, r8
 80047ae:	18e3      	adds	r3, r4, r3
 80047b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80047b4:	464b      	mov	r3, r9
 80047b6:	eb45 0303 	adc.w	r3, r5, r3
 80047ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80047be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80047ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80047ce:	f04f 0200 	mov.w	r2, #0
 80047d2:	f04f 0300 	mov.w	r3, #0
 80047d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80047da:	4629      	mov	r1, r5
 80047dc:	008b      	lsls	r3, r1, #2
 80047de:	4621      	mov	r1, r4
 80047e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e4:	4621      	mov	r1, r4
 80047e6:	008a      	lsls	r2, r1, #2
 80047e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80047ec:	f7fc fa84 	bl	8000cf8 <__aeabi_uldivmod>
 80047f0:	4602      	mov	r2, r0
 80047f2:	460b      	mov	r3, r1
 80047f4:	4b60      	ldr	r3, [pc, #384]	@ (8004978 <UART_SetConfig+0x4e4>)
 80047f6:	fba3 2302 	umull	r2, r3, r3, r2
 80047fa:	095b      	lsrs	r3, r3, #5
 80047fc:	011c      	lsls	r4, r3, #4
 80047fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004802:	2200      	movs	r2, #0
 8004804:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004808:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800480c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004810:	4642      	mov	r2, r8
 8004812:	464b      	mov	r3, r9
 8004814:	1891      	adds	r1, r2, r2
 8004816:	61b9      	str	r1, [r7, #24]
 8004818:	415b      	adcs	r3, r3
 800481a:	61fb      	str	r3, [r7, #28]
 800481c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004820:	4641      	mov	r1, r8
 8004822:	1851      	adds	r1, r2, r1
 8004824:	6139      	str	r1, [r7, #16]
 8004826:	4649      	mov	r1, r9
 8004828:	414b      	adcs	r3, r1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004838:	4659      	mov	r1, fp
 800483a:	00cb      	lsls	r3, r1, #3
 800483c:	4651      	mov	r1, sl
 800483e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004842:	4651      	mov	r1, sl
 8004844:	00ca      	lsls	r2, r1, #3
 8004846:	4610      	mov	r0, r2
 8004848:	4619      	mov	r1, r3
 800484a:	4603      	mov	r3, r0
 800484c:	4642      	mov	r2, r8
 800484e:	189b      	adds	r3, r3, r2
 8004850:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004854:	464b      	mov	r3, r9
 8004856:	460a      	mov	r2, r1
 8004858:	eb42 0303 	adc.w	r3, r2, r3
 800485c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004860:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004864:	685b      	ldr	r3, [r3, #4]
 8004866:	2200      	movs	r2, #0
 8004868:	67bb      	str	r3, [r7, #120]	@ 0x78
 800486a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800486c:	f04f 0200 	mov.w	r2, #0
 8004870:	f04f 0300 	mov.w	r3, #0
 8004874:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004878:	4649      	mov	r1, r9
 800487a:	008b      	lsls	r3, r1, #2
 800487c:	4641      	mov	r1, r8
 800487e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004882:	4641      	mov	r1, r8
 8004884:	008a      	lsls	r2, r1, #2
 8004886:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800488a:	f7fc fa35 	bl	8000cf8 <__aeabi_uldivmod>
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	4611      	mov	r1, r2
 8004894:	4b38      	ldr	r3, [pc, #224]	@ (8004978 <UART_SetConfig+0x4e4>)
 8004896:	fba3 2301 	umull	r2, r3, r3, r1
 800489a:	095b      	lsrs	r3, r3, #5
 800489c:	2264      	movs	r2, #100	@ 0x64
 800489e:	fb02 f303 	mul.w	r3, r2, r3
 80048a2:	1acb      	subs	r3, r1, r3
 80048a4:	011b      	lsls	r3, r3, #4
 80048a6:	3332      	adds	r3, #50	@ 0x32
 80048a8:	4a33      	ldr	r2, [pc, #204]	@ (8004978 <UART_SetConfig+0x4e4>)
 80048aa:	fba2 2303 	umull	r2, r3, r2, r3
 80048ae:	095b      	lsrs	r3, r3, #5
 80048b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80048b4:	441c      	add	r4, r3
 80048b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048ba:	2200      	movs	r2, #0
 80048bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80048be:	677a      	str	r2, [r7, #116]	@ 0x74
 80048c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80048c4:	4642      	mov	r2, r8
 80048c6:	464b      	mov	r3, r9
 80048c8:	1891      	adds	r1, r2, r2
 80048ca:	60b9      	str	r1, [r7, #8]
 80048cc:	415b      	adcs	r3, r3
 80048ce:	60fb      	str	r3, [r7, #12]
 80048d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80048d4:	4641      	mov	r1, r8
 80048d6:	1851      	adds	r1, r2, r1
 80048d8:	6039      	str	r1, [r7, #0]
 80048da:	4649      	mov	r1, r9
 80048dc:	414b      	adcs	r3, r1
 80048de:	607b      	str	r3, [r7, #4]
 80048e0:	f04f 0200 	mov.w	r2, #0
 80048e4:	f04f 0300 	mov.w	r3, #0
 80048e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80048ec:	4659      	mov	r1, fp
 80048ee:	00cb      	lsls	r3, r1, #3
 80048f0:	4651      	mov	r1, sl
 80048f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048f6:	4651      	mov	r1, sl
 80048f8:	00ca      	lsls	r2, r1, #3
 80048fa:	4610      	mov	r0, r2
 80048fc:	4619      	mov	r1, r3
 80048fe:	4603      	mov	r3, r0
 8004900:	4642      	mov	r2, r8
 8004902:	189b      	adds	r3, r3, r2
 8004904:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004906:	464b      	mov	r3, r9
 8004908:	460a      	mov	r2, r1
 800490a:	eb42 0303 	adc.w	r3, r2, r3
 800490e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	685b      	ldr	r3, [r3, #4]
 8004916:	2200      	movs	r2, #0
 8004918:	663b      	str	r3, [r7, #96]	@ 0x60
 800491a:	667a      	str	r2, [r7, #100]	@ 0x64
 800491c:	f04f 0200 	mov.w	r2, #0
 8004920:	f04f 0300 	mov.w	r3, #0
 8004924:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004928:	4649      	mov	r1, r9
 800492a:	008b      	lsls	r3, r1, #2
 800492c:	4641      	mov	r1, r8
 800492e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004932:	4641      	mov	r1, r8
 8004934:	008a      	lsls	r2, r1, #2
 8004936:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800493a:	f7fc f9dd 	bl	8000cf8 <__aeabi_uldivmod>
 800493e:	4602      	mov	r2, r0
 8004940:	460b      	mov	r3, r1
 8004942:	4b0d      	ldr	r3, [pc, #52]	@ (8004978 <UART_SetConfig+0x4e4>)
 8004944:	fba3 1302 	umull	r1, r3, r3, r2
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	2164      	movs	r1, #100	@ 0x64
 800494c:	fb01 f303 	mul.w	r3, r1, r3
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	011b      	lsls	r3, r3, #4
 8004954:	3332      	adds	r3, #50	@ 0x32
 8004956:	4a08      	ldr	r2, [pc, #32]	@ (8004978 <UART_SetConfig+0x4e4>)
 8004958:	fba2 2303 	umull	r2, r3, r2, r3
 800495c:	095b      	lsrs	r3, r3, #5
 800495e:	f003 020f 	and.w	r2, r3, #15
 8004962:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4422      	add	r2, r4
 800496a:	609a      	str	r2, [r3, #8]
}
 800496c:	bf00      	nop
 800496e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004972:	46bd      	mov	sp, r7
 8004974:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004978:	51eb851f 	.word	0x51eb851f

0800497c <__cvt>:
 800497c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004980:	ec57 6b10 	vmov	r6, r7, d0
 8004984:	2f00      	cmp	r7, #0
 8004986:	460c      	mov	r4, r1
 8004988:	4619      	mov	r1, r3
 800498a:	463b      	mov	r3, r7
 800498c:	bfbb      	ittet	lt
 800498e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004992:	461f      	movlt	r7, r3
 8004994:	2300      	movge	r3, #0
 8004996:	232d      	movlt	r3, #45	@ 0x2d
 8004998:	700b      	strb	r3, [r1, #0]
 800499a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800499c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80049a0:	4691      	mov	r9, r2
 80049a2:	f023 0820 	bic.w	r8, r3, #32
 80049a6:	bfbc      	itt	lt
 80049a8:	4632      	movlt	r2, r6
 80049aa:	4616      	movlt	r6, r2
 80049ac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80049b0:	d005      	beq.n	80049be <__cvt+0x42>
 80049b2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80049b6:	d100      	bne.n	80049ba <__cvt+0x3e>
 80049b8:	3401      	adds	r4, #1
 80049ba:	2102      	movs	r1, #2
 80049bc:	e000      	b.n	80049c0 <__cvt+0x44>
 80049be:	2103      	movs	r1, #3
 80049c0:	ab03      	add	r3, sp, #12
 80049c2:	9301      	str	r3, [sp, #4]
 80049c4:	ab02      	add	r3, sp, #8
 80049c6:	9300      	str	r3, [sp, #0]
 80049c8:	ec47 6b10 	vmov	d0, r6, r7
 80049cc:	4653      	mov	r3, sl
 80049ce:	4622      	mov	r2, r4
 80049d0:	f000 fe5a 	bl	8005688 <_dtoa_r>
 80049d4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80049d8:	4605      	mov	r5, r0
 80049da:	d119      	bne.n	8004a10 <__cvt+0x94>
 80049dc:	f019 0f01 	tst.w	r9, #1
 80049e0:	d00e      	beq.n	8004a00 <__cvt+0x84>
 80049e2:	eb00 0904 	add.w	r9, r0, r4
 80049e6:	2200      	movs	r2, #0
 80049e8:	2300      	movs	r3, #0
 80049ea:	4630      	mov	r0, r6
 80049ec:	4639      	mov	r1, r7
 80049ee:	f7fc f873 	bl	8000ad8 <__aeabi_dcmpeq>
 80049f2:	b108      	cbz	r0, 80049f8 <__cvt+0x7c>
 80049f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80049f8:	2230      	movs	r2, #48	@ 0x30
 80049fa:	9b03      	ldr	r3, [sp, #12]
 80049fc:	454b      	cmp	r3, r9
 80049fe:	d31e      	bcc.n	8004a3e <__cvt+0xc2>
 8004a00:	9b03      	ldr	r3, [sp, #12]
 8004a02:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004a04:	1b5b      	subs	r3, r3, r5
 8004a06:	4628      	mov	r0, r5
 8004a08:	6013      	str	r3, [r2, #0]
 8004a0a:	b004      	add	sp, #16
 8004a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a10:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004a14:	eb00 0904 	add.w	r9, r0, r4
 8004a18:	d1e5      	bne.n	80049e6 <__cvt+0x6a>
 8004a1a:	7803      	ldrb	r3, [r0, #0]
 8004a1c:	2b30      	cmp	r3, #48	@ 0x30
 8004a1e:	d10a      	bne.n	8004a36 <__cvt+0xba>
 8004a20:	2200      	movs	r2, #0
 8004a22:	2300      	movs	r3, #0
 8004a24:	4630      	mov	r0, r6
 8004a26:	4639      	mov	r1, r7
 8004a28:	f7fc f856 	bl	8000ad8 <__aeabi_dcmpeq>
 8004a2c:	b918      	cbnz	r0, 8004a36 <__cvt+0xba>
 8004a2e:	f1c4 0401 	rsb	r4, r4, #1
 8004a32:	f8ca 4000 	str.w	r4, [sl]
 8004a36:	f8da 3000 	ldr.w	r3, [sl]
 8004a3a:	4499      	add	r9, r3
 8004a3c:	e7d3      	b.n	80049e6 <__cvt+0x6a>
 8004a3e:	1c59      	adds	r1, r3, #1
 8004a40:	9103      	str	r1, [sp, #12]
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e7d9      	b.n	80049fa <__cvt+0x7e>

08004a46 <__exponent>:
 8004a46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004a48:	2900      	cmp	r1, #0
 8004a4a:	bfba      	itte	lt
 8004a4c:	4249      	neglt	r1, r1
 8004a4e:	232d      	movlt	r3, #45	@ 0x2d
 8004a50:	232b      	movge	r3, #43	@ 0x2b
 8004a52:	2909      	cmp	r1, #9
 8004a54:	7002      	strb	r2, [r0, #0]
 8004a56:	7043      	strb	r3, [r0, #1]
 8004a58:	dd29      	ble.n	8004aae <__exponent+0x68>
 8004a5a:	f10d 0307 	add.w	r3, sp, #7
 8004a5e:	461d      	mov	r5, r3
 8004a60:	270a      	movs	r7, #10
 8004a62:	461a      	mov	r2, r3
 8004a64:	fbb1 f6f7 	udiv	r6, r1, r7
 8004a68:	fb07 1416 	mls	r4, r7, r6, r1
 8004a6c:	3430      	adds	r4, #48	@ 0x30
 8004a6e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004a72:	460c      	mov	r4, r1
 8004a74:	2c63      	cmp	r4, #99	@ 0x63
 8004a76:	f103 33ff 	add.w	r3, r3, #4294967295
 8004a7a:	4631      	mov	r1, r6
 8004a7c:	dcf1      	bgt.n	8004a62 <__exponent+0x1c>
 8004a7e:	3130      	adds	r1, #48	@ 0x30
 8004a80:	1e94      	subs	r4, r2, #2
 8004a82:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004a86:	1c41      	adds	r1, r0, #1
 8004a88:	4623      	mov	r3, r4
 8004a8a:	42ab      	cmp	r3, r5
 8004a8c:	d30a      	bcc.n	8004aa4 <__exponent+0x5e>
 8004a8e:	f10d 0309 	add.w	r3, sp, #9
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	42ac      	cmp	r4, r5
 8004a96:	bf88      	it	hi
 8004a98:	2300      	movhi	r3, #0
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	4403      	add	r3, r0
 8004a9e:	1a18      	subs	r0, r3, r0
 8004aa0:	b003      	add	sp, #12
 8004aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004aa4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004aa8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004aac:	e7ed      	b.n	8004a8a <__exponent+0x44>
 8004aae:	2330      	movs	r3, #48	@ 0x30
 8004ab0:	3130      	adds	r1, #48	@ 0x30
 8004ab2:	7083      	strb	r3, [r0, #2]
 8004ab4:	70c1      	strb	r1, [r0, #3]
 8004ab6:	1d03      	adds	r3, r0, #4
 8004ab8:	e7f1      	b.n	8004a9e <__exponent+0x58>
	...

08004abc <_printf_float>:
 8004abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac0:	b08d      	sub	sp, #52	@ 0x34
 8004ac2:	460c      	mov	r4, r1
 8004ac4:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004ac8:	4616      	mov	r6, r2
 8004aca:	461f      	mov	r7, r3
 8004acc:	4605      	mov	r5, r0
 8004ace:	f000 fcdb 	bl	8005488 <_localeconv_r>
 8004ad2:	6803      	ldr	r3, [r0, #0]
 8004ad4:	9304      	str	r3, [sp, #16]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fb fbd2 	bl	8000280 <strlen>
 8004adc:	2300      	movs	r3, #0
 8004ade:	930a      	str	r3, [sp, #40]	@ 0x28
 8004ae0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ae4:	9005      	str	r0, [sp, #20]
 8004ae6:	3307      	adds	r3, #7
 8004ae8:	f023 0307 	bic.w	r3, r3, #7
 8004aec:	f103 0208 	add.w	r2, r3, #8
 8004af0:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004af4:	f8d4 b000 	ldr.w	fp, [r4]
 8004af8:	f8c8 2000 	str.w	r2, [r8]
 8004afc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004b00:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004b04:	9307      	str	r3, [sp, #28]
 8004b06:	f8cd 8018 	str.w	r8, [sp, #24]
 8004b0a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004b0e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b12:	4b9c      	ldr	r3, [pc, #624]	@ (8004d84 <_printf_float+0x2c8>)
 8004b14:	f04f 32ff 	mov.w	r2, #4294967295
 8004b18:	f7fc f810 	bl	8000b3c <__aeabi_dcmpun>
 8004b1c:	bb70      	cbnz	r0, 8004b7c <_printf_float+0xc0>
 8004b1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004b22:	4b98      	ldr	r3, [pc, #608]	@ (8004d84 <_printf_float+0x2c8>)
 8004b24:	f04f 32ff 	mov.w	r2, #4294967295
 8004b28:	f7fb ffea 	bl	8000b00 <__aeabi_dcmple>
 8004b2c:	bb30      	cbnz	r0, 8004b7c <_printf_float+0xc0>
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2300      	movs	r3, #0
 8004b32:	4640      	mov	r0, r8
 8004b34:	4649      	mov	r1, r9
 8004b36:	f7fb ffd9 	bl	8000aec <__aeabi_dcmplt>
 8004b3a:	b110      	cbz	r0, 8004b42 <_printf_float+0x86>
 8004b3c:	232d      	movs	r3, #45	@ 0x2d
 8004b3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b42:	4a91      	ldr	r2, [pc, #580]	@ (8004d88 <_printf_float+0x2cc>)
 8004b44:	4b91      	ldr	r3, [pc, #580]	@ (8004d8c <_printf_float+0x2d0>)
 8004b46:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004b4a:	bf94      	ite	ls
 8004b4c:	4690      	movls	r8, r2
 8004b4e:	4698      	movhi	r8, r3
 8004b50:	2303      	movs	r3, #3
 8004b52:	6123      	str	r3, [r4, #16]
 8004b54:	f02b 0304 	bic.w	r3, fp, #4
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	f04f 0900 	mov.w	r9, #0
 8004b5e:	9700      	str	r7, [sp, #0]
 8004b60:	4633      	mov	r3, r6
 8004b62:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004b64:	4621      	mov	r1, r4
 8004b66:	4628      	mov	r0, r5
 8004b68:	f000 f9d2 	bl	8004f10 <_printf_common>
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	f040 808d 	bne.w	8004c8c <_printf_float+0x1d0>
 8004b72:	f04f 30ff 	mov.w	r0, #4294967295
 8004b76:	b00d      	add	sp, #52	@ 0x34
 8004b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	464b      	mov	r3, r9
 8004b80:	4640      	mov	r0, r8
 8004b82:	4649      	mov	r1, r9
 8004b84:	f7fb ffda 	bl	8000b3c <__aeabi_dcmpun>
 8004b88:	b140      	cbz	r0, 8004b9c <_printf_float+0xe0>
 8004b8a:	464b      	mov	r3, r9
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	bfbc      	itt	lt
 8004b90:	232d      	movlt	r3, #45	@ 0x2d
 8004b92:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004b96:	4a7e      	ldr	r2, [pc, #504]	@ (8004d90 <_printf_float+0x2d4>)
 8004b98:	4b7e      	ldr	r3, [pc, #504]	@ (8004d94 <_printf_float+0x2d8>)
 8004b9a:	e7d4      	b.n	8004b46 <_printf_float+0x8a>
 8004b9c:	6863      	ldr	r3, [r4, #4]
 8004b9e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004ba2:	9206      	str	r2, [sp, #24]
 8004ba4:	1c5a      	adds	r2, r3, #1
 8004ba6:	d13b      	bne.n	8004c20 <_printf_float+0x164>
 8004ba8:	2306      	movs	r3, #6
 8004baa:	6063      	str	r3, [r4, #4]
 8004bac:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	6022      	str	r2, [r4, #0]
 8004bb4:	9303      	str	r3, [sp, #12]
 8004bb6:	ab0a      	add	r3, sp, #40	@ 0x28
 8004bb8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004bbc:	ab09      	add	r3, sp, #36	@ 0x24
 8004bbe:	9300      	str	r3, [sp, #0]
 8004bc0:	6861      	ldr	r1, [r4, #4]
 8004bc2:	ec49 8b10 	vmov	d0, r8, r9
 8004bc6:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004bca:	4628      	mov	r0, r5
 8004bcc:	f7ff fed6 	bl	800497c <__cvt>
 8004bd0:	9b06      	ldr	r3, [sp, #24]
 8004bd2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004bd4:	2b47      	cmp	r3, #71	@ 0x47
 8004bd6:	4680      	mov	r8, r0
 8004bd8:	d129      	bne.n	8004c2e <_printf_float+0x172>
 8004bda:	1cc8      	adds	r0, r1, #3
 8004bdc:	db02      	blt.n	8004be4 <_printf_float+0x128>
 8004bde:	6863      	ldr	r3, [r4, #4]
 8004be0:	4299      	cmp	r1, r3
 8004be2:	dd41      	ble.n	8004c68 <_printf_float+0x1ac>
 8004be4:	f1aa 0a02 	sub.w	sl, sl, #2
 8004be8:	fa5f fa8a 	uxtb.w	sl, sl
 8004bec:	3901      	subs	r1, #1
 8004bee:	4652      	mov	r2, sl
 8004bf0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004bf4:	9109      	str	r1, [sp, #36]	@ 0x24
 8004bf6:	f7ff ff26 	bl	8004a46 <__exponent>
 8004bfa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004bfc:	1813      	adds	r3, r2, r0
 8004bfe:	2a01      	cmp	r2, #1
 8004c00:	4681      	mov	r9, r0
 8004c02:	6123      	str	r3, [r4, #16]
 8004c04:	dc02      	bgt.n	8004c0c <_printf_float+0x150>
 8004c06:	6822      	ldr	r2, [r4, #0]
 8004c08:	07d2      	lsls	r2, r2, #31
 8004c0a:	d501      	bpl.n	8004c10 <_printf_float+0x154>
 8004c0c:	3301      	adds	r3, #1
 8004c0e:	6123      	str	r3, [r4, #16]
 8004c10:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0a2      	beq.n	8004b5e <_printf_float+0xa2>
 8004c18:	232d      	movs	r3, #45	@ 0x2d
 8004c1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c1e:	e79e      	b.n	8004b5e <_printf_float+0xa2>
 8004c20:	9a06      	ldr	r2, [sp, #24]
 8004c22:	2a47      	cmp	r2, #71	@ 0x47
 8004c24:	d1c2      	bne.n	8004bac <_printf_float+0xf0>
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1c0      	bne.n	8004bac <_printf_float+0xf0>
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e7bd      	b.n	8004baa <_printf_float+0xee>
 8004c2e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004c32:	d9db      	bls.n	8004bec <_printf_float+0x130>
 8004c34:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004c38:	d118      	bne.n	8004c6c <_printf_float+0x1b0>
 8004c3a:	2900      	cmp	r1, #0
 8004c3c:	6863      	ldr	r3, [r4, #4]
 8004c3e:	dd0b      	ble.n	8004c58 <_printf_float+0x19c>
 8004c40:	6121      	str	r1, [r4, #16]
 8004c42:	b913      	cbnz	r3, 8004c4a <_printf_float+0x18e>
 8004c44:	6822      	ldr	r2, [r4, #0]
 8004c46:	07d0      	lsls	r0, r2, #31
 8004c48:	d502      	bpl.n	8004c50 <_printf_float+0x194>
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	440b      	add	r3, r1
 8004c4e:	6123      	str	r3, [r4, #16]
 8004c50:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004c52:	f04f 0900 	mov.w	r9, #0
 8004c56:	e7db      	b.n	8004c10 <_printf_float+0x154>
 8004c58:	b913      	cbnz	r3, 8004c60 <_printf_float+0x1a4>
 8004c5a:	6822      	ldr	r2, [r4, #0]
 8004c5c:	07d2      	lsls	r2, r2, #31
 8004c5e:	d501      	bpl.n	8004c64 <_printf_float+0x1a8>
 8004c60:	3302      	adds	r3, #2
 8004c62:	e7f4      	b.n	8004c4e <_printf_float+0x192>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e7f2      	b.n	8004c4e <_printf_float+0x192>
 8004c68:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004c6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004c6e:	4299      	cmp	r1, r3
 8004c70:	db05      	blt.n	8004c7e <_printf_float+0x1c2>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	6121      	str	r1, [r4, #16]
 8004c76:	07d8      	lsls	r0, r3, #31
 8004c78:	d5ea      	bpl.n	8004c50 <_printf_float+0x194>
 8004c7a:	1c4b      	adds	r3, r1, #1
 8004c7c:	e7e7      	b.n	8004c4e <_printf_float+0x192>
 8004c7e:	2900      	cmp	r1, #0
 8004c80:	bfd4      	ite	le
 8004c82:	f1c1 0202 	rsble	r2, r1, #2
 8004c86:	2201      	movgt	r2, #1
 8004c88:	4413      	add	r3, r2
 8004c8a:	e7e0      	b.n	8004c4e <_printf_float+0x192>
 8004c8c:	6823      	ldr	r3, [r4, #0]
 8004c8e:	055a      	lsls	r2, r3, #21
 8004c90:	d407      	bmi.n	8004ca2 <_printf_float+0x1e6>
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	4642      	mov	r2, r8
 8004c96:	4631      	mov	r1, r6
 8004c98:	4628      	mov	r0, r5
 8004c9a:	47b8      	blx	r7
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d12b      	bne.n	8004cf8 <_printf_float+0x23c>
 8004ca0:	e767      	b.n	8004b72 <_printf_float+0xb6>
 8004ca2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ca6:	f240 80dd 	bls.w	8004e64 <_printf_float+0x3a8>
 8004caa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004cae:	2200      	movs	r2, #0
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	f7fb ff11 	bl	8000ad8 <__aeabi_dcmpeq>
 8004cb6:	2800      	cmp	r0, #0
 8004cb8:	d033      	beq.n	8004d22 <_printf_float+0x266>
 8004cba:	4a37      	ldr	r2, [pc, #220]	@ (8004d98 <_printf_float+0x2dc>)
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	4631      	mov	r1, r6
 8004cc0:	4628      	mov	r0, r5
 8004cc2:	47b8      	blx	r7
 8004cc4:	3001      	adds	r0, #1
 8004cc6:	f43f af54 	beq.w	8004b72 <_printf_float+0xb6>
 8004cca:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004cce:	4543      	cmp	r3, r8
 8004cd0:	db02      	blt.n	8004cd8 <_printf_float+0x21c>
 8004cd2:	6823      	ldr	r3, [r4, #0]
 8004cd4:	07d8      	lsls	r0, r3, #31
 8004cd6:	d50f      	bpl.n	8004cf8 <_printf_float+0x23c>
 8004cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004cdc:	4631      	mov	r1, r6
 8004cde:	4628      	mov	r0, r5
 8004ce0:	47b8      	blx	r7
 8004ce2:	3001      	adds	r0, #1
 8004ce4:	f43f af45 	beq.w	8004b72 <_printf_float+0xb6>
 8004ce8:	f04f 0900 	mov.w	r9, #0
 8004cec:	f108 38ff 	add.w	r8, r8, #4294967295
 8004cf0:	f104 0a1a 	add.w	sl, r4, #26
 8004cf4:	45c8      	cmp	r8, r9
 8004cf6:	dc09      	bgt.n	8004d0c <_printf_float+0x250>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	079b      	lsls	r3, r3, #30
 8004cfc:	f100 8103 	bmi.w	8004f06 <_printf_float+0x44a>
 8004d00:	68e0      	ldr	r0, [r4, #12]
 8004d02:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004d04:	4298      	cmp	r0, r3
 8004d06:	bfb8      	it	lt
 8004d08:	4618      	movlt	r0, r3
 8004d0a:	e734      	b.n	8004b76 <_printf_float+0xba>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	4652      	mov	r2, sl
 8004d10:	4631      	mov	r1, r6
 8004d12:	4628      	mov	r0, r5
 8004d14:	47b8      	blx	r7
 8004d16:	3001      	adds	r0, #1
 8004d18:	f43f af2b 	beq.w	8004b72 <_printf_float+0xb6>
 8004d1c:	f109 0901 	add.w	r9, r9, #1
 8004d20:	e7e8      	b.n	8004cf4 <_printf_float+0x238>
 8004d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	dc39      	bgt.n	8004d9c <_printf_float+0x2e0>
 8004d28:	4a1b      	ldr	r2, [pc, #108]	@ (8004d98 <_printf_float+0x2dc>)
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	4631      	mov	r1, r6
 8004d2e:	4628      	mov	r0, r5
 8004d30:	47b8      	blx	r7
 8004d32:	3001      	adds	r0, #1
 8004d34:	f43f af1d 	beq.w	8004b72 <_printf_float+0xb6>
 8004d38:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004d3c:	ea59 0303 	orrs.w	r3, r9, r3
 8004d40:	d102      	bne.n	8004d48 <_printf_float+0x28c>
 8004d42:	6823      	ldr	r3, [r4, #0]
 8004d44:	07d9      	lsls	r1, r3, #31
 8004d46:	d5d7      	bpl.n	8004cf8 <_printf_float+0x23c>
 8004d48:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d4c:	4631      	mov	r1, r6
 8004d4e:	4628      	mov	r0, r5
 8004d50:	47b8      	blx	r7
 8004d52:	3001      	adds	r0, #1
 8004d54:	f43f af0d 	beq.w	8004b72 <_printf_float+0xb6>
 8004d58:	f04f 0a00 	mov.w	sl, #0
 8004d5c:	f104 0b1a 	add.w	fp, r4, #26
 8004d60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d62:	425b      	negs	r3, r3
 8004d64:	4553      	cmp	r3, sl
 8004d66:	dc01      	bgt.n	8004d6c <_printf_float+0x2b0>
 8004d68:	464b      	mov	r3, r9
 8004d6a:	e793      	b.n	8004c94 <_printf_float+0x1d8>
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	465a      	mov	r2, fp
 8004d70:	4631      	mov	r1, r6
 8004d72:	4628      	mov	r0, r5
 8004d74:	47b8      	blx	r7
 8004d76:	3001      	adds	r0, #1
 8004d78:	f43f aefb 	beq.w	8004b72 <_printf_float+0xb6>
 8004d7c:	f10a 0a01 	add.w	sl, sl, #1
 8004d80:	e7ee      	b.n	8004d60 <_printf_float+0x2a4>
 8004d82:	bf00      	nop
 8004d84:	7fefffff 	.word	0x7fefffff
 8004d88:	0800765c 	.word	0x0800765c
 8004d8c:	08007660 	.word	0x08007660
 8004d90:	08007664 	.word	0x08007664
 8004d94:	08007668 	.word	0x08007668
 8004d98:	0800766c 	.word	0x0800766c
 8004d9c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004d9e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004da2:	4553      	cmp	r3, sl
 8004da4:	bfa8      	it	ge
 8004da6:	4653      	movge	r3, sl
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	4699      	mov	r9, r3
 8004dac:	dc36      	bgt.n	8004e1c <_printf_float+0x360>
 8004dae:	f04f 0b00 	mov.w	fp, #0
 8004db2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004db6:	f104 021a 	add.w	r2, r4, #26
 8004dba:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004dbc:	9306      	str	r3, [sp, #24]
 8004dbe:	eba3 0309 	sub.w	r3, r3, r9
 8004dc2:	455b      	cmp	r3, fp
 8004dc4:	dc31      	bgt.n	8004e2a <_printf_float+0x36e>
 8004dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dc8:	459a      	cmp	sl, r3
 8004dca:	dc3a      	bgt.n	8004e42 <_printf_float+0x386>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	07da      	lsls	r2, r3, #31
 8004dd0:	d437      	bmi.n	8004e42 <_printf_float+0x386>
 8004dd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004dd4:	ebaa 0903 	sub.w	r9, sl, r3
 8004dd8:	9b06      	ldr	r3, [sp, #24]
 8004dda:	ebaa 0303 	sub.w	r3, sl, r3
 8004dde:	4599      	cmp	r9, r3
 8004de0:	bfa8      	it	ge
 8004de2:	4699      	movge	r9, r3
 8004de4:	f1b9 0f00 	cmp.w	r9, #0
 8004de8:	dc33      	bgt.n	8004e52 <_printf_float+0x396>
 8004dea:	f04f 0800 	mov.w	r8, #0
 8004dee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004df2:	f104 0b1a 	add.w	fp, r4, #26
 8004df6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004df8:	ebaa 0303 	sub.w	r3, sl, r3
 8004dfc:	eba3 0309 	sub.w	r3, r3, r9
 8004e00:	4543      	cmp	r3, r8
 8004e02:	f77f af79 	ble.w	8004cf8 <_printf_float+0x23c>
 8004e06:	2301      	movs	r3, #1
 8004e08:	465a      	mov	r2, fp
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	4628      	mov	r0, r5
 8004e0e:	47b8      	blx	r7
 8004e10:	3001      	adds	r0, #1
 8004e12:	f43f aeae 	beq.w	8004b72 <_printf_float+0xb6>
 8004e16:	f108 0801 	add.w	r8, r8, #1
 8004e1a:	e7ec      	b.n	8004df6 <_printf_float+0x33a>
 8004e1c:	4642      	mov	r2, r8
 8004e1e:	4631      	mov	r1, r6
 8004e20:	4628      	mov	r0, r5
 8004e22:	47b8      	blx	r7
 8004e24:	3001      	adds	r0, #1
 8004e26:	d1c2      	bne.n	8004dae <_printf_float+0x2f2>
 8004e28:	e6a3      	b.n	8004b72 <_printf_float+0xb6>
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	4631      	mov	r1, r6
 8004e2e:	4628      	mov	r0, r5
 8004e30:	9206      	str	r2, [sp, #24]
 8004e32:	47b8      	blx	r7
 8004e34:	3001      	adds	r0, #1
 8004e36:	f43f ae9c 	beq.w	8004b72 <_printf_float+0xb6>
 8004e3a:	9a06      	ldr	r2, [sp, #24]
 8004e3c:	f10b 0b01 	add.w	fp, fp, #1
 8004e40:	e7bb      	b.n	8004dba <_printf_float+0x2fe>
 8004e42:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d1c0      	bne.n	8004dd2 <_printf_float+0x316>
 8004e50:	e68f      	b.n	8004b72 <_printf_float+0xb6>
 8004e52:	9a06      	ldr	r2, [sp, #24]
 8004e54:	464b      	mov	r3, r9
 8004e56:	4442      	add	r2, r8
 8004e58:	4631      	mov	r1, r6
 8004e5a:	4628      	mov	r0, r5
 8004e5c:	47b8      	blx	r7
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d1c3      	bne.n	8004dea <_printf_float+0x32e>
 8004e62:	e686      	b.n	8004b72 <_printf_float+0xb6>
 8004e64:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004e68:	f1ba 0f01 	cmp.w	sl, #1
 8004e6c:	dc01      	bgt.n	8004e72 <_printf_float+0x3b6>
 8004e6e:	07db      	lsls	r3, r3, #31
 8004e70:	d536      	bpl.n	8004ee0 <_printf_float+0x424>
 8004e72:	2301      	movs	r3, #1
 8004e74:	4642      	mov	r2, r8
 8004e76:	4631      	mov	r1, r6
 8004e78:	4628      	mov	r0, r5
 8004e7a:	47b8      	blx	r7
 8004e7c:	3001      	adds	r0, #1
 8004e7e:	f43f ae78 	beq.w	8004b72 <_printf_float+0xb6>
 8004e82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e86:	4631      	mov	r1, r6
 8004e88:	4628      	mov	r0, r5
 8004e8a:	47b8      	blx	r7
 8004e8c:	3001      	adds	r0, #1
 8004e8e:	f43f ae70 	beq.w	8004b72 <_printf_float+0xb6>
 8004e92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004e96:	2200      	movs	r2, #0
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004e9e:	f7fb fe1b 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ea2:	b9c0      	cbnz	r0, 8004ed6 <_printf_float+0x41a>
 8004ea4:	4653      	mov	r3, sl
 8004ea6:	f108 0201 	add.w	r2, r8, #1
 8004eaa:	4631      	mov	r1, r6
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b8      	blx	r7
 8004eb0:	3001      	adds	r0, #1
 8004eb2:	d10c      	bne.n	8004ece <_printf_float+0x412>
 8004eb4:	e65d      	b.n	8004b72 <_printf_float+0xb6>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	465a      	mov	r2, fp
 8004eba:	4631      	mov	r1, r6
 8004ebc:	4628      	mov	r0, r5
 8004ebe:	47b8      	blx	r7
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f43f ae56 	beq.w	8004b72 <_printf_float+0xb6>
 8004ec6:	f108 0801 	add.w	r8, r8, #1
 8004eca:	45d0      	cmp	r8, sl
 8004ecc:	dbf3      	blt.n	8004eb6 <_printf_float+0x3fa>
 8004ece:	464b      	mov	r3, r9
 8004ed0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004ed4:	e6df      	b.n	8004c96 <_printf_float+0x1da>
 8004ed6:	f04f 0800 	mov.w	r8, #0
 8004eda:	f104 0b1a 	add.w	fp, r4, #26
 8004ede:	e7f4      	b.n	8004eca <_printf_float+0x40e>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	4642      	mov	r2, r8
 8004ee4:	e7e1      	b.n	8004eaa <_printf_float+0x3ee>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	464a      	mov	r2, r9
 8004eea:	4631      	mov	r1, r6
 8004eec:	4628      	mov	r0, r5
 8004eee:	47b8      	blx	r7
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	f43f ae3e 	beq.w	8004b72 <_printf_float+0xb6>
 8004ef6:	f108 0801 	add.w	r8, r8, #1
 8004efa:	68e3      	ldr	r3, [r4, #12]
 8004efc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004efe:	1a5b      	subs	r3, r3, r1
 8004f00:	4543      	cmp	r3, r8
 8004f02:	dcf0      	bgt.n	8004ee6 <_printf_float+0x42a>
 8004f04:	e6fc      	b.n	8004d00 <_printf_float+0x244>
 8004f06:	f04f 0800 	mov.w	r8, #0
 8004f0a:	f104 0919 	add.w	r9, r4, #25
 8004f0e:	e7f4      	b.n	8004efa <_printf_float+0x43e>

08004f10 <_printf_common>:
 8004f10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f14:	4616      	mov	r6, r2
 8004f16:	4698      	mov	r8, r3
 8004f18:	688a      	ldr	r2, [r1, #8]
 8004f1a:	690b      	ldr	r3, [r1, #16]
 8004f1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f20:	4293      	cmp	r3, r2
 8004f22:	bfb8      	it	lt
 8004f24:	4613      	movlt	r3, r2
 8004f26:	6033      	str	r3, [r6, #0]
 8004f28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f2c:	4607      	mov	r7, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	b10a      	cbz	r2, 8004f36 <_printf_common+0x26>
 8004f32:	3301      	adds	r3, #1
 8004f34:	6033      	str	r3, [r6, #0]
 8004f36:	6823      	ldr	r3, [r4, #0]
 8004f38:	0699      	lsls	r1, r3, #26
 8004f3a:	bf42      	ittt	mi
 8004f3c:	6833      	ldrmi	r3, [r6, #0]
 8004f3e:	3302      	addmi	r3, #2
 8004f40:	6033      	strmi	r3, [r6, #0]
 8004f42:	6825      	ldr	r5, [r4, #0]
 8004f44:	f015 0506 	ands.w	r5, r5, #6
 8004f48:	d106      	bne.n	8004f58 <_printf_common+0x48>
 8004f4a:	f104 0a19 	add.w	sl, r4, #25
 8004f4e:	68e3      	ldr	r3, [r4, #12]
 8004f50:	6832      	ldr	r2, [r6, #0]
 8004f52:	1a9b      	subs	r3, r3, r2
 8004f54:	42ab      	cmp	r3, r5
 8004f56:	dc26      	bgt.n	8004fa6 <_printf_common+0x96>
 8004f58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f5c:	6822      	ldr	r2, [r4, #0]
 8004f5e:	3b00      	subs	r3, #0
 8004f60:	bf18      	it	ne
 8004f62:	2301      	movne	r3, #1
 8004f64:	0692      	lsls	r2, r2, #26
 8004f66:	d42b      	bmi.n	8004fc0 <_printf_common+0xb0>
 8004f68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f6c:	4641      	mov	r1, r8
 8004f6e:	4638      	mov	r0, r7
 8004f70:	47c8      	blx	r9
 8004f72:	3001      	adds	r0, #1
 8004f74:	d01e      	beq.n	8004fb4 <_printf_common+0xa4>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	6922      	ldr	r2, [r4, #16]
 8004f7a:	f003 0306 	and.w	r3, r3, #6
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	bf02      	ittt	eq
 8004f82:	68e5      	ldreq	r5, [r4, #12]
 8004f84:	6833      	ldreq	r3, [r6, #0]
 8004f86:	1aed      	subeq	r5, r5, r3
 8004f88:	68a3      	ldr	r3, [r4, #8]
 8004f8a:	bf0c      	ite	eq
 8004f8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f90:	2500      	movne	r5, #0
 8004f92:	4293      	cmp	r3, r2
 8004f94:	bfc4      	itt	gt
 8004f96:	1a9b      	subgt	r3, r3, r2
 8004f98:	18ed      	addgt	r5, r5, r3
 8004f9a:	2600      	movs	r6, #0
 8004f9c:	341a      	adds	r4, #26
 8004f9e:	42b5      	cmp	r5, r6
 8004fa0:	d11a      	bne.n	8004fd8 <_printf_common+0xc8>
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	e008      	b.n	8004fb8 <_printf_common+0xa8>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	4652      	mov	r2, sl
 8004faa:	4641      	mov	r1, r8
 8004fac:	4638      	mov	r0, r7
 8004fae:	47c8      	blx	r9
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	d103      	bne.n	8004fbc <_printf_common+0xac>
 8004fb4:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fbc:	3501      	adds	r5, #1
 8004fbe:	e7c6      	b.n	8004f4e <_printf_common+0x3e>
 8004fc0:	18e1      	adds	r1, r4, r3
 8004fc2:	1c5a      	adds	r2, r3, #1
 8004fc4:	2030      	movs	r0, #48	@ 0x30
 8004fc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fca:	4422      	add	r2, r4
 8004fcc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fd4:	3302      	adds	r3, #2
 8004fd6:	e7c7      	b.n	8004f68 <_printf_common+0x58>
 8004fd8:	2301      	movs	r3, #1
 8004fda:	4622      	mov	r2, r4
 8004fdc:	4641      	mov	r1, r8
 8004fde:	4638      	mov	r0, r7
 8004fe0:	47c8      	blx	r9
 8004fe2:	3001      	adds	r0, #1
 8004fe4:	d0e6      	beq.n	8004fb4 <_printf_common+0xa4>
 8004fe6:	3601      	adds	r6, #1
 8004fe8:	e7d9      	b.n	8004f9e <_printf_common+0x8e>
	...

08004fec <_printf_i>:
 8004fec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	7e0f      	ldrb	r7, [r1, #24]
 8004ff2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ff4:	2f78      	cmp	r7, #120	@ 0x78
 8004ff6:	4691      	mov	r9, r2
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	460c      	mov	r4, r1
 8004ffc:	469a      	mov	sl, r3
 8004ffe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005002:	d807      	bhi.n	8005014 <_printf_i+0x28>
 8005004:	2f62      	cmp	r7, #98	@ 0x62
 8005006:	d80a      	bhi.n	800501e <_printf_i+0x32>
 8005008:	2f00      	cmp	r7, #0
 800500a:	f000 80d2 	beq.w	80051b2 <_printf_i+0x1c6>
 800500e:	2f58      	cmp	r7, #88	@ 0x58
 8005010:	f000 80b9 	beq.w	8005186 <_printf_i+0x19a>
 8005014:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005018:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800501c:	e03a      	b.n	8005094 <_printf_i+0xa8>
 800501e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005022:	2b15      	cmp	r3, #21
 8005024:	d8f6      	bhi.n	8005014 <_printf_i+0x28>
 8005026:	a101      	add	r1, pc, #4	@ (adr r1, 800502c <_printf_i+0x40>)
 8005028:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800502c:	08005085 	.word	0x08005085
 8005030:	08005099 	.word	0x08005099
 8005034:	08005015 	.word	0x08005015
 8005038:	08005015 	.word	0x08005015
 800503c:	08005015 	.word	0x08005015
 8005040:	08005015 	.word	0x08005015
 8005044:	08005099 	.word	0x08005099
 8005048:	08005015 	.word	0x08005015
 800504c:	08005015 	.word	0x08005015
 8005050:	08005015 	.word	0x08005015
 8005054:	08005015 	.word	0x08005015
 8005058:	08005199 	.word	0x08005199
 800505c:	080050c3 	.word	0x080050c3
 8005060:	08005153 	.word	0x08005153
 8005064:	08005015 	.word	0x08005015
 8005068:	08005015 	.word	0x08005015
 800506c:	080051bb 	.word	0x080051bb
 8005070:	08005015 	.word	0x08005015
 8005074:	080050c3 	.word	0x080050c3
 8005078:	08005015 	.word	0x08005015
 800507c:	08005015 	.word	0x08005015
 8005080:	0800515b 	.word	0x0800515b
 8005084:	6833      	ldr	r3, [r6, #0]
 8005086:	1d1a      	adds	r2, r3, #4
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6032      	str	r2, [r6, #0]
 800508c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005090:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005094:	2301      	movs	r3, #1
 8005096:	e09d      	b.n	80051d4 <_printf_i+0x1e8>
 8005098:	6833      	ldr	r3, [r6, #0]
 800509a:	6820      	ldr	r0, [r4, #0]
 800509c:	1d19      	adds	r1, r3, #4
 800509e:	6031      	str	r1, [r6, #0]
 80050a0:	0606      	lsls	r6, r0, #24
 80050a2:	d501      	bpl.n	80050a8 <_printf_i+0xbc>
 80050a4:	681d      	ldr	r5, [r3, #0]
 80050a6:	e003      	b.n	80050b0 <_printf_i+0xc4>
 80050a8:	0645      	lsls	r5, r0, #25
 80050aa:	d5fb      	bpl.n	80050a4 <_printf_i+0xb8>
 80050ac:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050b0:	2d00      	cmp	r5, #0
 80050b2:	da03      	bge.n	80050bc <_printf_i+0xd0>
 80050b4:	232d      	movs	r3, #45	@ 0x2d
 80050b6:	426d      	negs	r5, r5
 80050b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050bc:	4859      	ldr	r0, [pc, #356]	@ (8005224 <_printf_i+0x238>)
 80050be:	230a      	movs	r3, #10
 80050c0:	e011      	b.n	80050e6 <_printf_i+0xfa>
 80050c2:	6821      	ldr	r1, [r4, #0]
 80050c4:	6833      	ldr	r3, [r6, #0]
 80050c6:	0608      	lsls	r0, r1, #24
 80050c8:	f853 5b04 	ldr.w	r5, [r3], #4
 80050cc:	d402      	bmi.n	80050d4 <_printf_i+0xe8>
 80050ce:	0649      	lsls	r1, r1, #25
 80050d0:	bf48      	it	mi
 80050d2:	b2ad      	uxthmi	r5, r5
 80050d4:	2f6f      	cmp	r7, #111	@ 0x6f
 80050d6:	4853      	ldr	r0, [pc, #332]	@ (8005224 <_printf_i+0x238>)
 80050d8:	6033      	str	r3, [r6, #0]
 80050da:	bf14      	ite	ne
 80050dc:	230a      	movne	r3, #10
 80050de:	2308      	moveq	r3, #8
 80050e0:	2100      	movs	r1, #0
 80050e2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050e6:	6866      	ldr	r6, [r4, #4]
 80050e8:	60a6      	str	r6, [r4, #8]
 80050ea:	2e00      	cmp	r6, #0
 80050ec:	bfa2      	ittt	ge
 80050ee:	6821      	ldrge	r1, [r4, #0]
 80050f0:	f021 0104 	bicge.w	r1, r1, #4
 80050f4:	6021      	strge	r1, [r4, #0]
 80050f6:	b90d      	cbnz	r5, 80050fc <_printf_i+0x110>
 80050f8:	2e00      	cmp	r6, #0
 80050fa:	d04b      	beq.n	8005194 <_printf_i+0x1a8>
 80050fc:	4616      	mov	r6, r2
 80050fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8005102:	fb03 5711 	mls	r7, r3, r1, r5
 8005106:	5dc7      	ldrb	r7, [r0, r7]
 8005108:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800510c:	462f      	mov	r7, r5
 800510e:	42bb      	cmp	r3, r7
 8005110:	460d      	mov	r5, r1
 8005112:	d9f4      	bls.n	80050fe <_printf_i+0x112>
 8005114:	2b08      	cmp	r3, #8
 8005116:	d10b      	bne.n	8005130 <_printf_i+0x144>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	07df      	lsls	r7, r3, #31
 800511c:	d508      	bpl.n	8005130 <_printf_i+0x144>
 800511e:	6923      	ldr	r3, [r4, #16]
 8005120:	6861      	ldr	r1, [r4, #4]
 8005122:	4299      	cmp	r1, r3
 8005124:	bfde      	ittt	le
 8005126:	2330      	movle	r3, #48	@ 0x30
 8005128:	f806 3c01 	strble.w	r3, [r6, #-1]
 800512c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005130:	1b92      	subs	r2, r2, r6
 8005132:	6122      	str	r2, [r4, #16]
 8005134:	f8cd a000 	str.w	sl, [sp]
 8005138:	464b      	mov	r3, r9
 800513a:	aa03      	add	r2, sp, #12
 800513c:	4621      	mov	r1, r4
 800513e:	4640      	mov	r0, r8
 8005140:	f7ff fee6 	bl	8004f10 <_printf_common>
 8005144:	3001      	adds	r0, #1
 8005146:	d14a      	bne.n	80051de <_printf_i+0x1f2>
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	b004      	add	sp, #16
 800514e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005152:	6823      	ldr	r3, [r4, #0]
 8005154:	f043 0320 	orr.w	r3, r3, #32
 8005158:	6023      	str	r3, [r4, #0]
 800515a:	4833      	ldr	r0, [pc, #204]	@ (8005228 <_printf_i+0x23c>)
 800515c:	2778      	movs	r7, #120	@ 0x78
 800515e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005162:	6823      	ldr	r3, [r4, #0]
 8005164:	6831      	ldr	r1, [r6, #0]
 8005166:	061f      	lsls	r7, r3, #24
 8005168:	f851 5b04 	ldr.w	r5, [r1], #4
 800516c:	d402      	bmi.n	8005174 <_printf_i+0x188>
 800516e:	065f      	lsls	r7, r3, #25
 8005170:	bf48      	it	mi
 8005172:	b2ad      	uxthmi	r5, r5
 8005174:	6031      	str	r1, [r6, #0]
 8005176:	07d9      	lsls	r1, r3, #31
 8005178:	bf44      	itt	mi
 800517a:	f043 0320 	orrmi.w	r3, r3, #32
 800517e:	6023      	strmi	r3, [r4, #0]
 8005180:	b11d      	cbz	r5, 800518a <_printf_i+0x19e>
 8005182:	2310      	movs	r3, #16
 8005184:	e7ac      	b.n	80050e0 <_printf_i+0xf4>
 8005186:	4827      	ldr	r0, [pc, #156]	@ (8005224 <_printf_i+0x238>)
 8005188:	e7e9      	b.n	800515e <_printf_i+0x172>
 800518a:	6823      	ldr	r3, [r4, #0]
 800518c:	f023 0320 	bic.w	r3, r3, #32
 8005190:	6023      	str	r3, [r4, #0]
 8005192:	e7f6      	b.n	8005182 <_printf_i+0x196>
 8005194:	4616      	mov	r6, r2
 8005196:	e7bd      	b.n	8005114 <_printf_i+0x128>
 8005198:	6833      	ldr	r3, [r6, #0]
 800519a:	6825      	ldr	r5, [r4, #0]
 800519c:	6961      	ldr	r1, [r4, #20]
 800519e:	1d18      	adds	r0, r3, #4
 80051a0:	6030      	str	r0, [r6, #0]
 80051a2:	062e      	lsls	r6, r5, #24
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	d501      	bpl.n	80051ac <_printf_i+0x1c0>
 80051a8:	6019      	str	r1, [r3, #0]
 80051aa:	e002      	b.n	80051b2 <_printf_i+0x1c6>
 80051ac:	0668      	lsls	r0, r5, #25
 80051ae:	d5fb      	bpl.n	80051a8 <_printf_i+0x1bc>
 80051b0:	8019      	strh	r1, [r3, #0]
 80051b2:	2300      	movs	r3, #0
 80051b4:	6123      	str	r3, [r4, #16]
 80051b6:	4616      	mov	r6, r2
 80051b8:	e7bc      	b.n	8005134 <_printf_i+0x148>
 80051ba:	6833      	ldr	r3, [r6, #0]
 80051bc:	1d1a      	adds	r2, r3, #4
 80051be:	6032      	str	r2, [r6, #0]
 80051c0:	681e      	ldr	r6, [r3, #0]
 80051c2:	6862      	ldr	r2, [r4, #4]
 80051c4:	2100      	movs	r1, #0
 80051c6:	4630      	mov	r0, r6
 80051c8:	f7fb f80a 	bl	80001e0 <memchr>
 80051cc:	b108      	cbz	r0, 80051d2 <_printf_i+0x1e6>
 80051ce:	1b80      	subs	r0, r0, r6
 80051d0:	6060      	str	r0, [r4, #4]
 80051d2:	6863      	ldr	r3, [r4, #4]
 80051d4:	6123      	str	r3, [r4, #16]
 80051d6:	2300      	movs	r3, #0
 80051d8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051dc:	e7aa      	b.n	8005134 <_printf_i+0x148>
 80051de:	6923      	ldr	r3, [r4, #16]
 80051e0:	4632      	mov	r2, r6
 80051e2:	4649      	mov	r1, r9
 80051e4:	4640      	mov	r0, r8
 80051e6:	47d0      	blx	sl
 80051e8:	3001      	adds	r0, #1
 80051ea:	d0ad      	beq.n	8005148 <_printf_i+0x15c>
 80051ec:	6823      	ldr	r3, [r4, #0]
 80051ee:	079b      	lsls	r3, r3, #30
 80051f0:	d413      	bmi.n	800521a <_printf_i+0x22e>
 80051f2:	68e0      	ldr	r0, [r4, #12]
 80051f4:	9b03      	ldr	r3, [sp, #12]
 80051f6:	4298      	cmp	r0, r3
 80051f8:	bfb8      	it	lt
 80051fa:	4618      	movlt	r0, r3
 80051fc:	e7a6      	b.n	800514c <_printf_i+0x160>
 80051fe:	2301      	movs	r3, #1
 8005200:	4632      	mov	r2, r6
 8005202:	4649      	mov	r1, r9
 8005204:	4640      	mov	r0, r8
 8005206:	47d0      	blx	sl
 8005208:	3001      	adds	r0, #1
 800520a:	d09d      	beq.n	8005148 <_printf_i+0x15c>
 800520c:	3501      	adds	r5, #1
 800520e:	68e3      	ldr	r3, [r4, #12]
 8005210:	9903      	ldr	r1, [sp, #12]
 8005212:	1a5b      	subs	r3, r3, r1
 8005214:	42ab      	cmp	r3, r5
 8005216:	dcf2      	bgt.n	80051fe <_printf_i+0x212>
 8005218:	e7eb      	b.n	80051f2 <_printf_i+0x206>
 800521a:	2500      	movs	r5, #0
 800521c:	f104 0619 	add.w	r6, r4, #25
 8005220:	e7f5      	b.n	800520e <_printf_i+0x222>
 8005222:	bf00      	nop
 8005224:	0800766e 	.word	0x0800766e
 8005228:	0800767f 	.word	0x0800767f

0800522c <std>:
 800522c:	2300      	movs	r3, #0
 800522e:	b510      	push	{r4, lr}
 8005230:	4604      	mov	r4, r0
 8005232:	e9c0 3300 	strd	r3, r3, [r0]
 8005236:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800523a:	6083      	str	r3, [r0, #8]
 800523c:	8181      	strh	r1, [r0, #12]
 800523e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005240:	81c2      	strh	r2, [r0, #14]
 8005242:	6183      	str	r3, [r0, #24]
 8005244:	4619      	mov	r1, r3
 8005246:	2208      	movs	r2, #8
 8005248:	305c      	adds	r0, #92	@ 0x5c
 800524a:	f000 f914 	bl	8005476 <memset>
 800524e:	4b0d      	ldr	r3, [pc, #52]	@ (8005284 <std+0x58>)
 8005250:	6263      	str	r3, [r4, #36]	@ 0x24
 8005252:	4b0d      	ldr	r3, [pc, #52]	@ (8005288 <std+0x5c>)
 8005254:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005256:	4b0d      	ldr	r3, [pc, #52]	@ (800528c <std+0x60>)
 8005258:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800525a:	4b0d      	ldr	r3, [pc, #52]	@ (8005290 <std+0x64>)
 800525c:	6323      	str	r3, [r4, #48]	@ 0x30
 800525e:	4b0d      	ldr	r3, [pc, #52]	@ (8005294 <std+0x68>)
 8005260:	6224      	str	r4, [r4, #32]
 8005262:	429c      	cmp	r4, r3
 8005264:	d006      	beq.n	8005274 <std+0x48>
 8005266:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800526a:	4294      	cmp	r4, r2
 800526c:	d002      	beq.n	8005274 <std+0x48>
 800526e:	33d0      	adds	r3, #208	@ 0xd0
 8005270:	429c      	cmp	r4, r3
 8005272:	d105      	bne.n	8005280 <std+0x54>
 8005274:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005278:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800527c:	f000 b978 	b.w	8005570 <__retarget_lock_init_recursive>
 8005280:	bd10      	pop	{r4, pc}
 8005282:	bf00      	nop
 8005284:	080053f1 	.word	0x080053f1
 8005288:	08005413 	.word	0x08005413
 800528c:	0800544b 	.word	0x0800544b
 8005290:	0800546f 	.word	0x0800546f
 8005294:	200002cc 	.word	0x200002cc

08005298 <stdio_exit_handler>:
 8005298:	4a02      	ldr	r2, [pc, #8]	@ (80052a4 <stdio_exit_handler+0xc>)
 800529a:	4903      	ldr	r1, [pc, #12]	@ (80052a8 <stdio_exit_handler+0x10>)
 800529c:	4803      	ldr	r0, [pc, #12]	@ (80052ac <stdio_exit_handler+0x14>)
 800529e:	f000 b869 	b.w	8005374 <_fwalk_sglue>
 80052a2:	bf00      	nop
 80052a4:	2000000c 	.word	0x2000000c
 80052a8:	08006ecd 	.word	0x08006ecd
 80052ac:	2000001c 	.word	0x2000001c

080052b0 <cleanup_stdio>:
 80052b0:	6841      	ldr	r1, [r0, #4]
 80052b2:	4b0c      	ldr	r3, [pc, #48]	@ (80052e4 <cleanup_stdio+0x34>)
 80052b4:	4299      	cmp	r1, r3
 80052b6:	b510      	push	{r4, lr}
 80052b8:	4604      	mov	r4, r0
 80052ba:	d001      	beq.n	80052c0 <cleanup_stdio+0x10>
 80052bc:	f001 fe06 	bl	8006ecc <_fflush_r>
 80052c0:	68a1      	ldr	r1, [r4, #8]
 80052c2:	4b09      	ldr	r3, [pc, #36]	@ (80052e8 <cleanup_stdio+0x38>)
 80052c4:	4299      	cmp	r1, r3
 80052c6:	d002      	beq.n	80052ce <cleanup_stdio+0x1e>
 80052c8:	4620      	mov	r0, r4
 80052ca:	f001 fdff 	bl	8006ecc <_fflush_r>
 80052ce:	68e1      	ldr	r1, [r4, #12]
 80052d0:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <cleanup_stdio+0x3c>)
 80052d2:	4299      	cmp	r1, r3
 80052d4:	d004      	beq.n	80052e0 <cleanup_stdio+0x30>
 80052d6:	4620      	mov	r0, r4
 80052d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052dc:	f001 bdf6 	b.w	8006ecc <_fflush_r>
 80052e0:	bd10      	pop	{r4, pc}
 80052e2:	bf00      	nop
 80052e4:	200002cc 	.word	0x200002cc
 80052e8:	20000334 	.word	0x20000334
 80052ec:	2000039c 	.word	0x2000039c

080052f0 <global_stdio_init.part.0>:
 80052f0:	b510      	push	{r4, lr}
 80052f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005320 <global_stdio_init.part.0+0x30>)
 80052f4:	4c0b      	ldr	r4, [pc, #44]	@ (8005324 <global_stdio_init.part.0+0x34>)
 80052f6:	4a0c      	ldr	r2, [pc, #48]	@ (8005328 <global_stdio_init.part.0+0x38>)
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	4620      	mov	r0, r4
 80052fc:	2200      	movs	r2, #0
 80052fe:	2104      	movs	r1, #4
 8005300:	f7ff ff94 	bl	800522c <std>
 8005304:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005308:	2201      	movs	r2, #1
 800530a:	2109      	movs	r1, #9
 800530c:	f7ff ff8e 	bl	800522c <std>
 8005310:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005314:	2202      	movs	r2, #2
 8005316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800531a:	2112      	movs	r1, #18
 800531c:	f7ff bf86 	b.w	800522c <std>
 8005320:	20000404 	.word	0x20000404
 8005324:	200002cc 	.word	0x200002cc
 8005328:	08005299 	.word	0x08005299

0800532c <__sfp_lock_acquire>:
 800532c:	4801      	ldr	r0, [pc, #4]	@ (8005334 <__sfp_lock_acquire+0x8>)
 800532e:	f000 b920 	b.w	8005572 <__retarget_lock_acquire_recursive>
 8005332:	bf00      	nop
 8005334:	2000040d 	.word	0x2000040d

08005338 <__sfp_lock_release>:
 8005338:	4801      	ldr	r0, [pc, #4]	@ (8005340 <__sfp_lock_release+0x8>)
 800533a:	f000 b91b 	b.w	8005574 <__retarget_lock_release_recursive>
 800533e:	bf00      	nop
 8005340:	2000040d 	.word	0x2000040d

08005344 <__sinit>:
 8005344:	b510      	push	{r4, lr}
 8005346:	4604      	mov	r4, r0
 8005348:	f7ff fff0 	bl	800532c <__sfp_lock_acquire>
 800534c:	6a23      	ldr	r3, [r4, #32]
 800534e:	b11b      	cbz	r3, 8005358 <__sinit+0x14>
 8005350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005354:	f7ff bff0 	b.w	8005338 <__sfp_lock_release>
 8005358:	4b04      	ldr	r3, [pc, #16]	@ (800536c <__sinit+0x28>)
 800535a:	6223      	str	r3, [r4, #32]
 800535c:	4b04      	ldr	r3, [pc, #16]	@ (8005370 <__sinit+0x2c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1f5      	bne.n	8005350 <__sinit+0xc>
 8005364:	f7ff ffc4 	bl	80052f0 <global_stdio_init.part.0>
 8005368:	e7f2      	b.n	8005350 <__sinit+0xc>
 800536a:	bf00      	nop
 800536c:	080052b1 	.word	0x080052b1
 8005370:	20000404 	.word	0x20000404

08005374 <_fwalk_sglue>:
 8005374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005378:	4607      	mov	r7, r0
 800537a:	4688      	mov	r8, r1
 800537c:	4614      	mov	r4, r2
 800537e:	2600      	movs	r6, #0
 8005380:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005384:	f1b9 0901 	subs.w	r9, r9, #1
 8005388:	d505      	bpl.n	8005396 <_fwalk_sglue+0x22>
 800538a:	6824      	ldr	r4, [r4, #0]
 800538c:	2c00      	cmp	r4, #0
 800538e:	d1f7      	bne.n	8005380 <_fwalk_sglue+0xc>
 8005390:	4630      	mov	r0, r6
 8005392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005396:	89ab      	ldrh	r3, [r5, #12]
 8005398:	2b01      	cmp	r3, #1
 800539a:	d907      	bls.n	80053ac <_fwalk_sglue+0x38>
 800539c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80053a0:	3301      	adds	r3, #1
 80053a2:	d003      	beq.n	80053ac <_fwalk_sglue+0x38>
 80053a4:	4629      	mov	r1, r5
 80053a6:	4638      	mov	r0, r7
 80053a8:	47c0      	blx	r8
 80053aa:	4306      	orrs	r6, r0
 80053ac:	3568      	adds	r5, #104	@ 0x68
 80053ae:	e7e9      	b.n	8005384 <_fwalk_sglue+0x10>

080053b0 <siprintf>:
 80053b0:	b40e      	push	{r1, r2, r3}
 80053b2:	b500      	push	{lr}
 80053b4:	b09c      	sub	sp, #112	@ 0x70
 80053b6:	ab1d      	add	r3, sp, #116	@ 0x74
 80053b8:	9002      	str	r0, [sp, #8]
 80053ba:	9006      	str	r0, [sp, #24]
 80053bc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80053c0:	4809      	ldr	r0, [pc, #36]	@ (80053e8 <siprintf+0x38>)
 80053c2:	9107      	str	r1, [sp, #28]
 80053c4:	9104      	str	r1, [sp, #16]
 80053c6:	4909      	ldr	r1, [pc, #36]	@ (80053ec <siprintf+0x3c>)
 80053c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80053cc:	9105      	str	r1, [sp, #20]
 80053ce:	6800      	ldr	r0, [r0, #0]
 80053d0:	9301      	str	r3, [sp, #4]
 80053d2:	a902      	add	r1, sp, #8
 80053d4:	f001 fbfa 	bl	8006bcc <_svfiprintf_r>
 80053d8:	9b02      	ldr	r3, [sp, #8]
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]
 80053de:	b01c      	add	sp, #112	@ 0x70
 80053e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80053e4:	b003      	add	sp, #12
 80053e6:	4770      	bx	lr
 80053e8:	20000018 	.word	0x20000018
 80053ec:	ffff0208 	.word	0xffff0208

080053f0 <__sread>:
 80053f0:	b510      	push	{r4, lr}
 80053f2:	460c      	mov	r4, r1
 80053f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053f8:	f000 f86c 	bl	80054d4 <_read_r>
 80053fc:	2800      	cmp	r0, #0
 80053fe:	bfab      	itete	ge
 8005400:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005402:	89a3      	ldrhlt	r3, [r4, #12]
 8005404:	181b      	addge	r3, r3, r0
 8005406:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800540a:	bfac      	ite	ge
 800540c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800540e:	81a3      	strhlt	r3, [r4, #12]
 8005410:	bd10      	pop	{r4, pc}

08005412 <__swrite>:
 8005412:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005416:	461f      	mov	r7, r3
 8005418:	898b      	ldrh	r3, [r1, #12]
 800541a:	05db      	lsls	r3, r3, #23
 800541c:	4605      	mov	r5, r0
 800541e:	460c      	mov	r4, r1
 8005420:	4616      	mov	r6, r2
 8005422:	d505      	bpl.n	8005430 <__swrite+0x1e>
 8005424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005428:	2302      	movs	r3, #2
 800542a:	2200      	movs	r2, #0
 800542c:	f000 f840 	bl	80054b0 <_lseek_r>
 8005430:	89a3      	ldrh	r3, [r4, #12]
 8005432:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005436:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800543a:	81a3      	strh	r3, [r4, #12]
 800543c:	4632      	mov	r2, r6
 800543e:	463b      	mov	r3, r7
 8005440:	4628      	mov	r0, r5
 8005442:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005446:	f000 b857 	b.w	80054f8 <_write_r>

0800544a <__sseek>:
 800544a:	b510      	push	{r4, lr}
 800544c:	460c      	mov	r4, r1
 800544e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005452:	f000 f82d 	bl	80054b0 <_lseek_r>
 8005456:	1c43      	adds	r3, r0, #1
 8005458:	89a3      	ldrh	r3, [r4, #12]
 800545a:	bf15      	itete	ne
 800545c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800545e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005462:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005466:	81a3      	strheq	r3, [r4, #12]
 8005468:	bf18      	it	ne
 800546a:	81a3      	strhne	r3, [r4, #12]
 800546c:	bd10      	pop	{r4, pc}

0800546e <__sclose>:
 800546e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005472:	f000 b80d 	b.w	8005490 <_close_r>

08005476 <memset>:
 8005476:	4402      	add	r2, r0
 8005478:	4603      	mov	r3, r0
 800547a:	4293      	cmp	r3, r2
 800547c:	d100      	bne.n	8005480 <memset+0xa>
 800547e:	4770      	bx	lr
 8005480:	f803 1b01 	strb.w	r1, [r3], #1
 8005484:	e7f9      	b.n	800547a <memset+0x4>
	...

08005488 <_localeconv_r>:
 8005488:	4800      	ldr	r0, [pc, #0]	@ (800548c <_localeconv_r+0x4>)
 800548a:	4770      	bx	lr
 800548c:	20000158 	.word	0x20000158

08005490 <_close_r>:
 8005490:	b538      	push	{r3, r4, r5, lr}
 8005492:	4d06      	ldr	r5, [pc, #24]	@ (80054ac <_close_r+0x1c>)
 8005494:	2300      	movs	r3, #0
 8005496:	4604      	mov	r4, r0
 8005498:	4608      	mov	r0, r1
 800549a:	602b      	str	r3, [r5, #0]
 800549c:	f7fc fdcb 	bl	8002036 <_close>
 80054a0:	1c43      	adds	r3, r0, #1
 80054a2:	d102      	bne.n	80054aa <_close_r+0x1a>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	b103      	cbz	r3, 80054aa <_close_r+0x1a>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	bd38      	pop	{r3, r4, r5, pc}
 80054ac:	20000408 	.word	0x20000408

080054b0 <_lseek_r>:
 80054b0:	b538      	push	{r3, r4, r5, lr}
 80054b2:	4d07      	ldr	r5, [pc, #28]	@ (80054d0 <_lseek_r+0x20>)
 80054b4:	4604      	mov	r4, r0
 80054b6:	4608      	mov	r0, r1
 80054b8:	4611      	mov	r1, r2
 80054ba:	2200      	movs	r2, #0
 80054bc:	602a      	str	r2, [r5, #0]
 80054be:	461a      	mov	r2, r3
 80054c0:	f7fc fde0 	bl	8002084 <_lseek>
 80054c4:	1c43      	adds	r3, r0, #1
 80054c6:	d102      	bne.n	80054ce <_lseek_r+0x1e>
 80054c8:	682b      	ldr	r3, [r5, #0]
 80054ca:	b103      	cbz	r3, 80054ce <_lseek_r+0x1e>
 80054cc:	6023      	str	r3, [r4, #0]
 80054ce:	bd38      	pop	{r3, r4, r5, pc}
 80054d0:	20000408 	.word	0x20000408

080054d4 <_read_r>:
 80054d4:	b538      	push	{r3, r4, r5, lr}
 80054d6:	4d07      	ldr	r5, [pc, #28]	@ (80054f4 <_read_r+0x20>)
 80054d8:	4604      	mov	r4, r0
 80054da:	4608      	mov	r0, r1
 80054dc:	4611      	mov	r1, r2
 80054de:	2200      	movs	r2, #0
 80054e0:	602a      	str	r2, [r5, #0]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f7fc fd6e 	bl	8001fc4 <_read>
 80054e8:	1c43      	adds	r3, r0, #1
 80054ea:	d102      	bne.n	80054f2 <_read_r+0x1e>
 80054ec:	682b      	ldr	r3, [r5, #0]
 80054ee:	b103      	cbz	r3, 80054f2 <_read_r+0x1e>
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	bd38      	pop	{r3, r4, r5, pc}
 80054f4:	20000408 	.word	0x20000408

080054f8 <_write_r>:
 80054f8:	b538      	push	{r3, r4, r5, lr}
 80054fa:	4d07      	ldr	r5, [pc, #28]	@ (8005518 <_write_r+0x20>)
 80054fc:	4604      	mov	r4, r0
 80054fe:	4608      	mov	r0, r1
 8005500:	4611      	mov	r1, r2
 8005502:	2200      	movs	r2, #0
 8005504:	602a      	str	r2, [r5, #0]
 8005506:	461a      	mov	r2, r3
 8005508:	f7fc fd79 	bl	8001ffe <_write>
 800550c:	1c43      	adds	r3, r0, #1
 800550e:	d102      	bne.n	8005516 <_write_r+0x1e>
 8005510:	682b      	ldr	r3, [r5, #0]
 8005512:	b103      	cbz	r3, 8005516 <_write_r+0x1e>
 8005514:	6023      	str	r3, [r4, #0]
 8005516:	bd38      	pop	{r3, r4, r5, pc}
 8005518:	20000408 	.word	0x20000408

0800551c <__errno>:
 800551c:	4b01      	ldr	r3, [pc, #4]	@ (8005524 <__errno+0x8>)
 800551e:	6818      	ldr	r0, [r3, #0]
 8005520:	4770      	bx	lr
 8005522:	bf00      	nop
 8005524:	20000018 	.word	0x20000018

08005528 <__libc_init_array>:
 8005528:	b570      	push	{r4, r5, r6, lr}
 800552a:	4d0d      	ldr	r5, [pc, #52]	@ (8005560 <__libc_init_array+0x38>)
 800552c:	4c0d      	ldr	r4, [pc, #52]	@ (8005564 <__libc_init_array+0x3c>)
 800552e:	1b64      	subs	r4, r4, r5
 8005530:	10a4      	asrs	r4, r4, #2
 8005532:	2600      	movs	r6, #0
 8005534:	42a6      	cmp	r6, r4
 8005536:	d109      	bne.n	800554c <__libc_init_array+0x24>
 8005538:	4d0b      	ldr	r5, [pc, #44]	@ (8005568 <__libc_init_array+0x40>)
 800553a:	4c0c      	ldr	r4, [pc, #48]	@ (800556c <__libc_init_array+0x44>)
 800553c:	f002 f864 	bl	8007608 <_init>
 8005540:	1b64      	subs	r4, r4, r5
 8005542:	10a4      	asrs	r4, r4, #2
 8005544:	2600      	movs	r6, #0
 8005546:	42a6      	cmp	r6, r4
 8005548:	d105      	bne.n	8005556 <__libc_init_array+0x2e>
 800554a:	bd70      	pop	{r4, r5, r6, pc}
 800554c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005550:	4798      	blx	r3
 8005552:	3601      	adds	r6, #1
 8005554:	e7ee      	b.n	8005534 <__libc_init_array+0xc>
 8005556:	f855 3b04 	ldr.w	r3, [r5], #4
 800555a:	4798      	blx	r3
 800555c:	3601      	adds	r6, #1
 800555e:	e7f2      	b.n	8005546 <__libc_init_array+0x1e>
 8005560:	080079d8 	.word	0x080079d8
 8005564:	080079d8 	.word	0x080079d8
 8005568:	080079d8 	.word	0x080079d8
 800556c:	080079dc 	.word	0x080079dc

08005570 <__retarget_lock_init_recursive>:
 8005570:	4770      	bx	lr

08005572 <__retarget_lock_acquire_recursive>:
 8005572:	4770      	bx	lr

08005574 <__retarget_lock_release_recursive>:
 8005574:	4770      	bx	lr

08005576 <quorem>:
 8005576:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557a:	6903      	ldr	r3, [r0, #16]
 800557c:	690c      	ldr	r4, [r1, #16]
 800557e:	42a3      	cmp	r3, r4
 8005580:	4607      	mov	r7, r0
 8005582:	db7e      	blt.n	8005682 <quorem+0x10c>
 8005584:	3c01      	subs	r4, #1
 8005586:	f101 0814 	add.w	r8, r1, #20
 800558a:	00a3      	lsls	r3, r4, #2
 800558c:	f100 0514 	add.w	r5, r0, #20
 8005590:	9300      	str	r3, [sp, #0]
 8005592:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800559c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055a0:	3301      	adds	r3, #1
 80055a2:	429a      	cmp	r2, r3
 80055a4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055a8:	fbb2 f6f3 	udiv	r6, r2, r3
 80055ac:	d32e      	bcc.n	800560c <quorem+0x96>
 80055ae:	f04f 0a00 	mov.w	sl, #0
 80055b2:	46c4      	mov	ip, r8
 80055b4:	46ae      	mov	lr, r5
 80055b6:	46d3      	mov	fp, sl
 80055b8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80055bc:	b298      	uxth	r0, r3
 80055be:	fb06 a000 	mla	r0, r6, r0, sl
 80055c2:	0c02      	lsrs	r2, r0, #16
 80055c4:	0c1b      	lsrs	r3, r3, #16
 80055c6:	fb06 2303 	mla	r3, r6, r3, r2
 80055ca:	f8de 2000 	ldr.w	r2, [lr]
 80055ce:	b280      	uxth	r0, r0
 80055d0:	b292      	uxth	r2, r2
 80055d2:	1a12      	subs	r2, r2, r0
 80055d4:	445a      	add	r2, fp
 80055d6:	f8de 0000 	ldr.w	r0, [lr]
 80055da:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80055de:	b29b      	uxth	r3, r3
 80055e0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80055e4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80055e8:	b292      	uxth	r2, r2
 80055ea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80055ee:	45e1      	cmp	r9, ip
 80055f0:	f84e 2b04 	str.w	r2, [lr], #4
 80055f4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80055f8:	d2de      	bcs.n	80055b8 <quorem+0x42>
 80055fa:	9b00      	ldr	r3, [sp, #0]
 80055fc:	58eb      	ldr	r3, [r5, r3]
 80055fe:	b92b      	cbnz	r3, 800560c <quorem+0x96>
 8005600:	9b01      	ldr	r3, [sp, #4]
 8005602:	3b04      	subs	r3, #4
 8005604:	429d      	cmp	r5, r3
 8005606:	461a      	mov	r2, r3
 8005608:	d32f      	bcc.n	800566a <quorem+0xf4>
 800560a:	613c      	str	r4, [r7, #16]
 800560c:	4638      	mov	r0, r7
 800560e:	f001 f979 	bl	8006904 <__mcmp>
 8005612:	2800      	cmp	r0, #0
 8005614:	db25      	blt.n	8005662 <quorem+0xec>
 8005616:	4629      	mov	r1, r5
 8005618:	2000      	movs	r0, #0
 800561a:	f858 2b04 	ldr.w	r2, [r8], #4
 800561e:	f8d1 c000 	ldr.w	ip, [r1]
 8005622:	fa1f fe82 	uxth.w	lr, r2
 8005626:	fa1f f38c 	uxth.w	r3, ip
 800562a:	eba3 030e 	sub.w	r3, r3, lr
 800562e:	4403      	add	r3, r0
 8005630:	0c12      	lsrs	r2, r2, #16
 8005632:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005636:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800563a:	b29b      	uxth	r3, r3
 800563c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005640:	45c1      	cmp	r9, r8
 8005642:	f841 3b04 	str.w	r3, [r1], #4
 8005646:	ea4f 4022 	mov.w	r0, r2, asr #16
 800564a:	d2e6      	bcs.n	800561a <quorem+0xa4>
 800564c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005650:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005654:	b922      	cbnz	r2, 8005660 <quorem+0xea>
 8005656:	3b04      	subs	r3, #4
 8005658:	429d      	cmp	r5, r3
 800565a:	461a      	mov	r2, r3
 800565c:	d30b      	bcc.n	8005676 <quorem+0x100>
 800565e:	613c      	str	r4, [r7, #16]
 8005660:	3601      	adds	r6, #1
 8005662:	4630      	mov	r0, r6
 8005664:	b003      	add	sp, #12
 8005666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566a:	6812      	ldr	r2, [r2, #0]
 800566c:	3b04      	subs	r3, #4
 800566e:	2a00      	cmp	r2, #0
 8005670:	d1cb      	bne.n	800560a <quorem+0x94>
 8005672:	3c01      	subs	r4, #1
 8005674:	e7c6      	b.n	8005604 <quorem+0x8e>
 8005676:	6812      	ldr	r2, [r2, #0]
 8005678:	3b04      	subs	r3, #4
 800567a:	2a00      	cmp	r2, #0
 800567c:	d1ef      	bne.n	800565e <quorem+0xe8>
 800567e:	3c01      	subs	r4, #1
 8005680:	e7ea      	b.n	8005658 <quorem+0xe2>
 8005682:	2000      	movs	r0, #0
 8005684:	e7ee      	b.n	8005664 <quorem+0xee>
	...

08005688 <_dtoa_r>:
 8005688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800568c:	69c7      	ldr	r7, [r0, #28]
 800568e:	b099      	sub	sp, #100	@ 0x64
 8005690:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005694:	ec55 4b10 	vmov	r4, r5, d0
 8005698:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800569a:	9109      	str	r1, [sp, #36]	@ 0x24
 800569c:	4683      	mov	fp, r0
 800569e:	920e      	str	r2, [sp, #56]	@ 0x38
 80056a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80056a2:	b97f      	cbnz	r7, 80056c4 <_dtoa_r+0x3c>
 80056a4:	2010      	movs	r0, #16
 80056a6:	f000 fdfd 	bl	80062a4 <malloc>
 80056aa:	4602      	mov	r2, r0
 80056ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80056b0:	b920      	cbnz	r0, 80056bc <_dtoa_r+0x34>
 80056b2:	4ba7      	ldr	r3, [pc, #668]	@ (8005950 <_dtoa_r+0x2c8>)
 80056b4:	21ef      	movs	r1, #239	@ 0xef
 80056b6:	48a7      	ldr	r0, [pc, #668]	@ (8005954 <_dtoa_r+0x2cc>)
 80056b8:	f001 fc68 	bl	8006f8c <__assert_func>
 80056bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80056c0:	6007      	str	r7, [r0, #0]
 80056c2:	60c7      	str	r7, [r0, #12]
 80056c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056c8:	6819      	ldr	r1, [r3, #0]
 80056ca:	b159      	cbz	r1, 80056e4 <_dtoa_r+0x5c>
 80056cc:	685a      	ldr	r2, [r3, #4]
 80056ce:	604a      	str	r2, [r1, #4]
 80056d0:	2301      	movs	r3, #1
 80056d2:	4093      	lsls	r3, r2
 80056d4:	608b      	str	r3, [r1, #8]
 80056d6:	4658      	mov	r0, fp
 80056d8:	f000 feda 	bl	8006490 <_Bfree>
 80056dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80056e0:	2200      	movs	r2, #0
 80056e2:	601a      	str	r2, [r3, #0]
 80056e4:	1e2b      	subs	r3, r5, #0
 80056e6:	bfb9      	ittee	lt
 80056e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80056ec:	9303      	strlt	r3, [sp, #12]
 80056ee:	2300      	movge	r3, #0
 80056f0:	6033      	strge	r3, [r6, #0]
 80056f2:	9f03      	ldr	r7, [sp, #12]
 80056f4:	4b98      	ldr	r3, [pc, #608]	@ (8005958 <_dtoa_r+0x2d0>)
 80056f6:	bfbc      	itt	lt
 80056f8:	2201      	movlt	r2, #1
 80056fa:	6032      	strlt	r2, [r6, #0]
 80056fc:	43bb      	bics	r3, r7
 80056fe:	d112      	bne.n	8005726 <_dtoa_r+0x9e>
 8005700:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005702:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800570c:	4323      	orrs	r3, r4
 800570e:	f000 854d 	beq.w	80061ac <_dtoa_r+0xb24>
 8005712:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005714:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800596c <_dtoa_r+0x2e4>
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 854f 	beq.w	80061bc <_dtoa_r+0xb34>
 800571e:	f10a 0303 	add.w	r3, sl, #3
 8005722:	f000 bd49 	b.w	80061b8 <_dtoa_r+0xb30>
 8005726:	ed9d 7b02 	vldr	d7, [sp, #8]
 800572a:	2200      	movs	r2, #0
 800572c:	ec51 0b17 	vmov	r0, r1, d7
 8005730:	2300      	movs	r3, #0
 8005732:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005736:	f7fb f9cf 	bl	8000ad8 <__aeabi_dcmpeq>
 800573a:	4680      	mov	r8, r0
 800573c:	b158      	cbz	r0, 8005756 <_dtoa_r+0xce>
 800573e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005740:	2301      	movs	r3, #1
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005746:	b113      	cbz	r3, 800574e <_dtoa_r+0xc6>
 8005748:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800574a:	4b84      	ldr	r3, [pc, #528]	@ (800595c <_dtoa_r+0x2d4>)
 800574c:	6013      	str	r3, [r2, #0]
 800574e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005970 <_dtoa_r+0x2e8>
 8005752:	f000 bd33 	b.w	80061bc <_dtoa_r+0xb34>
 8005756:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800575a:	aa16      	add	r2, sp, #88	@ 0x58
 800575c:	a917      	add	r1, sp, #92	@ 0x5c
 800575e:	4658      	mov	r0, fp
 8005760:	f001 f980 	bl	8006a64 <__d2b>
 8005764:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005768:	4681      	mov	r9, r0
 800576a:	2e00      	cmp	r6, #0
 800576c:	d077      	beq.n	800585e <_dtoa_r+0x1d6>
 800576e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005770:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005778:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800577c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005780:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005784:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005788:	4619      	mov	r1, r3
 800578a:	2200      	movs	r2, #0
 800578c:	4b74      	ldr	r3, [pc, #464]	@ (8005960 <_dtoa_r+0x2d8>)
 800578e:	f7fa fd83 	bl	8000298 <__aeabi_dsub>
 8005792:	a369      	add	r3, pc, #420	@ (adr r3, 8005938 <_dtoa_r+0x2b0>)
 8005794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005798:	f7fa ff36 	bl	8000608 <__aeabi_dmul>
 800579c:	a368      	add	r3, pc, #416	@ (adr r3, 8005940 <_dtoa_r+0x2b8>)
 800579e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057a2:	f7fa fd7b 	bl	800029c <__adddf3>
 80057a6:	4604      	mov	r4, r0
 80057a8:	4630      	mov	r0, r6
 80057aa:	460d      	mov	r5, r1
 80057ac:	f7fa fec2 	bl	8000534 <__aeabi_i2d>
 80057b0:	a365      	add	r3, pc, #404	@ (adr r3, 8005948 <_dtoa_r+0x2c0>)
 80057b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057b6:	f7fa ff27 	bl	8000608 <__aeabi_dmul>
 80057ba:	4602      	mov	r2, r0
 80057bc:	460b      	mov	r3, r1
 80057be:	4620      	mov	r0, r4
 80057c0:	4629      	mov	r1, r5
 80057c2:	f7fa fd6b 	bl	800029c <__adddf3>
 80057c6:	4604      	mov	r4, r0
 80057c8:	460d      	mov	r5, r1
 80057ca:	f7fb f9cd 	bl	8000b68 <__aeabi_d2iz>
 80057ce:	2200      	movs	r2, #0
 80057d0:	4607      	mov	r7, r0
 80057d2:	2300      	movs	r3, #0
 80057d4:	4620      	mov	r0, r4
 80057d6:	4629      	mov	r1, r5
 80057d8:	f7fb f988 	bl	8000aec <__aeabi_dcmplt>
 80057dc:	b140      	cbz	r0, 80057f0 <_dtoa_r+0x168>
 80057de:	4638      	mov	r0, r7
 80057e0:	f7fa fea8 	bl	8000534 <__aeabi_i2d>
 80057e4:	4622      	mov	r2, r4
 80057e6:	462b      	mov	r3, r5
 80057e8:	f7fb f976 	bl	8000ad8 <__aeabi_dcmpeq>
 80057ec:	b900      	cbnz	r0, 80057f0 <_dtoa_r+0x168>
 80057ee:	3f01      	subs	r7, #1
 80057f0:	2f16      	cmp	r7, #22
 80057f2:	d851      	bhi.n	8005898 <_dtoa_r+0x210>
 80057f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005964 <_dtoa_r+0x2dc>)
 80057f6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80057fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005802:	f7fb f973 	bl	8000aec <__aeabi_dcmplt>
 8005806:	2800      	cmp	r0, #0
 8005808:	d048      	beq.n	800589c <_dtoa_r+0x214>
 800580a:	3f01      	subs	r7, #1
 800580c:	2300      	movs	r3, #0
 800580e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005810:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005812:	1b9b      	subs	r3, r3, r6
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	bf44      	itt	mi
 8005818:	f1c3 0801 	rsbmi	r8, r3, #1
 800581c:	2300      	movmi	r3, #0
 800581e:	9208      	str	r2, [sp, #32]
 8005820:	bf54      	ite	pl
 8005822:	f04f 0800 	movpl.w	r8, #0
 8005826:	9308      	strmi	r3, [sp, #32]
 8005828:	2f00      	cmp	r7, #0
 800582a:	db39      	blt.n	80058a0 <_dtoa_r+0x218>
 800582c:	9b08      	ldr	r3, [sp, #32]
 800582e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005830:	443b      	add	r3, r7
 8005832:	9308      	str	r3, [sp, #32]
 8005834:	2300      	movs	r3, #0
 8005836:	930a      	str	r3, [sp, #40]	@ 0x28
 8005838:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800583a:	2b09      	cmp	r3, #9
 800583c:	d864      	bhi.n	8005908 <_dtoa_r+0x280>
 800583e:	2b05      	cmp	r3, #5
 8005840:	bfc4      	itt	gt
 8005842:	3b04      	subgt	r3, #4
 8005844:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005846:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005848:	f1a3 0302 	sub.w	r3, r3, #2
 800584c:	bfcc      	ite	gt
 800584e:	2400      	movgt	r4, #0
 8005850:	2401      	movle	r4, #1
 8005852:	2b03      	cmp	r3, #3
 8005854:	d863      	bhi.n	800591e <_dtoa_r+0x296>
 8005856:	e8df f003 	tbb	[pc, r3]
 800585a:	372a      	.short	0x372a
 800585c:	5535      	.short	0x5535
 800585e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005862:	441e      	add	r6, r3
 8005864:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005868:	2b20      	cmp	r3, #32
 800586a:	bfc1      	itttt	gt
 800586c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005870:	409f      	lslgt	r7, r3
 8005872:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005876:	fa24 f303 	lsrgt.w	r3, r4, r3
 800587a:	bfd6      	itet	le
 800587c:	f1c3 0320 	rsble	r3, r3, #32
 8005880:	ea47 0003 	orrgt.w	r0, r7, r3
 8005884:	fa04 f003 	lslle.w	r0, r4, r3
 8005888:	f7fa fe44 	bl	8000514 <__aeabi_ui2d>
 800588c:	2201      	movs	r2, #1
 800588e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005892:	3e01      	subs	r6, #1
 8005894:	9214      	str	r2, [sp, #80]	@ 0x50
 8005896:	e777      	b.n	8005788 <_dtoa_r+0x100>
 8005898:	2301      	movs	r3, #1
 800589a:	e7b8      	b.n	800580e <_dtoa_r+0x186>
 800589c:	9012      	str	r0, [sp, #72]	@ 0x48
 800589e:	e7b7      	b.n	8005810 <_dtoa_r+0x188>
 80058a0:	427b      	negs	r3, r7
 80058a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80058a4:	2300      	movs	r3, #0
 80058a6:	eba8 0807 	sub.w	r8, r8, r7
 80058aa:	930f      	str	r3, [sp, #60]	@ 0x3c
 80058ac:	e7c4      	b.n	8005838 <_dtoa_r+0x1b0>
 80058ae:	2300      	movs	r3, #0
 80058b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	dc35      	bgt.n	8005924 <_dtoa_r+0x29c>
 80058b8:	2301      	movs	r3, #1
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	9307      	str	r3, [sp, #28]
 80058be:	461a      	mov	r2, r3
 80058c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80058c2:	e00b      	b.n	80058dc <_dtoa_r+0x254>
 80058c4:	2301      	movs	r3, #1
 80058c6:	e7f3      	b.n	80058b0 <_dtoa_r+0x228>
 80058c8:	2300      	movs	r3, #0
 80058ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80058ce:	18fb      	adds	r3, r7, r3
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	3301      	adds	r3, #1
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	9307      	str	r3, [sp, #28]
 80058d8:	bfb8      	it	lt
 80058da:	2301      	movlt	r3, #1
 80058dc:	f8db 001c 	ldr.w	r0, [fp, #28]
 80058e0:	2100      	movs	r1, #0
 80058e2:	2204      	movs	r2, #4
 80058e4:	f102 0514 	add.w	r5, r2, #20
 80058e8:	429d      	cmp	r5, r3
 80058ea:	d91f      	bls.n	800592c <_dtoa_r+0x2a4>
 80058ec:	6041      	str	r1, [r0, #4]
 80058ee:	4658      	mov	r0, fp
 80058f0:	f000 fd8e 	bl	8006410 <_Balloc>
 80058f4:	4682      	mov	sl, r0
 80058f6:	2800      	cmp	r0, #0
 80058f8:	d13c      	bne.n	8005974 <_dtoa_r+0x2ec>
 80058fa:	4b1b      	ldr	r3, [pc, #108]	@ (8005968 <_dtoa_r+0x2e0>)
 80058fc:	4602      	mov	r2, r0
 80058fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8005902:	e6d8      	b.n	80056b6 <_dtoa_r+0x2e>
 8005904:	2301      	movs	r3, #1
 8005906:	e7e0      	b.n	80058ca <_dtoa_r+0x242>
 8005908:	2401      	movs	r4, #1
 800590a:	2300      	movs	r3, #0
 800590c:	9309      	str	r3, [sp, #36]	@ 0x24
 800590e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005910:	f04f 33ff 	mov.w	r3, #4294967295
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	9307      	str	r3, [sp, #28]
 8005918:	2200      	movs	r2, #0
 800591a:	2312      	movs	r3, #18
 800591c:	e7d0      	b.n	80058c0 <_dtoa_r+0x238>
 800591e:	2301      	movs	r3, #1
 8005920:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005922:	e7f5      	b.n	8005910 <_dtoa_r+0x288>
 8005924:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	9307      	str	r3, [sp, #28]
 800592a:	e7d7      	b.n	80058dc <_dtoa_r+0x254>
 800592c:	3101      	adds	r1, #1
 800592e:	0052      	lsls	r2, r2, #1
 8005930:	e7d8      	b.n	80058e4 <_dtoa_r+0x25c>
 8005932:	bf00      	nop
 8005934:	f3af 8000 	nop.w
 8005938:	636f4361 	.word	0x636f4361
 800593c:	3fd287a7 	.word	0x3fd287a7
 8005940:	8b60c8b3 	.word	0x8b60c8b3
 8005944:	3fc68a28 	.word	0x3fc68a28
 8005948:	509f79fb 	.word	0x509f79fb
 800594c:	3fd34413 	.word	0x3fd34413
 8005950:	0800769d 	.word	0x0800769d
 8005954:	080076b4 	.word	0x080076b4
 8005958:	7ff00000 	.word	0x7ff00000
 800595c:	0800766d 	.word	0x0800766d
 8005960:	3ff80000 	.word	0x3ff80000
 8005964:	080077b0 	.word	0x080077b0
 8005968:	0800770c 	.word	0x0800770c
 800596c:	08007699 	.word	0x08007699
 8005970:	0800766c 	.word	0x0800766c
 8005974:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005978:	6018      	str	r0, [r3, #0]
 800597a:	9b07      	ldr	r3, [sp, #28]
 800597c:	2b0e      	cmp	r3, #14
 800597e:	f200 80a4 	bhi.w	8005aca <_dtoa_r+0x442>
 8005982:	2c00      	cmp	r4, #0
 8005984:	f000 80a1 	beq.w	8005aca <_dtoa_r+0x442>
 8005988:	2f00      	cmp	r7, #0
 800598a:	dd33      	ble.n	80059f4 <_dtoa_r+0x36c>
 800598c:	4bad      	ldr	r3, [pc, #692]	@ (8005c44 <_dtoa_r+0x5bc>)
 800598e:	f007 020f 	and.w	r2, r7, #15
 8005992:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005996:	ed93 7b00 	vldr	d7, [r3]
 800599a:	05f8      	lsls	r0, r7, #23
 800599c:	ed8d 7b04 	vstr	d7, [sp, #16]
 80059a0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80059a4:	d516      	bpl.n	80059d4 <_dtoa_r+0x34c>
 80059a6:	4ba8      	ldr	r3, [pc, #672]	@ (8005c48 <_dtoa_r+0x5c0>)
 80059a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059ac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059b0:	f7fa ff54 	bl	800085c <__aeabi_ddiv>
 80059b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059b8:	f004 040f 	and.w	r4, r4, #15
 80059bc:	2603      	movs	r6, #3
 80059be:	4da2      	ldr	r5, [pc, #648]	@ (8005c48 <_dtoa_r+0x5c0>)
 80059c0:	b954      	cbnz	r4, 80059d8 <_dtoa_r+0x350>
 80059c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80059ca:	f7fa ff47 	bl	800085c <__aeabi_ddiv>
 80059ce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059d2:	e028      	b.n	8005a26 <_dtoa_r+0x39e>
 80059d4:	2602      	movs	r6, #2
 80059d6:	e7f2      	b.n	80059be <_dtoa_r+0x336>
 80059d8:	07e1      	lsls	r1, r4, #31
 80059da:	d508      	bpl.n	80059ee <_dtoa_r+0x366>
 80059dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80059e0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80059e4:	f7fa fe10 	bl	8000608 <__aeabi_dmul>
 80059e8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80059ec:	3601      	adds	r6, #1
 80059ee:	1064      	asrs	r4, r4, #1
 80059f0:	3508      	adds	r5, #8
 80059f2:	e7e5      	b.n	80059c0 <_dtoa_r+0x338>
 80059f4:	f000 80d2 	beq.w	8005b9c <_dtoa_r+0x514>
 80059f8:	427c      	negs	r4, r7
 80059fa:	4b92      	ldr	r3, [pc, #584]	@ (8005c44 <_dtoa_r+0x5bc>)
 80059fc:	4d92      	ldr	r5, [pc, #584]	@ (8005c48 <_dtoa_r+0x5c0>)
 80059fe:	f004 020f 	and.w	r2, r4, #15
 8005a02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a0e:	f7fa fdfb 	bl	8000608 <__aeabi_dmul>
 8005a12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a16:	1124      	asrs	r4, r4, #4
 8005a18:	2300      	movs	r3, #0
 8005a1a:	2602      	movs	r6, #2
 8005a1c:	2c00      	cmp	r4, #0
 8005a1e:	f040 80b2 	bne.w	8005b86 <_dtoa_r+0x4fe>
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1d3      	bne.n	80059ce <_dtoa_r+0x346>
 8005a26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005a28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	f000 80b7 	beq.w	8005ba0 <_dtoa_r+0x518>
 8005a32:	4b86      	ldr	r3, [pc, #536]	@ (8005c4c <_dtoa_r+0x5c4>)
 8005a34:	2200      	movs	r2, #0
 8005a36:	4620      	mov	r0, r4
 8005a38:	4629      	mov	r1, r5
 8005a3a:	f7fb f857 	bl	8000aec <__aeabi_dcmplt>
 8005a3e:	2800      	cmp	r0, #0
 8005a40:	f000 80ae 	beq.w	8005ba0 <_dtoa_r+0x518>
 8005a44:	9b07      	ldr	r3, [sp, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	f000 80aa 	beq.w	8005ba0 <_dtoa_r+0x518>
 8005a4c:	9b00      	ldr	r3, [sp, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	dd37      	ble.n	8005ac2 <_dtoa_r+0x43a>
 8005a52:	1e7b      	subs	r3, r7, #1
 8005a54:	9304      	str	r3, [sp, #16]
 8005a56:	4620      	mov	r0, r4
 8005a58:	4b7d      	ldr	r3, [pc, #500]	@ (8005c50 <_dtoa_r+0x5c8>)
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	4629      	mov	r1, r5
 8005a5e:	f7fa fdd3 	bl	8000608 <__aeabi_dmul>
 8005a62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a66:	9c00      	ldr	r4, [sp, #0]
 8005a68:	3601      	adds	r6, #1
 8005a6a:	4630      	mov	r0, r6
 8005a6c:	f7fa fd62 	bl	8000534 <__aeabi_i2d>
 8005a70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a74:	f7fa fdc8 	bl	8000608 <__aeabi_dmul>
 8005a78:	4b76      	ldr	r3, [pc, #472]	@ (8005c54 <_dtoa_r+0x5cc>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f7fa fc0e 	bl	800029c <__adddf3>
 8005a80:	4605      	mov	r5, r0
 8005a82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005a86:	2c00      	cmp	r4, #0
 8005a88:	f040 808d 	bne.w	8005ba6 <_dtoa_r+0x51e>
 8005a8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a90:	4b71      	ldr	r3, [pc, #452]	@ (8005c58 <_dtoa_r+0x5d0>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	f7fa fc00 	bl	8000298 <__aeabi_dsub>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005aa0:	462a      	mov	r2, r5
 8005aa2:	4633      	mov	r3, r6
 8005aa4:	f7fb f840 	bl	8000b28 <__aeabi_dcmpgt>
 8005aa8:	2800      	cmp	r0, #0
 8005aaa:	f040 828b 	bne.w	8005fc4 <_dtoa_r+0x93c>
 8005aae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005ab8:	f7fb f818 	bl	8000aec <__aeabi_dcmplt>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	f040 8128 	bne.w	8005d12 <_dtoa_r+0x68a>
 8005ac2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005ac6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005aca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f2c0 815a 	blt.w	8005d86 <_dtoa_r+0x6fe>
 8005ad2:	2f0e      	cmp	r7, #14
 8005ad4:	f300 8157 	bgt.w	8005d86 <_dtoa_r+0x6fe>
 8005ad8:	4b5a      	ldr	r3, [pc, #360]	@ (8005c44 <_dtoa_r+0x5bc>)
 8005ada:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005ade:	ed93 7b00 	vldr	d7, [r3]
 8005ae2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	ed8d 7b00 	vstr	d7, [sp]
 8005aea:	da03      	bge.n	8005af4 <_dtoa_r+0x46c>
 8005aec:	9b07      	ldr	r3, [sp, #28]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f340 8101 	ble.w	8005cf6 <_dtoa_r+0x66e>
 8005af4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005af8:	4656      	mov	r6, sl
 8005afa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005afe:	4620      	mov	r0, r4
 8005b00:	4629      	mov	r1, r5
 8005b02:	f7fa feab 	bl	800085c <__aeabi_ddiv>
 8005b06:	f7fb f82f 	bl	8000b68 <__aeabi_d2iz>
 8005b0a:	4680      	mov	r8, r0
 8005b0c:	f7fa fd12 	bl	8000534 <__aeabi_i2d>
 8005b10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b14:	f7fa fd78 	bl	8000608 <__aeabi_dmul>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005b24:	f7fa fbb8 	bl	8000298 <__aeabi_dsub>
 8005b28:	f806 4b01 	strb.w	r4, [r6], #1
 8005b2c:	9d07      	ldr	r5, [sp, #28]
 8005b2e:	eba6 040a 	sub.w	r4, r6, sl
 8005b32:	42a5      	cmp	r5, r4
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	f040 8117 	bne.w	8005d6a <_dtoa_r+0x6e2>
 8005b3c:	f7fa fbae 	bl	800029c <__adddf3>
 8005b40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b44:	4604      	mov	r4, r0
 8005b46:	460d      	mov	r5, r1
 8005b48:	f7fa ffee 	bl	8000b28 <__aeabi_dcmpgt>
 8005b4c:	2800      	cmp	r0, #0
 8005b4e:	f040 80f9 	bne.w	8005d44 <_dtoa_r+0x6bc>
 8005b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7fa ffbd 	bl	8000ad8 <__aeabi_dcmpeq>
 8005b5e:	b118      	cbz	r0, 8005b68 <_dtoa_r+0x4e0>
 8005b60:	f018 0f01 	tst.w	r8, #1
 8005b64:	f040 80ee 	bne.w	8005d44 <_dtoa_r+0x6bc>
 8005b68:	4649      	mov	r1, r9
 8005b6a:	4658      	mov	r0, fp
 8005b6c:	f000 fc90 	bl	8006490 <_Bfree>
 8005b70:	2300      	movs	r3, #0
 8005b72:	7033      	strb	r3, [r6, #0]
 8005b74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005b76:	3701      	adds	r7, #1
 8005b78:	601f      	str	r7, [r3, #0]
 8005b7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f000 831d 	beq.w	80061bc <_dtoa_r+0xb34>
 8005b82:	601e      	str	r6, [r3, #0]
 8005b84:	e31a      	b.n	80061bc <_dtoa_r+0xb34>
 8005b86:	07e2      	lsls	r2, r4, #31
 8005b88:	d505      	bpl.n	8005b96 <_dtoa_r+0x50e>
 8005b8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b8e:	f7fa fd3b 	bl	8000608 <__aeabi_dmul>
 8005b92:	3601      	adds	r6, #1
 8005b94:	2301      	movs	r3, #1
 8005b96:	1064      	asrs	r4, r4, #1
 8005b98:	3508      	adds	r5, #8
 8005b9a:	e73f      	b.n	8005a1c <_dtoa_r+0x394>
 8005b9c:	2602      	movs	r6, #2
 8005b9e:	e742      	b.n	8005a26 <_dtoa_r+0x39e>
 8005ba0:	9c07      	ldr	r4, [sp, #28]
 8005ba2:	9704      	str	r7, [sp, #16]
 8005ba4:	e761      	b.n	8005a6a <_dtoa_r+0x3e2>
 8005ba6:	4b27      	ldr	r3, [pc, #156]	@ (8005c44 <_dtoa_r+0x5bc>)
 8005ba8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005baa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005bae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005bb2:	4454      	add	r4, sl
 8005bb4:	2900      	cmp	r1, #0
 8005bb6:	d053      	beq.n	8005c60 <_dtoa_r+0x5d8>
 8005bb8:	4928      	ldr	r1, [pc, #160]	@ (8005c5c <_dtoa_r+0x5d4>)
 8005bba:	2000      	movs	r0, #0
 8005bbc:	f7fa fe4e 	bl	800085c <__aeabi_ddiv>
 8005bc0:	4633      	mov	r3, r6
 8005bc2:	462a      	mov	r2, r5
 8005bc4:	f7fa fb68 	bl	8000298 <__aeabi_dsub>
 8005bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bcc:	4656      	mov	r6, sl
 8005bce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bd2:	f7fa ffc9 	bl	8000b68 <__aeabi_d2iz>
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	f7fa fcac 	bl	8000534 <__aeabi_i2d>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	460b      	mov	r3, r1
 8005be0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005be4:	f7fa fb58 	bl	8000298 <__aeabi_dsub>
 8005be8:	3530      	adds	r5, #48	@ 0x30
 8005bea:	4602      	mov	r2, r0
 8005bec:	460b      	mov	r3, r1
 8005bee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005bf2:	f806 5b01 	strb.w	r5, [r6], #1
 8005bf6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005bfa:	f7fa ff77 	bl	8000aec <__aeabi_dcmplt>
 8005bfe:	2800      	cmp	r0, #0
 8005c00:	d171      	bne.n	8005ce6 <_dtoa_r+0x65e>
 8005c02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c06:	4911      	ldr	r1, [pc, #68]	@ (8005c4c <_dtoa_r+0x5c4>)
 8005c08:	2000      	movs	r0, #0
 8005c0a:	f7fa fb45 	bl	8000298 <__aeabi_dsub>
 8005c0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005c12:	f7fa ff6b 	bl	8000aec <__aeabi_dcmplt>
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f040 8095 	bne.w	8005d46 <_dtoa_r+0x6be>
 8005c1c:	42a6      	cmp	r6, r4
 8005c1e:	f43f af50 	beq.w	8005ac2 <_dtoa_r+0x43a>
 8005c22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005c26:	4b0a      	ldr	r3, [pc, #40]	@ (8005c50 <_dtoa_r+0x5c8>)
 8005c28:	2200      	movs	r2, #0
 8005c2a:	f7fa fced 	bl	8000608 <__aeabi_dmul>
 8005c2e:	4b08      	ldr	r3, [pc, #32]	@ (8005c50 <_dtoa_r+0x5c8>)
 8005c30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c34:	2200      	movs	r2, #0
 8005c36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c3a:	f7fa fce5 	bl	8000608 <__aeabi_dmul>
 8005c3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c42:	e7c4      	b.n	8005bce <_dtoa_r+0x546>
 8005c44:	080077b0 	.word	0x080077b0
 8005c48:	08007788 	.word	0x08007788
 8005c4c:	3ff00000 	.word	0x3ff00000
 8005c50:	40240000 	.word	0x40240000
 8005c54:	401c0000 	.word	0x401c0000
 8005c58:	40140000 	.word	0x40140000
 8005c5c:	3fe00000 	.word	0x3fe00000
 8005c60:	4631      	mov	r1, r6
 8005c62:	4628      	mov	r0, r5
 8005c64:	f7fa fcd0 	bl	8000608 <__aeabi_dmul>
 8005c68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005c6c:	9415      	str	r4, [sp, #84]	@ 0x54
 8005c6e:	4656      	mov	r6, sl
 8005c70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c74:	f7fa ff78 	bl	8000b68 <__aeabi_d2iz>
 8005c78:	4605      	mov	r5, r0
 8005c7a:	f7fa fc5b 	bl	8000534 <__aeabi_i2d>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c86:	f7fa fb07 	bl	8000298 <__aeabi_dsub>
 8005c8a:	3530      	adds	r5, #48	@ 0x30
 8005c8c:	f806 5b01 	strb.w	r5, [r6], #1
 8005c90:	4602      	mov	r2, r0
 8005c92:	460b      	mov	r3, r1
 8005c94:	42a6      	cmp	r6, r4
 8005c96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c9a:	f04f 0200 	mov.w	r2, #0
 8005c9e:	d124      	bne.n	8005cea <_dtoa_r+0x662>
 8005ca0:	4bac      	ldr	r3, [pc, #688]	@ (8005f54 <_dtoa_r+0x8cc>)
 8005ca2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005ca6:	f7fa faf9 	bl	800029c <__adddf3>
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cb2:	f7fa ff39 	bl	8000b28 <__aeabi_dcmpgt>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d145      	bne.n	8005d46 <_dtoa_r+0x6be>
 8005cba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005cbe:	49a5      	ldr	r1, [pc, #660]	@ (8005f54 <_dtoa_r+0x8cc>)
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f7fa fae9 	bl	8000298 <__aeabi_dsub>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	460b      	mov	r3, r1
 8005cca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cce:	f7fa ff0d 	bl	8000aec <__aeabi_dcmplt>
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	f43f aef5 	beq.w	8005ac2 <_dtoa_r+0x43a>
 8005cd8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005cda:	1e73      	subs	r3, r6, #1
 8005cdc:	9315      	str	r3, [sp, #84]	@ 0x54
 8005cde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ce2:	2b30      	cmp	r3, #48	@ 0x30
 8005ce4:	d0f8      	beq.n	8005cd8 <_dtoa_r+0x650>
 8005ce6:	9f04      	ldr	r7, [sp, #16]
 8005ce8:	e73e      	b.n	8005b68 <_dtoa_r+0x4e0>
 8005cea:	4b9b      	ldr	r3, [pc, #620]	@ (8005f58 <_dtoa_r+0x8d0>)
 8005cec:	f7fa fc8c 	bl	8000608 <__aeabi_dmul>
 8005cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cf4:	e7bc      	b.n	8005c70 <_dtoa_r+0x5e8>
 8005cf6:	d10c      	bne.n	8005d12 <_dtoa_r+0x68a>
 8005cf8:	4b98      	ldr	r3, [pc, #608]	@ (8005f5c <_dtoa_r+0x8d4>)
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005d00:	f7fa fc82 	bl	8000608 <__aeabi_dmul>
 8005d04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d08:	f7fa ff04 	bl	8000b14 <__aeabi_dcmpge>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	f000 8157 	beq.w	8005fc0 <_dtoa_r+0x938>
 8005d12:	2400      	movs	r4, #0
 8005d14:	4625      	mov	r5, r4
 8005d16:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005d18:	43db      	mvns	r3, r3
 8005d1a:	9304      	str	r3, [sp, #16]
 8005d1c:	4656      	mov	r6, sl
 8005d1e:	2700      	movs	r7, #0
 8005d20:	4621      	mov	r1, r4
 8005d22:	4658      	mov	r0, fp
 8005d24:	f000 fbb4 	bl	8006490 <_Bfree>
 8005d28:	2d00      	cmp	r5, #0
 8005d2a:	d0dc      	beq.n	8005ce6 <_dtoa_r+0x65e>
 8005d2c:	b12f      	cbz	r7, 8005d3a <_dtoa_r+0x6b2>
 8005d2e:	42af      	cmp	r7, r5
 8005d30:	d003      	beq.n	8005d3a <_dtoa_r+0x6b2>
 8005d32:	4639      	mov	r1, r7
 8005d34:	4658      	mov	r0, fp
 8005d36:	f000 fbab 	bl	8006490 <_Bfree>
 8005d3a:	4629      	mov	r1, r5
 8005d3c:	4658      	mov	r0, fp
 8005d3e:	f000 fba7 	bl	8006490 <_Bfree>
 8005d42:	e7d0      	b.n	8005ce6 <_dtoa_r+0x65e>
 8005d44:	9704      	str	r7, [sp, #16]
 8005d46:	4633      	mov	r3, r6
 8005d48:	461e      	mov	r6, r3
 8005d4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d4e:	2a39      	cmp	r2, #57	@ 0x39
 8005d50:	d107      	bne.n	8005d62 <_dtoa_r+0x6da>
 8005d52:	459a      	cmp	sl, r3
 8005d54:	d1f8      	bne.n	8005d48 <_dtoa_r+0x6c0>
 8005d56:	9a04      	ldr	r2, [sp, #16]
 8005d58:	3201      	adds	r2, #1
 8005d5a:	9204      	str	r2, [sp, #16]
 8005d5c:	2230      	movs	r2, #48	@ 0x30
 8005d5e:	f88a 2000 	strb.w	r2, [sl]
 8005d62:	781a      	ldrb	r2, [r3, #0]
 8005d64:	3201      	adds	r2, #1
 8005d66:	701a      	strb	r2, [r3, #0]
 8005d68:	e7bd      	b.n	8005ce6 <_dtoa_r+0x65e>
 8005d6a:	4b7b      	ldr	r3, [pc, #492]	@ (8005f58 <_dtoa_r+0x8d0>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f7fa fc4b 	bl	8000608 <__aeabi_dmul>
 8005d72:	2200      	movs	r2, #0
 8005d74:	2300      	movs	r3, #0
 8005d76:	4604      	mov	r4, r0
 8005d78:	460d      	mov	r5, r1
 8005d7a:	f7fa fead 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	f43f aebb 	beq.w	8005afa <_dtoa_r+0x472>
 8005d84:	e6f0      	b.n	8005b68 <_dtoa_r+0x4e0>
 8005d86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005d88:	2a00      	cmp	r2, #0
 8005d8a:	f000 80db 	beq.w	8005f44 <_dtoa_r+0x8bc>
 8005d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d90:	2a01      	cmp	r2, #1
 8005d92:	f300 80bf 	bgt.w	8005f14 <_dtoa_r+0x88c>
 8005d96:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005d98:	2a00      	cmp	r2, #0
 8005d9a:	f000 80b7 	beq.w	8005f0c <_dtoa_r+0x884>
 8005d9e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005da2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005da4:	4646      	mov	r6, r8
 8005da6:	9a08      	ldr	r2, [sp, #32]
 8005da8:	2101      	movs	r1, #1
 8005daa:	441a      	add	r2, r3
 8005dac:	4658      	mov	r0, fp
 8005dae:	4498      	add	r8, r3
 8005db0:	9208      	str	r2, [sp, #32]
 8005db2:	f000 fc21 	bl	80065f8 <__i2b>
 8005db6:	4605      	mov	r5, r0
 8005db8:	b15e      	cbz	r6, 8005dd2 <_dtoa_r+0x74a>
 8005dba:	9b08      	ldr	r3, [sp, #32]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	dd08      	ble.n	8005dd2 <_dtoa_r+0x74a>
 8005dc0:	42b3      	cmp	r3, r6
 8005dc2:	9a08      	ldr	r2, [sp, #32]
 8005dc4:	bfa8      	it	ge
 8005dc6:	4633      	movge	r3, r6
 8005dc8:	eba8 0803 	sub.w	r8, r8, r3
 8005dcc:	1af6      	subs	r6, r6, r3
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	9308      	str	r3, [sp, #32]
 8005dd2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dd4:	b1f3      	cbz	r3, 8005e14 <_dtoa_r+0x78c>
 8005dd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	f000 80b7 	beq.w	8005f4c <_dtoa_r+0x8c4>
 8005dde:	b18c      	cbz	r4, 8005e04 <_dtoa_r+0x77c>
 8005de0:	4629      	mov	r1, r5
 8005de2:	4622      	mov	r2, r4
 8005de4:	4658      	mov	r0, fp
 8005de6:	f000 fcc7 	bl	8006778 <__pow5mult>
 8005dea:	464a      	mov	r2, r9
 8005dec:	4601      	mov	r1, r0
 8005dee:	4605      	mov	r5, r0
 8005df0:	4658      	mov	r0, fp
 8005df2:	f000 fc17 	bl	8006624 <__multiply>
 8005df6:	4649      	mov	r1, r9
 8005df8:	9004      	str	r0, [sp, #16]
 8005dfa:	4658      	mov	r0, fp
 8005dfc:	f000 fb48 	bl	8006490 <_Bfree>
 8005e00:	9b04      	ldr	r3, [sp, #16]
 8005e02:	4699      	mov	r9, r3
 8005e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e06:	1b1a      	subs	r2, r3, r4
 8005e08:	d004      	beq.n	8005e14 <_dtoa_r+0x78c>
 8005e0a:	4649      	mov	r1, r9
 8005e0c:	4658      	mov	r0, fp
 8005e0e:	f000 fcb3 	bl	8006778 <__pow5mult>
 8005e12:	4681      	mov	r9, r0
 8005e14:	2101      	movs	r1, #1
 8005e16:	4658      	mov	r0, fp
 8005e18:	f000 fbee 	bl	80065f8 <__i2b>
 8005e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e1e:	4604      	mov	r4, r0
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f000 81cf 	beq.w	80061c4 <_dtoa_r+0xb3c>
 8005e26:	461a      	mov	r2, r3
 8005e28:	4601      	mov	r1, r0
 8005e2a:	4658      	mov	r0, fp
 8005e2c:	f000 fca4 	bl	8006778 <__pow5mult>
 8005e30:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	4604      	mov	r4, r0
 8005e36:	f300 8095 	bgt.w	8005f64 <_dtoa_r+0x8dc>
 8005e3a:	9b02      	ldr	r3, [sp, #8]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f040 8087 	bne.w	8005f50 <_dtoa_r+0x8c8>
 8005e42:	9b03      	ldr	r3, [sp, #12]
 8005e44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f040 8089 	bne.w	8005f60 <_dtoa_r+0x8d8>
 8005e4e:	9b03      	ldr	r3, [sp, #12]
 8005e50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005e54:	0d1b      	lsrs	r3, r3, #20
 8005e56:	051b      	lsls	r3, r3, #20
 8005e58:	b12b      	cbz	r3, 8005e66 <_dtoa_r+0x7de>
 8005e5a:	9b08      	ldr	r3, [sp, #32]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	9308      	str	r3, [sp, #32]
 8005e60:	f108 0801 	add.w	r8, r8, #1
 8005e64:	2301      	movs	r3, #1
 8005e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8005e68:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f000 81b0 	beq.w	80061d0 <_dtoa_r+0xb48>
 8005e70:	6923      	ldr	r3, [r4, #16]
 8005e72:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005e76:	6918      	ldr	r0, [r3, #16]
 8005e78:	f000 fb72 	bl	8006560 <__hi0bits>
 8005e7c:	f1c0 0020 	rsb	r0, r0, #32
 8005e80:	9b08      	ldr	r3, [sp, #32]
 8005e82:	4418      	add	r0, r3
 8005e84:	f010 001f 	ands.w	r0, r0, #31
 8005e88:	d077      	beq.n	8005f7a <_dtoa_r+0x8f2>
 8005e8a:	f1c0 0320 	rsb	r3, r0, #32
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	dd6b      	ble.n	8005f6a <_dtoa_r+0x8e2>
 8005e92:	9b08      	ldr	r3, [sp, #32]
 8005e94:	f1c0 001c 	rsb	r0, r0, #28
 8005e98:	4403      	add	r3, r0
 8005e9a:	4480      	add	r8, r0
 8005e9c:	4406      	add	r6, r0
 8005e9e:	9308      	str	r3, [sp, #32]
 8005ea0:	f1b8 0f00 	cmp.w	r8, #0
 8005ea4:	dd05      	ble.n	8005eb2 <_dtoa_r+0x82a>
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	4642      	mov	r2, r8
 8005eaa:	4658      	mov	r0, fp
 8005eac:	f000 fcbe 	bl	800682c <__lshift>
 8005eb0:	4681      	mov	r9, r0
 8005eb2:	9b08      	ldr	r3, [sp, #32]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	dd05      	ble.n	8005ec4 <_dtoa_r+0x83c>
 8005eb8:	4621      	mov	r1, r4
 8005eba:	461a      	mov	r2, r3
 8005ebc:	4658      	mov	r0, fp
 8005ebe:	f000 fcb5 	bl	800682c <__lshift>
 8005ec2:	4604      	mov	r4, r0
 8005ec4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d059      	beq.n	8005f7e <_dtoa_r+0x8f6>
 8005eca:	4621      	mov	r1, r4
 8005ecc:	4648      	mov	r0, r9
 8005ece:	f000 fd19 	bl	8006904 <__mcmp>
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	da53      	bge.n	8005f7e <_dtoa_r+0x8f6>
 8005ed6:	1e7b      	subs	r3, r7, #1
 8005ed8:	9304      	str	r3, [sp, #16]
 8005eda:	4649      	mov	r1, r9
 8005edc:	2300      	movs	r3, #0
 8005ede:	220a      	movs	r2, #10
 8005ee0:	4658      	mov	r0, fp
 8005ee2:	f000 faf7 	bl	80064d4 <__multadd>
 8005ee6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ee8:	4681      	mov	r9, r0
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	f000 8172 	beq.w	80061d4 <_dtoa_r+0xb4c>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	4629      	mov	r1, r5
 8005ef4:	220a      	movs	r2, #10
 8005ef6:	4658      	mov	r0, fp
 8005ef8:	f000 faec 	bl	80064d4 <__multadd>
 8005efc:	9b00      	ldr	r3, [sp, #0]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	4605      	mov	r5, r0
 8005f02:	dc67      	bgt.n	8005fd4 <_dtoa_r+0x94c>
 8005f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	dc41      	bgt.n	8005f8e <_dtoa_r+0x906>
 8005f0a:	e063      	b.n	8005fd4 <_dtoa_r+0x94c>
 8005f0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005f0e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8005f12:	e746      	b.n	8005da2 <_dtoa_r+0x71a>
 8005f14:	9b07      	ldr	r3, [sp, #28]
 8005f16:	1e5c      	subs	r4, r3, #1
 8005f18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f1a:	42a3      	cmp	r3, r4
 8005f1c:	bfbf      	itttt	lt
 8005f1e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8005f20:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8005f22:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8005f24:	1ae3      	sublt	r3, r4, r3
 8005f26:	bfb4      	ite	lt
 8005f28:	18d2      	addlt	r2, r2, r3
 8005f2a:	1b1c      	subge	r4, r3, r4
 8005f2c:	9b07      	ldr	r3, [sp, #28]
 8005f2e:	bfbc      	itt	lt
 8005f30:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8005f32:	2400      	movlt	r4, #0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	bfb5      	itete	lt
 8005f38:	eba8 0603 	sublt.w	r6, r8, r3
 8005f3c:	9b07      	ldrge	r3, [sp, #28]
 8005f3e:	2300      	movlt	r3, #0
 8005f40:	4646      	movge	r6, r8
 8005f42:	e730      	b.n	8005da6 <_dtoa_r+0x71e>
 8005f44:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f46:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8005f48:	4646      	mov	r6, r8
 8005f4a:	e735      	b.n	8005db8 <_dtoa_r+0x730>
 8005f4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005f4e:	e75c      	b.n	8005e0a <_dtoa_r+0x782>
 8005f50:	2300      	movs	r3, #0
 8005f52:	e788      	b.n	8005e66 <_dtoa_r+0x7de>
 8005f54:	3fe00000 	.word	0x3fe00000
 8005f58:	40240000 	.word	0x40240000
 8005f5c:	40140000 	.word	0x40140000
 8005f60:	9b02      	ldr	r3, [sp, #8]
 8005f62:	e780      	b.n	8005e66 <_dtoa_r+0x7de>
 8005f64:	2300      	movs	r3, #0
 8005f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8005f68:	e782      	b.n	8005e70 <_dtoa_r+0x7e8>
 8005f6a:	d099      	beq.n	8005ea0 <_dtoa_r+0x818>
 8005f6c:	9a08      	ldr	r2, [sp, #32]
 8005f6e:	331c      	adds	r3, #28
 8005f70:	441a      	add	r2, r3
 8005f72:	4498      	add	r8, r3
 8005f74:	441e      	add	r6, r3
 8005f76:	9208      	str	r2, [sp, #32]
 8005f78:	e792      	b.n	8005ea0 <_dtoa_r+0x818>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	e7f6      	b.n	8005f6c <_dtoa_r+0x8e4>
 8005f7e:	9b07      	ldr	r3, [sp, #28]
 8005f80:	9704      	str	r7, [sp, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	dc20      	bgt.n	8005fc8 <_dtoa_r+0x940>
 8005f86:	9300      	str	r3, [sp, #0]
 8005f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	dd1e      	ble.n	8005fcc <_dtoa_r+0x944>
 8005f8e:	9b00      	ldr	r3, [sp, #0]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f47f aec0 	bne.w	8005d16 <_dtoa_r+0x68e>
 8005f96:	4621      	mov	r1, r4
 8005f98:	2205      	movs	r2, #5
 8005f9a:	4658      	mov	r0, fp
 8005f9c:	f000 fa9a 	bl	80064d4 <__multadd>
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	4604      	mov	r4, r0
 8005fa4:	4648      	mov	r0, r9
 8005fa6:	f000 fcad 	bl	8006904 <__mcmp>
 8005faa:	2800      	cmp	r0, #0
 8005fac:	f77f aeb3 	ble.w	8005d16 <_dtoa_r+0x68e>
 8005fb0:	4656      	mov	r6, sl
 8005fb2:	2331      	movs	r3, #49	@ 0x31
 8005fb4:	f806 3b01 	strb.w	r3, [r6], #1
 8005fb8:	9b04      	ldr	r3, [sp, #16]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	9304      	str	r3, [sp, #16]
 8005fbe:	e6ae      	b.n	8005d1e <_dtoa_r+0x696>
 8005fc0:	9c07      	ldr	r4, [sp, #28]
 8005fc2:	9704      	str	r7, [sp, #16]
 8005fc4:	4625      	mov	r5, r4
 8005fc6:	e7f3      	b.n	8005fb0 <_dtoa_r+0x928>
 8005fc8:	9b07      	ldr	r3, [sp, #28]
 8005fca:	9300      	str	r3, [sp, #0]
 8005fcc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f000 8104 	beq.w	80061dc <_dtoa_r+0xb54>
 8005fd4:	2e00      	cmp	r6, #0
 8005fd6:	dd05      	ble.n	8005fe4 <_dtoa_r+0x95c>
 8005fd8:	4629      	mov	r1, r5
 8005fda:	4632      	mov	r2, r6
 8005fdc:	4658      	mov	r0, fp
 8005fde:	f000 fc25 	bl	800682c <__lshift>
 8005fe2:	4605      	mov	r5, r0
 8005fe4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d05a      	beq.n	80060a0 <_dtoa_r+0xa18>
 8005fea:	6869      	ldr	r1, [r5, #4]
 8005fec:	4658      	mov	r0, fp
 8005fee:	f000 fa0f 	bl	8006410 <_Balloc>
 8005ff2:	4606      	mov	r6, r0
 8005ff4:	b928      	cbnz	r0, 8006002 <_dtoa_r+0x97a>
 8005ff6:	4b84      	ldr	r3, [pc, #528]	@ (8006208 <_dtoa_r+0xb80>)
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8005ffe:	f7ff bb5a 	b.w	80056b6 <_dtoa_r+0x2e>
 8006002:	692a      	ldr	r2, [r5, #16]
 8006004:	3202      	adds	r2, #2
 8006006:	0092      	lsls	r2, r2, #2
 8006008:	f105 010c 	add.w	r1, r5, #12
 800600c:	300c      	adds	r0, #12
 800600e:	f000 ffaf 	bl	8006f70 <memcpy>
 8006012:	2201      	movs	r2, #1
 8006014:	4631      	mov	r1, r6
 8006016:	4658      	mov	r0, fp
 8006018:	f000 fc08 	bl	800682c <__lshift>
 800601c:	f10a 0301 	add.w	r3, sl, #1
 8006020:	9307      	str	r3, [sp, #28]
 8006022:	9b00      	ldr	r3, [sp, #0]
 8006024:	4453      	add	r3, sl
 8006026:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006028:	9b02      	ldr	r3, [sp, #8]
 800602a:	f003 0301 	and.w	r3, r3, #1
 800602e:	462f      	mov	r7, r5
 8006030:	930a      	str	r3, [sp, #40]	@ 0x28
 8006032:	4605      	mov	r5, r0
 8006034:	9b07      	ldr	r3, [sp, #28]
 8006036:	4621      	mov	r1, r4
 8006038:	3b01      	subs	r3, #1
 800603a:	4648      	mov	r0, r9
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	f7ff fa9a 	bl	8005576 <quorem>
 8006042:	4639      	mov	r1, r7
 8006044:	9002      	str	r0, [sp, #8]
 8006046:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800604a:	4648      	mov	r0, r9
 800604c:	f000 fc5a 	bl	8006904 <__mcmp>
 8006050:	462a      	mov	r2, r5
 8006052:	9008      	str	r0, [sp, #32]
 8006054:	4621      	mov	r1, r4
 8006056:	4658      	mov	r0, fp
 8006058:	f000 fc70 	bl	800693c <__mdiff>
 800605c:	68c2      	ldr	r2, [r0, #12]
 800605e:	4606      	mov	r6, r0
 8006060:	bb02      	cbnz	r2, 80060a4 <_dtoa_r+0xa1c>
 8006062:	4601      	mov	r1, r0
 8006064:	4648      	mov	r0, r9
 8006066:	f000 fc4d 	bl	8006904 <__mcmp>
 800606a:	4602      	mov	r2, r0
 800606c:	4631      	mov	r1, r6
 800606e:	4658      	mov	r0, fp
 8006070:	920e      	str	r2, [sp, #56]	@ 0x38
 8006072:	f000 fa0d 	bl	8006490 <_Bfree>
 8006076:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006078:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800607a:	9e07      	ldr	r6, [sp, #28]
 800607c:	ea43 0102 	orr.w	r1, r3, r2
 8006080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006082:	4319      	orrs	r1, r3
 8006084:	d110      	bne.n	80060a8 <_dtoa_r+0xa20>
 8006086:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800608a:	d029      	beq.n	80060e0 <_dtoa_r+0xa58>
 800608c:	9b08      	ldr	r3, [sp, #32]
 800608e:	2b00      	cmp	r3, #0
 8006090:	dd02      	ble.n	8006098 <_dtoa_r+0xa10>
 8006092:	9b02      	ldr	r3, [sp, #8]
 8006094:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006098:	9b00      	ldr	r3, [sp, #0]
 800609a:	f883 8000 	strb.w	r8, [r3]
 800609e:	e63f      	b.n	8005d20 <_dtoa_r+0x698>
 80060a0:	4628      	mov	r0, r5
 80060a2:	e7bb      	b.n	800601c <_dtoa_r+0x994>
 80060a4:	2201      	movs	r2, #1
 80060a6:	e7e1      	b.n	800606c <_dtoa_r+0x9e4>
 80060a8:	9b08      	ldr	r3, [sp, #32]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	db04      	blt.n	80060b8 <_dtoa_r+0xa30>
 80060ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80060b0:	430b      	orrs	r3, r1
 80060b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80060b4:	430b      	orrs	r3, r1
 80060b6:	d120      	bne.n	80060fa <_dtoa_r+0xa72>
 80060b8:	2a00      	cmp	r2, #0
 80060ba:	dded      	ble.n	8006098 <_dtoa_r+0xa10>
 80060bc:	4649      	mov	r1, r9
 80060be:	2201      	movs	r2, #1
 80060c0:	4658      	mov	r0, fp
 80060c2:	f000 fbb3 	bl	800682c <__lshift>
 80060c6:	4621      	mov	r1, r4
 80060c8:	4681      	mov	r9, r0
 80060ca:	f000 fc1b 	bl	8006904 <__mcmp>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	dc03      	bgt.n	80060da <_dtoa_r+0xa52>
 80060d2:	d1e1      	bne.n	8006098 <_dtoa_r+0xa10>
 80060d4:	f018 0f01 	tst.w	r8, #1
 80060d8:	d0de      	beq.n	8006098 <_dtoa_r+0xa10>
 80060da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80060de:	d1d8      	bne.n	8006092 <_dtoa_r+0xa0a>
 80060e0:	9a00      	ldr	r2, [sp, #0]
 80060e2:	2339      	movs	r3, #57	@ 0x39
 80060e4:	7013      	strb	r3, [r2, #0]
 80060e6:	4633      	mov	r3, r6
 80060e8:	461e      	mov	r6, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80060f0:	2a39      	cmp	r2, #57	@ 0x39
 80060f2:	d052      	beq.n	800619a <_dtoa_r+0xb12>
 80060f4:	3201      	adds	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
 80060f8:	e612      	b.n	8005d20 <_dtoa_r+0x698>
 80060fa:	2a00      	cmp	r2, #0
 80060fc:	dd07      	ble.n	800610e <_dtoa_r+0xa86>
 80060fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006102:	d0ed      	beq.n	80060e0 <_dtoa_r+0xa58>
 8006104:	9a00      	ldr	r2, [sp, #0]
 8006106:	f108 0301 	add.w	r3, r8, #1
 800610a:	7013      	strb	r3, [r2, #0]
 800610c:	e608      	b.n	8005d20 <_dtoa_r+0x698>
 800610e:	9b07      	ldr	r3, [sp, #28]
 8006110:	9a07      	ldr	r2, [sp, #28]
 8006112:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006118:	4293      	cmp	r3, r2
 800611a:	d028      	beq.n	800616e <_dtoa_r+0xae6>
 800611c:	4649      	mov	r1, r9
 800611e:	2300      	movs	r3, #0
 8006120:	220a      	movs	r2, #10
 8006122:	4658      	mov	r0, fp
 8006124:	f000 f9d6 	bl	80064d4 <__multadd>
 8006128:	42af      	cmp	r7, r5
 800612a:	4681      	mov	r9, r0
 800612c:	f04f 0300 	mov.w	r3, #0
 8006130:	f04f 020a 	mov.w	r2, #10
 8006134:	4639      	mov	r1, r7
 8006136:	4658      	mov	r0, fp
 8006138:	d107      	bne.n	800614a <_dtoa_r+0xac2>
 800613a:	f000 f9cb 	bl	80064d4 <__multadd>
 800613e:	4607      	mov	r7, r0
 8006140:	4605      	mov	r5, r0
 8006142:	9b07      	ldr	r3, [sp, #28]
 8006144:	3301      	adds	r3, #1
 8006146:	9307      	str	r3, [sp, #28]
 8006148:	e774      	b.n	8006034 <_dtoa_r+0x9ac>
 800614a:	f000 f9c3 	bl	80064d4 <__multadd>
 800614e:	4629      	mov	r1, r5
 8006150:	4607      	mov	r7, r0
 8006152:	2300      	movs	r3, #0
 8006154:	220a      	movs	r2, #10
 8006156:	4658      	mov	r0, fp
 8006158:	f000 f9bc 	bl	80064d4 <__multadd>
 800615c:	4605      	mov	r5, r0
 800615e:	e7f0      	b.n	8006142 <_dtoa_r+0xaba>
 8006160:	9b00      	ldr	r3, [sp, #0]
 8006162:	2b00      	cmp	r3, #0
 8006164:	bfcc      	ite	gt
 8006166:	461e      	movgt	r6, r3
 8006168:	2601      	movle	r6, #1
 800616a:	4456      	add	r6, sl
 800616c:	2700      	movs	r7, #0
 800616e:	4649      	mov	r1, r9
 8006170:	2201      	movs	r2, #1
 8006172:	4658      	mov	r0, fp
 8006174:	f000 fb5a 	bl	800682c <__lshift>
 8006178:	4621      	mov	r1, r4
 800617a:	4681      	mov	r9, r0
 800617c:	f000 fbc2 	bl	8006904 <__mcmp>
 8006180:	2800      	cmp	r0, #0
 8006182:	dcb0      	bgt.n	80060e6 <_dtoa_r+0xa5e>
 8006184:	d102      	bne.n	800618c <_dtoa_r+0xb04>
 8006186:	f018 0f01 	tst.w	r8, #1
 800618a:	d1ac      	bne.n	80060e6 <_dtoa_r+0xa5e>
 800618c:	4633      	mov	r3, r6
 800618e:	461e      	mov	r6, r3
 8006190:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006194:	2a30      	cmp	r2, #48	@ 0x30
 8006196:	d0fa      	beq.n	800618e <_dtoa_r+0xb06>
 8006198:	e5c2      	b.n	8005d20 <_dtoa_r+0x698>
 800619a:	459a      	cmp	sl, r3
 800619c:	d1a4      	bne.n	80060e8 <_dtoa_r+0xa60>
 800619e:	9b04      	ldr	r3, [sp, #16]
 80061a0:	3301      	adds	r3, #1
 80061a2:	9304      	str	r3, [sp, #16]
 80061a4:	2331      	movs	r3, #49	@ 0x31
 80061a6:	f88a 3000 	strb.w	r3, [sl]
 80061aa:	e5b9      	b.n	8005d20 <_dtoa_r+0x698>
 80061ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800620c <_dtoa_r+0xb84>
 80061b2:	b11b      	cbz	r3, 80061bc <_dtoa_r+0xb34>
 80061b4:	f10a 0308 	add.w	r3, sl, #8
 80061b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061ba:	6013      	str	r3, [r2, #0]
 80061bc:	4650      	mov	r0, sl
 80061be:	b019      	add	sp, #100	@ 0x64
 80061c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	f77f ae37 	ble.w	8005e3a <_dtoa_r+0x7b2>
 80061cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80061d0:	2001      	movs	r0, #1
 80061d2:	e655      	b.n	8005e80 <_dtoa_r+0x7f8>
 80061d4:	9b00      	ldr	r3, [sp, #0]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f77f aed6 	ble.w	8005f88 <_dtoa_r+0x900>
 80061dc:	4656      	mov	r6, sl
 80061de:	4621      	mov	r1, r4
 80061e0:	4648      	mov	r0, r9
 80061e2:	f7ff f9c8 	bl	8005576 <quorem>
 80061e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061ea:	f806 8b01 	strb.w	r8, [r6], #1
 80061ee:	9b00      	ldr	r3, [sp, #0]
 80061f0:	eba6 020a 	sub.w	r2, r6, sl
 80061f4:	4293      	cmp	r3, r2
 80061f6:	ddb3      	ble.n	8006160 <_dtoa_r+0xad8>
 80061f8:	4649      	mov	r1, r9
 80061fa:	2300      	movs	r3, #0
 80061fc:	220a      	movs	r2, #10
 80061fe:	4658      	mov	r0, fp
 8006200:	f000 f968 	bl	80064d4 <__multadd>
 8006204:	4681      	mov	r9, r0
 8006206:	e7ea      	b.n	80061de <_dtoa_r+0xb56>
 8006208:	0800770c 	.word	0x0800770c
 800620c:	08007690 	.word	0x08007690

08006210 <_free_r>:
 8006210:	b538      	push	{r3, r4, r5, lr}
 8006212:	4605      	mov	r5, r0
 8006214:	2900      	cmp	r1, #0
 8006216:	d041      	beq.n	800629c <_free_r+0x8c>
 8006218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800621c:	1f0c      	subs	r4, r1, #4
 800621e:	2b00      	cmp	r3, #0
 8006220:	bfb8      	it	lt
 8006222:	18e4      	addlt	r4, r4, r3
 8006224:	f000 f8e8 	bl	80063f8 <__malloc_lock>
 8006228:	4a1d      	ldr	r2, [pc, #116]	@ (80062a0 <_free_r+0x90>)
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	b933      	cbnz	r3, 800623c <_free_r+0x2c>
 800622e:	6063      	str	r3, [r4, #4]
 8006230:	6014      	str	r4, [r2, #0]
 8006232:	4628      	mov	r0, r5
 8006234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006238:	f000 b8e4 	b.w	8006404 <__malloc_unlock>
 800623c:	42a3      	cmp	r3, r4
 800623e:	d908      	bls.n	8006252 <_free_r+0x42>
 8006240:	6820      	ldr	r0, [r4, #0]
 8006242:	1821      	adds	r1, r4, r0
 8006244:	428b      	cmp	r3, r1
 8006246:	bf01      	itttt	eq
 8006248:	6819      	ldreq	r1, [r3, #0]
 800624a:	685b      	ldreq	r3, [r3, #4]
 800624c:	1809      	addeq	r1, r1, r0
 800624e:	6021      	streq	r1, [r4, #0]
 8006250:	e7ed      	b.n	800622e <_free_r+0x1e>
 8006252:	461a      	mov	r2, r3
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	b10b      	cbz	r3, 800625c <_free_r+0x4c>
 8006258:	42a3      	cmp	r3, r4
 800625a:	d9fa      	bls.n	8006252 <_free_r+0x42>
 800625c:	6811      	ldr	r1, [r2, #0]
 800625e:	1850      	adds	r0, r2, r1
 8006260:	42a0      	cmp	r0, r4
 8006262:	d10b      	bne.n	800627c <_free_r+0x6c>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	4401      	add	r1, r0
 8006268:	1850      	adds	r0, r2, r1
 800626a:	4283      	cmp	r3, r0
 800626c:	6011      	str	r1, [r2, #0]
 800626e:	d1e0      	bne.n	8006232 <_free_r+0x22>
 8006270:	6818      	ldr	r0, [r3, #0]
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	6053      	str	r3, [r2, #4]
 8006276:	4408      	add	r0, r1
 8006278:	6010      	str	r0, [r2, #0]
 800627a:	e7da      	b.n	8006232 <_free_r+0x22>
 800627c:	d902      	bls.n	8006284 <_free_r+0x74>
 800627e:	230c      	movs	r3, #12
 8006280:	602b      	str	r3, [r5, #0]
 8006282:	e7d6      	b.n	8006232 <_free_r+0x22>
 8006284:	6820      	ldr	r0, [r4, #0]
 8006286:	1821      	adds	r1, r4, r0
 8006288:	428b      	cmp	r3, r1
 800628a:	bf04      	itt	eq
 800628c:	6819      	ldreq	r1, [r3, #0]
 800628e:	685b      	ldreq	r3, [r3, #4]
 8006290:	6063      	str	r3, [r4, #4]
 8006292:	bf04      	itt	eq
 8006294:	1809      	addeq	r1, r1, r0
 8006296:	6021      	streq	r1, [r4, #0]
 8006298:	6054      	str	r4, [r2, #4]
 800629a:	e7ca      	b.n	8006232 <_free_r+0x22>
 800629c:	bd38      	pop	{r3, r4, r5, pc}
 800629e:	bf00      	nop
 80062a0:	20000414 	.word	0x20000414

080062a4 <malloc>:
 80062a4:	4b02      	ldr	r3, [pc, #8]	@ (80062b0 <malloc+0xc>)
 80062a6:	4601      	mov	r1, r0
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	f000 b825 	b.w	80062f8 <_malloc_r>
 80062ae:	bf00      	nop
 80062b0:	20000018 	.word	0x20000018

080062b4 <sbrk_aligned>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	4e0f      	ldr	r6, [pc, #60]	@ (80062f4 <sbrk_aligned+0x40>)
 80062b8:	460c      	mov	r4, r1
 80062ba:	6831      	ldr	r1, [r6, #0]
 80062bc:	4605      	mov	r5, r0
 80062be:	b911      	cbnz	r1, 80062c6 <sbrk_aligned+0x12>
 80062c0:	f000 fe46 	bl	8006f50 <_sbrk_r>
 80062c4:	6030      	str	r0, [r6, #0]
 80062c6:	4621      	mov	r1, r4
 80062c8:	4628      	mov	r0, r5
 80062ca:	f000 fe41 	bl	8006f50 <_sbrk_r>
 80062ce:	1c43      	adds	r3, r0, #1
 80062d0:	d103      	bne.n	80062da <sbrk_aligned+0x26>
 80062d2:	f04f 34ff 	mov.w	r4, #4294967295
 80062d6:	4620      	mov	r0, r4
 80062d8:	bd70      	pop	{r4, r5, r6, pc}
 80062da:	1cc4      	adds	r4, r0, #3
 80062dc:	f024 0403 	bic.w	r4, r4, #3
 80062e0:	42a0      	cmp	r0, r4
 80062e2:	d0f8      	beq.n	80062d6 <sbrk_aligned+0x22>
 80062e4:	1a21      	subs	r1, r4, r0
 80062e6:	4628      	mov	r0, r5
 80062e8:	f000 fe32 	bl	8006f50 <_sbrk_r>
 80062ec:	3001      	adds	r0, #1
 80062ee:	d1f2      	bne.n	80062d6 <sbrk_aligned+0x22>
 80062f0:	e7ef      	b.n	80062d2 <sbrk_aligned+0x1e>
 80062f2:	bf00      	nop
 80062f4:	20000410 	.word	0x20000410

080062f8 <_malloc_r>:
 80062f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062fc:	1ccd      	adds	r5, r1, #3
 80062fe:	f025 0503 	bic.w	r5, r5, #3
 8006302:	3508      	adds	r5, #8
 8006304:	2d0c      	cmp	r5, #12
 8006306:	bf38      	it	cc
 8006308:	250c      	movcc	r5, #12
 800630a:	2d00      	cmp	r5, #0
 800630c:	4606      	mov	r6, r0
 800630e:	db01      	blt.n	8006314 <_malloc_r+0x1c>
 8006310:	42a9      	cmp	r1, r5
 8006312:	d904      	bls.n	800631e <_malloc_r+0x26>
 8006314:	230c      	movs	r3, #12
 8006316:	6033      	str	r3, [r6, #0]
 8006318:	2000      	movs	r0, #0
 800631a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800631e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80063f4 <_malloc_r+0xfc>
 8006322:	f000 f869 	bl	80063f8 <__malloc_lock>
 8006326:	f8d8 3000 	ldr.w	r3, [r8]
 800632a:	461c      	mov	r4, r3
 800632c:	bb44      	cbnz	r4, 8006380 <_malloc_r+0x88>
 800632e:	4629      	mov	r1, r5
 8006330:	4630      	mov	r0, r6
 8006332:	f7ff ffbf 	bl	80062b4 <sbrk_aligned>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	4604      	mov	r4, r0
 800633a:	d158      	bne.n	80063ee <_malloc_r+0xf6>
 800633c:	f8d8 4000 	ldr.w	r4, [r8]
 8006340:	4627      	mov	r7, r4
 8006342:	2f00      	cmp	r7, #0
 8006344:	d143      	bne.n	80063ce <_malloc_r+0xd6>
 8006346:	2c00      	cmp	r4, #0
 8006348:	d04b      	beq.n	80063e2 <_malloc_r+0xea>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	4639      	mov	r1, r7
 800634e:	4630      	mov	r0, r6
 8006350:	eb04 0903 	add.w	r9, r4, r3
 8006354:	f000 fdfc 	bl	8006f50 <_sbrk_r>
 8006358:	4581      	cmp	r9, r0
 800635a:	d142      	bne.n	80063e2 <_malloc_r+0xea>
 800635c:	6821      	ldr	r1, [r4, #0]
 800635e:	1a6d      	subs	r5, r5, r1
 8006360:	4629      	mov	r1, r5
 8006362:	4630      	mov	r0, r6
 8006364:	f7ff ffa6 	bl	80062b4 <sbrk_aligned>
 8006368:	3001      	adds	r0, #1
 800636a:	d03a      	beq.n	80063e2 <_malloc_r+0xea>
 800636c:	6823      	ldr	r3, [r4, #0]
 800636e:	442b      	add	r3, r5
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	f8d8 3000 	ldr.w	r3, [r8]
 8006376:	685a      	ldr	r2, [r3, #4]
 8006378:	bb62      	cbnz	r2, 80063d4 <_malloc_r+0xdc>
 800637a:	f8c8 7000 	str.w	r7, [r8]
 800637e:	e00f      	b.n	80063a0 <_malloc_r+0xa8>
 8006380:	6822      	ldr	r2, [r4, #0]
 8006382:	1b52      	subs	r2, r2, r5
 8006384:	d420      	bmi.n	80063c8 <_malloc_r+0xd0>
 8006386:	2a0b      	cmp	r2, #11
 8006388:	d917      	bls.n	80063ba <_malloc_r+0xc2>
 800638a:	1961      	adds	r1, r4, r5
 800638c:	42a3      	cmp	r3, r4
 800638e:	6025      	str	r5, [r4, #0]
 8006390:	bf18      	it	ne
 8006392:	6059      	strne	r1, [r3, #4]
 8006394:	6863      	ldr	r3, [r4, #4]
 8006396:	bf08      	it	eq
 8006398:	f8c8 1000 	streq.w	r1, [r8]
 800639c:	5162      	str	r2, [r4, r5]
 800639e:	604b      	str	r3, [r1, #4]
 80063a0:	4630      	mov	r0, r6
 80063a2:	f000 f82f 	bl	8006404 <__malloc_unlock>
 80063a6:	f104 000b 	add.w	r0, r4, #11
 80063aa:	1d23      	adds	r3, r4, #4
 80063ac:	f020 0007 	bic.w	r0, r0, #7
 80063b0:	1ac2      	subs	r2, r0, r3
 80063b2:	bf1c      	itt	ne
 80063b4:	1a1b      	subne	r3, r3, r0
 80063b6:	50a3      	strne	r3, [r4, r2]
 80063b8:	e7af      	b.n	800631a <_malloc_r+0x22>
 80063ba:	6862      	ldr	r2, [r4, #4]
 80063bc:	42a3      	cmp	r3, r4
 80063be:	bf0c      	ite	eq
 80063c0:	f8c8 2000 	streq.w	r2, [r8]
 80063c4:	605a      	strne	r2, [r3, #4]
 80063c6:	e7eb      	b.n	80063a0 <_malloc_r+0xa8>
 80063c8:	4623      	mov	r3, r4
 80063ca:	6864      	ldr	r4, [r4, #4]
 80063cc:	e7ae      	b.n	800632c <_malloc_r+0x34>
 80063ce:	463c      	mov	r4, r7
 80063d0:	687f      	ldr	r7, [r7, #4]
 80063d2:	e7b6      	b.n	8006342 <_malloc_r+0x4a>
 80063d4:	461a      	mov	r2, r3
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	42a3      	cmp	r3, r4
 80063da:	d1fb      	bne.n	80063d4 <_malloc_r+0xdc>
 80063dc:	2300      	movs	r3, #0
 80063de:	6053      	str	r3, [r2, #4]
 80063e0:	e7de      	b.n	80063a0 <_malloc_r+0xa8>
 80063e2:	230c      	movs	r3, #12
 80063e4:	6033      	str	r3, [r6, #0]
 80063e6:	4630      	mov	r0, r6
 80063e8:	f000 f80c 	bl	8006404 <__malloc_unlock>
 80063ec:	e794      	b.n	8006318 <_malloc_r+0x20>
 80063ee:	6005      	str	r5, [r0, #0]
 80063f0:	e7d6      	b.n	80063a0 <_malloc_r+0xa8>
 80063f2:	bf00      	nop
 80063f4:	20000414 	.word	0x20000414

080063f8 <__malloc_lock>:
 80063f8:	4801      	ldr	r0, [pc, #4]	@ (8006400 <__malloc_lock+0x8>)
 80063fa:	f7ff b8ba 	b.w	8005572 <__retarget_lock_acquire_recursive>
 80063fe:	bf00      	nop
 8006400:	2000040c 	.word	0x2000040c

08006404 <__malloc_unlock>:
 8006404:	4801      	ldr	r0, [pc, #4]	@ (800640c <__malloc_unlock+0x8>)
 8006406:	f7ff b8b5 	b.w	8005574 <__retarget_lock_release_recursive>
 800640a:	bf00      	nop
 800640c:	2000040c 	.word	0x2000040c

08006410 <_Balloc>:
 8006410:	b570      	push	{r4, r5, r6, lr}
 8006412:	69c6      	ldr	r6, [r0, #28]
 8006414:	4604      	mov	r4, r0
 8006416:	460d      	mov	r5, r1
 8006418:	b976      	cbnz	r6, 8006438 <_Balloc+0x28>
 800641a:	2010      	movs	r0, #16
 800641c:	f7ff ff42 	bl	80062a4 <malloc>
 8006420:	4602      	mov	r2, r0
 8006422:	61e0      	str	r0, [r4, #28]
 8006424:	b920      	cbnz	r0, 8006430 <_Balloc+0x20>
 8006426:	4b18      	ldr	r3, [pc, #96]	@ (8006488 <_Balloc+0x78>)
 8006428:	4818      	ldr	r0, [pc, #96]	@ (800648c <_Balloc+0x7c>)
 800642a:	216b      	movs	r1, #107	@ 0x6b
 800642c:	f000 fdae 	bl	8006f8c <__assert_func>
 8006430:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006434:	6006      	str	r6, [r0, #0]
 8006436:	60c6      	str	r6, [r0, #12]
 8006438:	69e6      	ldr	r6, [r4, #28]
 800643a:	68f3      	ldr	r3, [r6, #12]
 800643c:	b183      	cbz	r3, 8006460 <_Balloc+0x50>
 800643e:	69e3      	ldr	r3, [r4, #28]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006446:	b9b8      	cbnz	r0, 8006478 <_Balloc+0x68>
 8006448:	2101      	movs	r1, #1
 800644a:	fa01 f605 	lsl.w	r6, r1, r5
 800644e:	1d72      	adds	r2, r6, #5
 8006450:	0092      	lsls	r2, r2, #2
 8006452:	4620      	mov	r0, r4
 8006454:	f000 fdb8 	bl	8006fc8 <_calloc_r>
 8006458:	b160      	cbz	r0, 8006474 <_Balloc+0x64>
 800645a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800645e:	e00e      	b.n	800647e <_Balloc+0x6e>
 8006460:	2221      	movs	r2, #33	@ 0x21
 8006462:	2104      	movs	r1, #4
 8006464:	4620      	mov	r0, r4
 8006466:	f000 fdaf 	bl	8006fc8 <_calloc_r>
 800646a:	69e3      	ldr	r3, [r4, #28]
 800646c:	60f0      	str	r0, [r6, #12]
 800646e:	68db      	ldr	r3, [r3, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1e4      	bne.n	800643e <_Balloc+0x2e>
 8006474:	2000      	movs	r0, #0
 8006476:	bd70      	pop	{r4, r5, r6, pc}
 8006478:	6802      	ldr	r2, [r0, #0]
 800647a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800647e:	2300      	movs	r3, #0
 8006480:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006484:	e7f7      	b.n	8006476 <_Balloc+0x66>
 8006486:	bf00      	nop
 8006488:	0800769d 	.word	0x0800769d
 800648c:	0800771d 	.word	0x0800771d

08006490 <_Bfree>:
 8006490:	b570      	push	{r4, r5, r6, lr}
 8006492:	69c6      	ldr	r6, [r0, #28]
 8006494:	4605      	mov	r5, r0
 8006496:	460c      	mov	r4, r1
 8006498:	b976      	cbnz	r6, 80064b8 <_Bfree+0x28>
 800649a:	2010      	movs	r0, #16
 800649c:	f7ff ff02 	bl	80062a4 <malloc>
 80064a0:	4602      	mov	r2, r0
 80064a2:	61e8      	str	r0, [r5, #28]
 80064a4:	b920      	cbnz	r0, 80064b0 <_Bfree+0x20>
 80064a6:	4b09      	ldr	r3, [pc, #36]	@ (80064cc <_Bfree+0x3c>)
 80064a8:	4809      	ldr	r0, [pc, #36]	@ (80064d0 <_Bfree+0x40>)
 80064aa:	218f      	movs	r1, #143	@ 0x8f
 80064ac:	f000 fd6e 	bl	8006f8c <__assert_func>
 80064b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80064b4:	6006      	str	r6, [r0, #0]
 80064b6:	60c6      	str	r6, [r0, #12]
 80064b8:	b13c      	cbz	r4, 80064ca <_Bfree+0x3a>
 80064ba:	69eb      	ldr	r3, [r5, #28]
 80064bc:	6862      	ldr	r2, [r4, #4]
 80064be:	68db      	ldr	r3, [r3, #12]
 80064c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064c4:	6021      	str	r1, [r4, #0]
 80064c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064ca:	bd70      	pop	{r4, r5, r6, pc}
 80064cc:	0800769d 	.word	0x0800769d
 80064d0:	0800771d 	.word	0x0800771d

080064d4 <__multadd>:
 80064d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064d8:	690d      	ldr	r5, [r1, #16]
 80064da:	4607      	mov	r7, r0
 80064dc:	460c      	mov	r4, r1
 80064de:	461e      	mov	r6, r3
 80064e0:	f101 0c14 	add.w	ip, r1, #20
 80064e4:	2000      	movs	r0, #0
 80064e6:	f8dc 3000 	ldr.w	r3, [ip]
 80064ea:	b299      	uxth	r1, r3
 80064ec:	fb02 6101 	mla	r1, r2, r1, r6
 80064f0:	0c1e      	lsrs	r6, r3, #16
 80064f2:	0c0b      	lsrs	r3, r1, #16
 80064f4:	fb02 3306 	mla	r3, r2, r6, r3
 80064f8:	b289      	uxth	r1, r1
 80064fa:	3001      	adds	r0, #1
 80064fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006500:	4285      	cmp	r5, r0
 8006502:	f84c 1b04 	str.w	r1, [ip], #4
 8006506:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800650a:	dcec      	bgt.n	80064e6 <__multadd+0x12>
 800650c:	b30e      	cbz	r6, 8006552 <__multadd+0x7e>
 800650e:	68a3      	ldr	r3, [r4, #8]
 8006510:	42ab      	cmp	r3, r5
 8006512:	dc19      	bgt.n	8006548 <__multadd+0x74>
 8006514:	6861      	ldr	r1, [r4, #4]
 8006516:	4638      	mov	r0, r7
 8006518:	3101      	adds	r1, #1
 800651a:	f7ff ff79 	bl	8006410 <_Balloc>
 800651e:	4680      	mov	r8, r0
 8006520:	b928      	cbnz	r0, 800652e <__multadd+0x5a>
 8006522:	4602      	mov	r2, r0
 8006524:	4b0c      	ldr	r3, [pc, #48]	@ (8006558 <__multadd+0x84>)
 8006526:	480d      	ldr	r0, [pc, #52]	@ (800655c <__multadd+0x88>)
 8006528:	21ba      	movs	r1, #186	@ 0xba
 800652a:	f000 fd2f 	bl	8006f8c <__assert_func>
 800652e:	6922      	ldr	r2, [r4, #16]
 8006530:	3202      	adds	r2, #2
 8006532:	f104 010c 	add.w	r1, r4, #12
 8006536:	0092      	lsls	r2, r2, #2
 8006538:	300c      	adds	r0, #12
 800653a:	f000 fd19 	bl	8006f70 <memcpy>
 800653e:	4621      	mov	r1, r4
 8006540:	4638      	mov	r0, r7
 8006542:	f7ff ffa5 	bl	8006490 <_Bfree>
 8006546:	4644      	mov	r4, r8
 8006548:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800654c:	3501      	adds	r5, #1
 800654e:	615e      	str	r6, [r3, #20]
 8006550:	6125      	str	r5, [r4, #16]
 8006552:	4620      	mov	r0, r4
 8006554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006558:	0800770c 	.word	0x0800770c
 800655c:	0800771d 	.word	0x0800771d

08006560 <__hi0bits>:
 8006560:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006564:	4603      	mov	r3, r0
 8006566:	bf36      	itet	cc
 8006568:	0403      	lslcc	r3, r0, #16
 800656a:	2000      	movcs	r0, #0
 800656c:	2010      	movcc	r0, #16
 800656e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006572:	bf3c      	itt	cc
 8006574:	021b      	lslcc	r3, r3, #8
 8006576:	3008      	addcc	r0, #8
 8006578:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800657c:	bf3c      	itt	cc
 800657e:	011b      	lslcc	r3, r3, #4
 8006580:	3004      	addcc	r0, #4
 8006582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006586:	bf3c      	itt	cc
 8006588:	009b      	lslcc	r3, r3, #2
 800658a:	3002      	addcc	r0, #2
 800658c:	2b00      	cmp	r3, #0
 800658e:	db05      	blt.n	800659c <__hi0bits+0x3c>
 8006590:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006594:	f100 0001 	add.w	r0, r0, #1
 8006598:	bf08      	it	eq
 800659a:	2020      	moveq	r0, #32
 800659c:	4770      	bx	lr

0800659e <__lo0bits>:
 800659e:	6803      	ldr	r3, [r0, #0]
 80065a0:	4602      	mov	r2, r0
 80065a2:	f013 0007 	ands.w	r0, r3, #7
 80065a6:	d00b      	beq.n	80065c0 <__lo0bits+0x22>
 80065a8:	07d9      	lsls	r1, r3, #31
 80065aa:	d421      	bmi.n	80065f0 <__lo0bits+0x52>
 80065ac:	0798      	lsls	r0, r3, #30
 80065ae:	bf49      	itett	mi
 80065b0:	085b      	lsrmi	r3, r3, #1
 80065b2:	089b      	lsrpl	r3, r3, #2
 80065b4:	2001      	movmi	r0, #1
 80065b6:	6013      	strmi	r3, [r2, #0]
 80065b8:	bf5c      	itt	pl
 80065ba:	6013      	strpl	r3, [r2, #0]
 80065bc:	2002      	movpl	r0, #2
 80065be:	4770      	bx	lr
 80065c0:	b299      	uxth	r1, r3
 80065c2:	b909      	cbnz	r1, 80065c8 <__lo0bits+0x2a>
 80065c4:	0c1b      	lsrs	r3, r3, #16
 80065c6:	2010      	movs	r0, #16
 80065c8:	b2d9      	uxtb	r1, r3
 80065ca:	b909      	cbnz	r1, 80065d0 <__lo0bits+0x32>
 80065cc:	3008      	adds	r0, #8
 80065ce:	0a1b      	lsrs	r3, r3, #8
 80065d0:	0719      	lsls	r1, r3, #28
 80065d2:	bf04      	itt	eq
 80065d4:	091b      	lsreq	r3, r3, #4
 80065d6:	3004      	addeq	r0, #4
 80065d8:	0799      	lsls	r1, r3, #30
 80065da:	bf04      	itt	eq
 80065dc:	089b      	lsreq	r3, r3, #2
 80065de:	3002      	addeq	r0, #2
 80065e0:	07d9      	lsls	r1, r3, #31
 80065e2:	d403      	bmi.n	80065ec <__lo0bits+0x4e>
 80065e4:	085b      	lsrs	r3, r3, #1
 80065e6:	f100 0001 	add.w	r0, r0, #1
 80065ea:	d003      	beq.n	80065f4 <__lo0bits+0x56>
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	4770      	bx	lr
 80065f0:	2000      	movs	r0, #0
 80065f2:	4770      	bx	lr
 80065f4:	2020      	movs	r0, #32
 80065f6:	4770      	bx	lr

080065f8 <__i2b>:
 80065f8:	b510      	push	{r4, lr}
 80065fa:	460c      	mov	r4, r1
 80065fc:	2101      	movs	r1, #1
 80065fe:	f7ff ff07 	bl	8006410 <_Balloc>
 8006602:	4602      	mov	r2, r0
 8006604:	b928      	cbnz	r0, 8006612 <__i2b+0x1a>
 8006606:	4b05      	ldr	r3, [pc, #20]	@ (800661c <__i2b+0x24>)
 8006608:	4805      	ldr	r0, [pc, #20]	@ (8006620 <__i2b+0x28>)
 800660a:	f240 1145 	movw	r1, #325	@ 0x145
 800660e:	f000 fcbd 	bl	8006f8c <__assert_func>
 8006612:	2301      	movs	r3, #1
 8006614:	6144      	str	r4, [r0, #20]
 8006616:	6103      	str	r3, [r0, #16]
 8006618:	bd10      	pop	{r4, pc}
 800661a:	bf00      	nop
 800661c:	0800770c 	.word	0x0800770c
 8006620:	0800771d 	.word	0x0800771d

08006624 <__multiply>:
 8006624:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006628:	4614      	mov	r4, r2
 800662a:	690a      	ldr	r2, [r1, #16]
 800662c:	6923      	ldr	r3, [r4, #16]
 800662e:	429a      	cmp	r2, r3
 8006630:	bfa8      	it	ge
 8006632:	4623      	movge	r3, r4
 8006634:	460f      	mov	r7, r1
 8006636:	bfa4      	itt	ge
 8006638:	460c      	movge	r4, r1
 800663a:	461f      	movge	r7, r3
 800663c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006640:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006644:	68a3      	ldr	r3, [r4, #8]
 8006646:	6861      	ldr	r1, [r4, #4]
 8006648:	eb0a 0609 	add.w	r6, sl, r9
 800664c:	42b3      	cmp	r3, r6
 800664e:	b085      	sub	sp, #20
 8006650:	bfb8      	it	lt
 8006652:	3101      	addlt	r1, #1
 8006654:	f7ff fedc 	bl	8006410 <_Balloc>
 8006658:	b930      	cbnz	r0, 8006668 <__multiply+0x44>
 800665a:	4602      	mov	r2, r0
 800665c:	4b44      	ldr	r3, [pc, #272]	@ (8006770 <__multiply+0x14c>)
 800665e:	4845      	ldr	r0, [pc, #276]	@ (8006774 <__multiply+0x150>)
 8006660:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006664:	f000 fc92 	bl	8006f8c <__assert_func>
 8006668:	f100 0514 	add.w	r5, r0, #20
 800666c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006670:	462b      	mov	r3, r5
 8006672:	2200      	movs	r2, #0
 8006674:	4543      	cmp	r3, r8
 8006676:	d321      	bcc.n	80066bc <__multiply+0x98>
 8006678:	f107 0114 	add.w	r1, r7, #20
 800667c:	f104 0214 	add.w	r2, r4, #20
 8006680:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006684:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006688:	9302      	str	r3, [sp, #8]
 800668a:	1b13      	subs	r3, r2, r4
 800668c:	3b15      	subs	r3, #21
 800668e:	f023 0303 	bic.w	r3, r3, #3
 8006692:	3304      	adds	r3, #4
 8006694:	f104 0715 	add.w	r7, r4, #21
 8006698:	42ba      	cmp	r2, r7
 800669a:	bf38      	it	cc
 800669c:	2304      	movcc	r3, #4
 800669e:	9301      	str	r3, [sp, #4]
 80066a0:	9b02      	ldr	r3, [sp, #8]
 80066a2:	9103      	str	r1, [sp, #12]
 80066a4:	428b      	cmp	r3, r1
 80066a6:	d80c      	bhi.n	80066c2 <__multiply+0x9e>
 80066a8:	2e00      	cmp	r6, #0
 80066aa:	dd03      	ble.n	80066b4 <__multiply+0x90>
 80066ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d05b      	beq.n	800676c <__multiply+0x148>
 80066b4:	6106      	str	r6, [r0, #16]
 80066b6:	b005      	add	sp, #20
 80066b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066bc:	f843 2b04 	str.w	r2, [r3], #4
 80066c0:	e7d8      	b.n	8006674 <__multiply+0x50>
 80066c2:	f8b1 a000 	ldrh.w	sl, [r1]
 80066c6:	f1ba 0f00 	cmp.w	sl, #0
 80066ca:	d024      	beq.n	8006716 <__multiply+0xf2>
 80066cc:	f104 0e14 	add.w	lr, r4, #20
 80066d0:	46a9      	mov	r9, r5
 80066d2:	f04f 0c00 	mov.w	ip, #0
 80066d6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80066da:	f8d9 3000 	ldr.w	r3, [r9]
 80066de:	fa1f fb87 	uxth.w	fp, r7
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	fb0a 330b 	mla	r3, sl, fp, r3
 80066e8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80066ec:	f8d9 7000 	ldr.w	r7, [r9]
 80066f0:	4463      	add	r3, ip
 80066f2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80066f6:	fb0a c70b 	mla	r7, sl, fp, ip
 80066fa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80066fe:	b29b      	uxth	r3, r3
 8006700:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006704:	4572      	cmp	r2, lr
 8006706:	f849 3b04 	str.w	r3, [r9], #4
 800670a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800670e:	d8e2      	bhi.n	80066d6 <__multiply+0xb2>
 8006710:	9b01      	ldr	r3, [sp, #4]
 8006712:	f845 c003 	str.w	ip, [r5, r3]
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800671c:	3104      	adds	r1, #4
 800671e:	f1b9 0f00 	cmp.w	r9, #0
 8006722:	d021      	beq.n	8006768 <__multiply+0x144>
 8006724:	682b      	ldr	r3, [r5, #0]
 8006726:	f104 0c14 	add.w	ip, r4, #20
 800672a:	46ae      	mov	lr, r5
 800672c:	f04f 0a00 	mov.w	sl, #0
 8006730:	f8bc b000 	ldrh.w	fp, [ip]
 8006734:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006738:	fb09 770b 	mla	r7, r9, fp, r7
 800673c:	4457      	add	r7, sl
 800673e:	b29b      	uxth	r3, r3
 8006740:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006744:	f84e 3b04 	str.w	r3, [lr], #4
 8006748:	f85c 3b04 	ldr.w	r3, [ip], #4
 800674c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006750:	f8be 3000 	ldrh.w	r3, [lr]
 8006754:	fb09 330a 	mla	r3, r9, sl, r3
 8006758:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800675c:	4562      	cmp	r2, ip
 800675e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006762:	d8e5      	bhi.n	8006730 <__multiply+0x10c>
 8006764:	9f01      	ldr	r7, [sp, #4]
 8006766:	51eb      	str	r3, [r5, r7]
 8006768:	3504      	adds	r5, #4
 800676a:	e799      	b.n	80066a0 <__multiply+0x7c>
 800676c:	3e01      	subs	r6, #1
 800676e:	e79b      	b.n	80066a8 <__multiply+0x84>
 8006770:	0800770c 	.word	0x0800770c
 8006774:	0800771d 	.word	0x0800771d

08006778 <__pow5mult>:
 8006778:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800677c:	4615      	mov	r5, r2
 800677e:	f012 0203 	ands.w	r2, r2, #3
 8006782:	4607      	mov	r7, r0
 8006784:	460e      	mov	r6, r1
 8006786:	d007      	beq.n	8006798 <__pow5mult+0x20>
 8006788:	4c25      	ldr	r4, [pc, #148]	@ (8006820 <__pow5mult+0xa8>)
 800678a:	3a01      	subs	r2, #1
 800678c:	2300      	movs	r3, #0
 800678e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006792:	f7ff fe9f 	bl	80064d4 <__multadd>
 8006796:	4606      	mov	r6, r0
 8006798:	10ad      	asrs	r5, r5, #2
 800679a:	d03d      	beq.n	8006818 <__pow5mult+0xa0>
 800679c:	69fc      	ldr	r4, [r7, #28]
 800679e:	b97c      	cbnz	r4, 80067c0 <__pow5mult+0x48>
 80067a0:	2010      	movs	r0, #16
 80067a2:	f7ff fd7f 	bl	80062a4 <malloc>
 80067a6:	4602      	mov	r2, r0
 80067a8:	61f8      	str	r0, [r7, #28]
 80067aa:	b928      	cbnz	r0, 80067b8 <__pow5mult+0x40>
 80067ac:	4b1d      	ldr	r3, [pc, #116]	@ (8006824 <__pow5mult+0xac>)
 80067ae:	481e      	ldr	r0, [pc, #120]	@ (8006828 <__pow5mult+0xb0>)
 80067b0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80067b4:	f000 fbea 	bl	8006f8c <__assert_func>
 80067b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067bc:	6004      	str	r4, [r0, #0]
 80067be:	60c4      	str	r4, [r0, #12]
 80067c0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80067c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067c8:	b94c      	cbnz	r4, 80067de <__pow5mult+0x66>
 80067ca:	f240 2171 	movw	r1, #625	@ 0x271
 80067ce:	4638      	mov	r0, r7
 80067d0:	f7ff ff12 	bl	80065f8 <__i2b>
 80067d4:	2300      	movs	r3, #0
 80067d6:	f8c8 0008 	str.w	r0, [r8, #8]
 80067da:	4604      	mov	r4, r0
 80067dc:	6003      	str	r3, [r0, #0]
 80067de:	f04f 0900 	mov.w	r9, #0
 80067e2:	07eb      	lsls	r3, r5, #31
 80067e4:	d50a      	bpl.n	80067fc <__pow5mult+0x84>
 80067e6:	4631      	mov	r1, r6
 80067e8:	4622      	mov	r2, r4
 80067ea:	4638      	mov	r0, r7
 80067ec:	f7ff ff1a 	bl	8006624 <__multiply>
 80067f0:	4631      	mov	r1, r6
 80067f2:	4680      	mov	r8, r0
 80067f4:	4638      	mov	r0, r7
 80067f6:	f7ff fe4b 	bl	8006490 <_Bfree>
 80067fa:	4646      	mov	r6, r8
 80067fc:	106d      	asrs	r5, r5, #1
 80067fe:	d00b      	beq.n	8006818 <__pow5mult+0xa0>
 8006800:	6820      	ldr	r0, [r4, #0]
 8006802:	b938      	cbnz	r0, 8006814 <__pow5mult+0x9c>
 8006804:	4622      	mov	r2, r4
 8006806:	4621      	mov	r1, r4
 8006808:	4638      	mov	r0, r7
 800680a:	f7ff ff0b 	bl	8006624 <__multiply>
 800680e:	6020      	str	r0, [r4, #0]
 8006810:	f8c0 9000 	str.w	r9, [r0]
 8006814:	4604      	mov	r4, r0
 8006816:	e7e4      	b.n	80067e2 <__pow5mult+0x6a>
 8006818:	4630      	mov	r0, r6
 800681a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800681e:	bf00      	nop
 8006820:	08007778 	.word	0x08007778
 8006824:	0800769d 	.word	0x0800769d
 8006828:	0800771d 	.word	0x0800771d

0800682c <__lshift>:
 800682c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006830:	460c      	mov	r4, r1
 8006832:	6849      	ldr	r1, [r1, #4]
 8006834:	6923      	ldr	r3, [r4, #16]
 8006836:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800683a:	68a3      	ldr	r3, [r4, #8]
 800683c:	4607      	mov	r7, r0
 800683e:	4691      	mov	r9, r2
 8006840:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006844:	f108 0601 	add.w	r6, r8, #1
 8006848:	42b3      	cmp	r3, r6
 800684a:	db0b      	blt.n	8006864 <__lshift+0x38>
 800684c:	4638      	mov	r0, r7
 800684e:	f7ff fddf 	bl	8006410 <_Balloc>
 8006852:	4605      	mov	r5, r0
 8006854:	b948      	cbnz	r0, 800686a <__lshift+0x3e>
 8006856:	4602      	mov	r2, r0
 8006858:	4b28      	ldr	r3, [pc, #160]	@ (80068fc <__lshift+0xd0>)
 800685a:	4829      	ldr	r0, [pc, #164]	@ (8006900 <__lshift+0xd4>)
 800685c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006860:	f000 fb94 	bl	8006f8c <__assert_func>
 8006864:	3101      	adds	r1, #1
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	e7ee      	b.n	8006848 <__lshift+0x1c>
 800686a:	2300      	movs	r3, #0
 800686c:	f100 0114 	add.w	r1, r0, #20
 8006870:	f100 0210 	add.w	r2, r0, #16
 8006874:	4618      	mov	r0, r3
 8006876:	4553      	cmp	r3, sl
 8006878:	db33      	blt.n	80068e2 <__lshift+0xb6>
 800687a:	6920      	ldr	r0, [r4, #16]
 800687c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006880:	f104 0314 	add.w	r3, r4, #20
 8006884:	f019 091f 	ands.w	r9, r9, #31
 8006888:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800688c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006890:	d02b      	beq.n	80068ea <__lshift+0xbe>
 8006892:	f1c9 0e20 	rsb	lr, r9, #32
 8006896:	468a      	mov	sl, r1
 8006898:	2200      	movs	r2, #0
 800689a:	6818      	ldr	r0, [r3, #0]
 800689c:	fa00 f009 	lsl.w	r0, r0, r9
 80068a0:	4310      	orrs	r0, r2
 80068a2:	f84a 0b04 	str.w	r0, [sl], #4
 80068a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068aa:	459c      	cmp	ip, r3
 80068ac:	fa22 f20e 	lsr.w	r2, r2, lr
 80068b0:	d8f3      	bhi.n	800689a <__lshift+0x6e>
 80068b2:	ebac 0304 	sub.w	r3, ip, r4
 80068b6:	3b15      	subs	r3, #21
 80068b8:	f023 0303 	bic.w	r3, r3, #3
 80068bc:	3304      	adds	r3, #4
 80068be:	f104 0015 	add.w	r0, r4, #21
 80068c2:	4584      	cmp	ip, r0
 80068c4:	bf38      	it	cc
 80068c6:	2304      	movcc	r3, #4
 80068c8:	50ca      	str	r2, [r1, r3]
 80068ca:	b10a      	cbz	r2, 80068d0 <__lshift+0xa4>
 80068cc:	f108 0602 	add.w	r6, r8, #2
 80068d0:	3e01      	subs	r6, #1
 80068d2:	4638      	mov	r0, r7
 80068d4:	612e      	str	r6, [r5, #16]
 80068d6:	4621      	mov	r1, r4
 80068d8:	f7ff fdda 	bl	8006490 <_Bfree>
 80068dc:	4628      	mov	r0, r5
 80068de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80068e6:	3301      	adds	r3, #1
 80068e8:	e7c5      	b.n	8006876 <__lshift+0x4a>
 80068ea:	3904      	subs	r1, #4
 80068ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80068f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80068f4:	459c      	cmp	ip, r3
 80068f6:	d8f9      	bhi.n	80068ec <__lshift+0xc0>
 80068f8:	e7ea      	b.n	80068d0 <__lshift+0xa4>
 80068fa:	bf00      	nop
 80068fc:	0800770c 	.word	0x0800770c
 8006900:	0800771d 	.word	0x0800771d

08006904 <__mcmp>:
 8006904:	690a      	ldr	r2, [r1, #16]
 8006906:	4603      	mov	r3, r0
 8006908:	6900      	ldr	r0, [r0, #16]
 800690a:	1a80      	subs	r0, r0, r2
 800690c:	b530      	push	{r4, r5, lr}
 800690e:	d10e      	bne.n	800692e <__mcmp+0x2a>
 8006910:	3314      	adds	r3, #20
 8006912:	3114      	adds	r1, #20
 8006914:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006918:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800691c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006920:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006924:	4295      	cmp	r5, r2
 8006926:	d003      	beq.n	8006930 <__mcmp+0x2c>
 8006928:	d205      	bcs.n	8006936 <__mcmp+0x32>
 800692a:	f04f 30ff 	mov.w	r0, #4294967295
 800692e:	bd30      	pop	{r4, r5, pc}
 8006930:	42a3      	cmp	r3, r4
 8006932:	d3f3      	bcc.n	800691c <__mcmp+0x18>
 8006934:	e7fb      	b.n	800692e <__mcmp+0x2a>
 8006936:	2001      	movs	r0, #1
 8006938:	e7f9      	b.n	800692e <__mcmp+0x2a>
	...

0800693c <__mdiff>:
 800693c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006940:	4689      	mov	r9, r1
 8006942:	4606      	mov	r6, r0
 8006944:	4611      	mov	r1, r2
 8006946:	4648      	mov	r0, r9
 8006948:	4614      	mov	r4, r2
 800694a:	f7ff ffdb 	bl	8006904 <__mcmp>
 800694e:	1e05      	subs	r5, r0, #0
 8006950:	d112      	bne.n	8006978 <__mdiff+0x3c>
 8006952:	4629      	mov	r1, r5
 8006954:	4630      	mov	r0, r6
 8006956:	f7ff fd5b 	bl	8006410 <_Balloc>
 800695a:	4602      	mov	r2, r0
 800695c:	b928      	cbnz	r0, 800696a <__mdiff+0x2e>
 800695e:	4b3f      	ldr	r3, [pc, #252]	@ (8006a5c <__mdiff+0x120>)
 8006960:	f240 2137 	movw	r1, #567	@ 0x237
 8006964:	483e      	ldr	r0, [pc, #248]	@ (8006a60 <__mdiff+0x124>)
 8006966:	f000 fb11 	bl	8006f8c <__assert_func>
 800696a:	2301      	movs	r3, #1
 800696c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006970:	4610      	mov	r0, r2
 8006972:	b003      	add	sp, #12
 8006974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006978:	bfbc      	itt	lt
 800697a:	464b      	movlt	r3, r9
 800697c:	46a1      	movlt	r9, r4
 800697e:	4630      	mov	r0, r6
 8006980:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006984:	bfba      	itte	lt
 8006986:	461c      	movlt	r4, r3
 8006988:	2501      	movlt	r5, #1
 800698a:	2500      	movge	r5, #0
 800698c:	f7ff fd40 	bl	8006410 <_Balloc>
 8006990:	4602      	mov	r2, r0
 8006992:	b918      	cbnz	r0, 800699c <__mdiff+0x60>
 8006994:	4b31      	ldr	r3, [pc, #196]	@ (8006a5c <__mdiff+0x120>)
 8006996:	f240 2145 	movw	r1, #581	@ 0x245
 800699a:	e7e3      	b.n	8006964 <__mdiff+0x28>
 800699c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80069a0:	6926      	ldr	r6, [r4, #16]
 80069a2:	60c5      	str	r5, [r0, #12]
 80069a4:	f109 0310 	add.w	r3, r9, #16
 80069a8:	f109 0514 	add.w	r5, r9, #20
 80069ac:	f104 0e14 	add.w	lr, r4, #20
 80069b0:	f100 0b14 	add.w	fp, r0, #20
 80069b4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80069b8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80069bc:	9301      	str	r3, [sp, #4]
 80069be:	46d9      	mov	r9, fp
 80069c0:	f04f 0c00 	mov.w	ip, #0
 80069c4:	9b01      	ldr	r3, [sp, #4]
 80069c6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80069ca:	f853 af04 	ldr.w	sl, [r3, #4]!
 80069ce:	9301      	str	r3, [sp, #4]
 80069d0:	fa1f f38a 	uxth.w	r3, sl
 80069d4:	4619      	mov	r1, r3
 80069d6:	b283      	uxth	r3, r0
 80069d8:	1acb      	subs	r3, r1, r3
 80069da:	0c00      	lsrs	r0, r0, #16
 80069dc:	4463      	add	r3, ip
 80069de:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80069e2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80069e6:	b29b      	uxth	r3, r3
 80069e8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80069ec:	4576      	cmp	r6, lr
 80069ee:	f849 3b04 	str.w	r3, [r9], #4
 80069f2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80069f6:	d8e5      	bhi.n	80069c4 <__mdiff+0x88>
 80069f8:	1b33      	subs	r3, r6, r4
 80069fa:	3b15      	subs	r3, #21
 80069fc:	f023 0303 	bic.w	r3, r3, #3
 8006a00:	3415      	adds	r4, #21
 8006a02:	3304      	adds	r3, #4
 8006a04:	42a6      	cmp	r6, r4
 8006a06:	bf38      	it	cc
 8006a08:	2304      	movcc	r3, #4
 8006a0a:	441d      	add	r5, r3
 8006a0c:	445b      	add	r3, fp
 8006a0e:	461e      	mov	r6, r3
 8006a10:	462c      	mov	r4, r5
 8006a12:	4544      	cmp	r4, r8
 8006a14:	d30e      	bcc.n	8006a34 <__mdiff+0xf8>
 8006a16:	f108 0103 	add.w	r1, r8, #3
 8006a1a:	1b49      	subs	r1, r1, r5
 8006a1c:	f021 0103 	bic.w	r1, r1, #3
 8006a20:	3d03      	subs	r5, #3
 8006a22:	45a8      	cmp	r8, r5
 8006a24:	bf38      	it	cc
 8006a26:	2100      	movcc	r1, #0
 8006a28:	440b      	add	r3, r1
 8006a2a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006a2e:	b191      	cbz	r1, 8006a56 <__mdiff+0x11a>
 8006a30:	6117      	str	r7, [r2, #16]
 8006a32:	e79d      	b.n	8006970 <__mdiff+0x34>
 8006a34:	f854 1b04 	ldr.w	r1, [r4], #4
 8006a38:	46e6      	mov	lr, ip
 8006a3a:	0c08      	lsrs	r0, r1, #16
 8006a3c:	fa1c fc81 	uxtah	ip, ip, r1
 8006a40:	4471      	add	r1, lr
 8006a42:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006a46:	b289      	uxth	r1, r1
 8006a48:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006a4c:	f846 1b04 	str.w	r1, [r6], #4
 8006a50:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006a54:	e7dd      	b.n	8006a12 <__mdiff+0xd6>
 8006a56:	3f01      	subs	r7, #1
 8006a58:	e7e7      	b.n	8006a2a <__mdiff+0xee>
 8006a5a:	bf00      	nop
 8006a5c:	0800770c 	.word	0x0800770c
 8006a60:	0800771d 	.word	0x0800771d

08006a64 <__d2b>:
 8006a64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a68:	460f      	mov	r7, r1
 8006a6a:	2101      	movs	r1, #1
 8006a6c:	ec59 8b10 	vmov	r8, r9, d0
 8006a70:	4616      	mov	r6, r2
 8006a72:	f7ff fccd 	bl	8006410 <_Balloc>
 8006a76:	4604      	mov	r4, r0
 8006a78:	b930      	cbnz	r0, 8006a88 <__d2b+0x24>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	4b23      	ldr	r3, [pc, #140]	@ (8006b0c <__d2b+0xa8>)
 8006a7e:	4824      	ldr	r0, [pc, #144]	@ (8006b10 <__d2b+0xac>)
 8006a80:	f240 310f 	movw	r1, #783	@ 0x30f
 8006a84:	f000 fa82 	bl	8006f8c <__assert_func>
 8006a88:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006a8c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006a90:	b10d      	cbz	r5, 8006a96 <__d2b+0x32>
 8006a92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006a96:	9301      	str	r3, [sp, #4]
 8006a98:	f1b8 0300 	subs.w	r3, r8, #0
 8006a9c:	d023      	beq.n	8006ae6 <__d2b+0x82>
 8006a9e:	4668      	mov	r0, sp
 8006aa0:	9300      	str	r3, [sp, #0]
 8006aa2:	f7ff fd7c 	bl	800659e <__lo0bits>
 8006aa6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006aaa:	b1d0      	cbz	r0, 8006ae2 <__d2b+0x7e>
 8006aac:	f1c0 0320 	rsb	r3, r0, #32
 8006ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab4:	430b      	orrs	r3, r1
 8006ab6:	40c2      	lsrs	r2, r0
 8006ab8:	6163      	str	r3, [r4, #20]
 8006aba:	9201      	str	r2, [sp, #4]
 8006abc:	9b01      	ldr	r3, [sp, #4]
 8006abe:	61a3      	str	r3, [r4, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	bf0c      	ite	eq
 8006ac4:	2201      	moveq	r2, #1
 8006ac6:	2202      	movne	r2, #2
 8006ac8:	6122      	str	r2, [r4, #16]
 8006aca:	b1a5      	cbz	r5, 8006af6 <__d2b+0x92>
 8006acc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006ad0:	4405      	add	r5, r0
 8006ad2:	603d      	str	r5, [r7, #0]
 8006ad4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006ad8:	6030      	str	r0, [r6, #0]
 8006ada:	4620      	mov	r0, r4
 8006adc:	b003      	add	sp, #12
 8006ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ae2:	6161      	str	r1, [r4, #20]
 8006ae4:	e7ea      	b.n	8006abc <__d2b+0x58>
 8006ae6:	a801      	add	r0, sp, #4
 8006ae8:	f7ff fd59 	bl	800659e <__lo0bits>
 8006aec:	9b01      	ldr	r3, [sp, #4]
 8006aee:	6163      	str	r3, [r4, #20]
 8006af0:	3020      	adds	r0, #32
 8006af2:	2201      	movs	r2, #1
 8006af4:	e7e8      	b.n	8006ac8 <__d2b+0x64>
 8006af6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006afa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006afe:	6038      	str	r0, [r7, #0]
 8006b00:	6918      	ldr	r0, [r3, #16]
 8006b02:	f7ff fd2d 	bl	8006560 <__hi0bits>
 8006b06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b0a:	e7e5      	b.n	8006ad8 <__d2b+0x74>
 8006b0c:	0800770c 	.word	0x0800770c
 8006b10:	0800771d 	.word	0x0800771d

08006b14 <__ssputs_r>:
 8006b14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b18:	688e      	ldr	r6, [r1, #8]
 8006b1a:	461f      	mov	r7, r3
 8006b1c:	42be      	cmp	r6, r7
 8006b1e:	680b      	ldr	r3, [r1, #0]
 8006b20:	4682      	mov	sl, r0
 8006b22:	460c      	mov	r4, r1
 8006b24:	4690      	mov	r8, r2
 8006b26:	d82d      	bhi.n	8006b84 <__ssputs_r+0x70>
 8006b28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006b2c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006b30:	d026      	beq.n	8006b80 <__ssputs_r+0x6c>
 8006b32:	6965      	ldr	r5, [r4, #20]
 8006b34:	6909      	ldr	r1, [r1, #16]
 8006b36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b3a:	eba3 0901 	sub.w	r9, r3, r1
 8006b3e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b42:	1c7b      	adds	r3, r7, #1
 8006b44:	444b      	add	r3, r9
 8006b46:	106d      	asrs	r5, r5, #1
 8006b48:	429d      	cmp	r5, r3
 8006b4a:	bf38      	it	cc
 8006b4c:	461d      	movcc	r5, r3
 8006b4e:	0553      	lsls	r3, r2, #21
 8006b50:	d527      	bpl.n	8006ba2 <__ssputs_r+0x8e>
 8006b52:	4629      	mov	r1, r5
 8006b54:	f7ff fbd0 	bl	80062f8 <_malloc_r>
 8006b58:	4606      	mov	r6, r0
 8006b5a:	b360      	cbz	r0, 8006bb6 <__ssputs_r+0xa2>
 8006b5c:	6921      	ldr	r1, [r4, #16]
 8006b5e:	464a      	mov	r2, r9
 8006b60:	f000 fa06 	bl	8006f70 <memcpy>
 8006b64:	89a3      	ldrh	r3, [r4, #12]
 8006b66:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006b6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006b6e:	81a3      	strh	r3, [r4, #12]
 8006b70:	6126      	str	r6, [r4, #16]
 8006b72:	6165      	str	r5, [r4, #20]
 8006b74:	444e      	add	r6, r9
 8006b76:	eba5 0509 	sub.w	r5, r5, r9
 8006b7a:	6026      	str	r6, [r4, #0]
 8006b7c:	60a5      	str	r5, [r4, #8]
 8006b7e:	463e      	mov	r6, r7
 8006b80:	42be      	cmp	r6, r7
 8006b82:	d900      	bls.n	8006b86 <__ssputs_r+0x72>
 8006b84:	463e      	mov	r6, r7
 8006b86:	6820      	ldr	r0, [r4, #0]
 8006b88:	4632      	mov	r2, r6
 8006b8a:	4641      	mov	r1, r8
 8006b8c:	f000 f9c6 	bl	8006f1c <memmove>
 8006b90:	68a3      	ldr	r3, [r4, #8]
 8006b92:	1b9b      	subs	r3, r3, r6
 8006b94:	60a3      	str	r3, [r4, #8]
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	4433      	add	r3, r6
 8006b9a:	6023      	str	r3, [r4, #0]
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ba2:	462a      	mov	r2, r5
 8006ba4:	f000 fa36 	bl	8007014 <_realloc_r>
 8006ba8:	4606      	mov	r6, r0
 8006baa:	2800      	cmp	r0, #0
 8006bac:	d1e0      	bne.n	8006b70 <__ssputs_r+0x5c>
 8006bae:	6921      	ldr	r1, [r4, #16]
 8006bb0:	4650      	mov	r0, sl
 8006bb2:	f7ff fb2d 	bl	8006210 <_free_r>
 8006bb6:	230c      	movs	r3, #12
 8006bb8:	f8ca 3000 	str.w	r3, [sl]
 8006bbc:	89a3      	ldrh	r3, [r4, #12]
 8006bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bc2:	81a3      	strh	r3, [r4, #12]
 8006bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bc8:	e7e9      	b.n	8006b9e <__ssputs_r+0x8a>
	...

08006bcc <_svfiprintf_r>:
 8006bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bd0:	4698      	mov	r8, r3
 8006bd2:	898b      	ldrh	r3, [r1, #12]
 8006bd4:	061b      	lsls	r3, r3, #24
 8006bd6:	b09d      	sub	sp, #116	@ 0x74
 8006bd8:	4607      	mov	r7, r0
 8006bda:	460d      	mov	r5, r1
 8006bdc:	4614      	mov	r4, r2
 8006bde:	d510      	bpl.n	8006c02 <_svfiprintf_r+0x36>
 8006be0:	690b      	ldr	r3, [r1, #16]
 8006be2:	b973      	cbnz	r3, 8006c02 <_svfiprintf_r+0x36>
 8006be4:	2140      	movs	r1, #64	@ 0x40
 8006be6:	f7ff fb87 	bl	80062f8 <_malloc_r>
 8006bea:	6028      	str	r0, [r5, #0]
 8006bec:	6128      	str	r0, [r5, #16]
 8006bee:	b930      	cbnz	r0, 8006bfe <_svfiprintf_r+0x32>
 8006bf0:	230c      	movs	r3, #12
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006bf8:	b01d      	add	sp, #116	@ 0x74
 8006bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bfe:	2340      	movs	r3, #64	@ 0x40
 8006c00:	616b      	str	r3, [r5, #20]
 8006c02:	2300      	movs	r3, #0
 8006c04:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c06:	2320      	movs	r3, #32
 8006c08:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c0c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c10:	2330      	movs	r3, #48	@ 0x30
 8006c12:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006db0 <_svfiprintf_r+0x1e4>
 8006c16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006c1a:	f04f 0901 	mov.w	r9, #1
 8006c1e:	4623      	mov	r3, r4
 8006c20:	469a      	mov	sl, r3
 8006c22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c26:	b10a      	cbz	r2, 8006c2c <_svfiprintf_r+0x60>
 8006c28:	2a25      	cmp	r2, #37	@ 0x25
 8006c2a:	d1f9      	bne.n	8006c20 <_svfiprintf_r+0x54>
 8006c2c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c30:	d00b      	beq.n	8006c4a <_svfiprintf_r+0x7e>
 8006c32:	465b      	mov	r3, fp
 8006c34:	4622      	mov	r2, r4
 8006c36:	4629      	mov	r1, r5
 8006c38:	4638      	mov	r0, r7
 8006c3a:	f7ff ff6b 	bl	8006b14 <__ssputs_r>
 8006c3e:	3001      	adds	r0, #1
 8006c40:	f000 80a7 	beq.w	8006d92 <_svfiprintf_r+0x1c6>
 8006c44:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c46:	445a      	add	r2, fp
 8006c48:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	f000 809f 	beq.w	8006d92 <_svfiprintf_r+0x1c6>
 8006c54:	2300      	movs	r3, #0
 8006c56:	f04f 32ff 	mov.w	r2, #4294967295
 8006c5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c5e:	f10a 0a01 	add.w	sl, sl, #1
 8006c62:	9304      	str	r3, [sp, #16]
 8006c64:	9307      	str	r3, [sp, #28]
 8006c66:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006c6a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006c6c:	4654      	mov	r4, sl
 8006c6e:	2205      	movs	r2, #5
 8006c70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c74:	484e      	ldr	r0, [pc, #312]	@ (8006db0 <_svfiprintf_r+0x1e4>)
 8006c76:	f7f9 fab3 	bl	80001e0 <memchr>
 8006c7a:	9a04      	ldr	r2, [sp, #16]
 8006c7c:	b9d8      	cbnz	r0, 8006cb6 <_svfiprintf_r+0xea>
 8006c7e:	06d0      	lsls	r0, r2, #27
 8006c80:	bf44      	itt	mi
 8006c82:	2320      	movmi	r3, #32
 8006c84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c88:	0711      	lsls	r1, r2, #28
 8006c8a:	bf44      	itt	mi
 8006c8c:	232b      	movmi	r3, #43	@ 0x2b
 8006c8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006c92:	f89a 3000 	ldrb.w	r3, [sl]
 8006c96:	2b2a      	cmp	r3, #42	@ 0x2a
 8006c98:	d015      	beq.n	8006cc6 <_svfiprintf_r+0xfa>
 8006c9a:	9a07      	ldr	r2, [sp, #28]
 8006c9c:	4654      	mov	r4, sl
 8006c9e:	2000      	movs	r0, #0
 8006ca0:	f04f 0c0a 	mov.w	ip, #10
 8006ca4:	4621      	mov	r1, r4
 8006ca6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006caa:	3b30      	subs	r3, #48	@ 0x30
 8006cac:	2b09      	cmp	r3, #9
 8006cae:	d94b      	bls.n	8006d48 <_svfiprintf_r+0x17c>
 8006cb0:	b1b0      	cbz	r0, 8006ce0 <_svfiprintf_r+0x114>
 8006cb2:	9207      	str	r2, [sp, #28]
 8006cb4:	e014      	b.n	8006ce0 <_svfiprintf_r+0x114>
 8006cb6:	eba0 0308 	sub.w	r3, r0, r8
 8006cba:	fa09 f303 	lsl.w	r3, r9, r3
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	9304      	str	r3, [sp, #16]
 8006cc2:	46a2      	mov	sl, r4
 8006cc4:	e7d2      	b.n	8006c6c <_svfiprintf_r+0xa0>
 8006cc6:	9b03      	ldr	r3, [sp, #12]
 8006cc8:	1d19      	adds	r1, r3, #4
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	9103      	str	r1, [sp, #12]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	bfbb      	ittet	lt
 8006cd2:	425b      	neglt	r3, r3
 8006cd4:	f042 0202 	orrlt.w	r2, r2, #2
 8006cd8:	9307      	strge	r3, [sp, #28]
 8006cda:	9307      	strlt	r3, [sp, #28]
 8006cdc:	bfb8      	it	lt
 8006cde:	9204      	strlt	r2, [sp, #16]
 8006ce0:	7823      	ldrb	r3, [r4, #0]
 8006ce2:	2b2e      	cmp	r3, #46	@ 0x2e
 8006ce4:	d10a      	bne.n	8006cfc <_svfiprintf_r+0x130>
 8006ce6:	7863      	ldrb	r3, [r4, #1]
 8006ce8:	2b2a      	cmp	r3, #42	@ 0x2a
 8006cea:	d132      	bne.n	8006d52 <_svfiprintf_r+0x186>
 8006cec:	9b03      	ldr	r3, [sp, #12]
 8006cee:	1d1a      	adds	r2, r3, #4
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	9203      	str	r2, [sp, #12]
 8006cf4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006cf8:	3402      	adds	r4, #2
 8006cfa:	9305      	str	r3, [sp, #20]
 8006cfc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006dc0 <_svfiprintf_r+0x1f4>
 8006d00:	7821      	ldrb	r1, [r4, #0]
 8006d02:	2203      	movs	r2, #3
 8006d04:	4650      	mov	r0, sl
 8006d06:	f7f9 fa6b 	bl	80001e0 <memchr>
 8006d0a:	b138      	cbz	r0, 8006d1c <_svfiprintf_r+0x150>
 8006d0c:	9b04      	ldr	r3, [sp, #16]
 8006d0e:	eba0 000a 	sub.w	r0, r0, sl
 8006d12:	2240      	movs	r2, #64	@ 0x40
 8006d14:	4082      	lsls	r2, r0
 8006d16:	4313      	orrs	r3, r2
 8006d18:	3401      	adds	r4, #1
 8006d1a:	9304      	str	r3, [sp, #16]
 8006d1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d20:	4824      	ldr	r0, [pc, #144]	@ (8006db4 <_svfiprintf_r+0x1e8>)
 8006d22:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006d26:	2206      	movs	r2, #6
 8006d28:	f7f9 fa5a 	bl	80001e0 <memchr>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	d036      	beq.n	8006d9e <_svfiprintf_r+0x1d2>
 8006d30:	4b21      	ldr	r3, [pc, #132]	@ (8006db8 <_svfiprintf_r+0x1ec>)
 8006d32:	bb1b      	cbnz	r3, 8006d7c <_svfiprintf_r+0x1b0>
 8006d34:	9b03      	ldr	r3, [sp, #12]
 8006d36:	3307      	adds	r3, #7
 8006d38:	f023 0307 	bic.w	r3, r3, #7
 8006d3c:	3308      	adds	r3, #8
 8006d3e:	9303      	str	r3, [sp, #12]
 8006d40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d42:	4433      	add	r3, r6
 8006d44:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d46:	e76a      	b.n	8006c1e <_svfiprintf_r+0x52>
 8006d48:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	2001      	movs	r0, #1
 8006d50:	e7a8      	b.n	8006ca4 <_svfiprintf_r+0xd8>
 8006d52:	2300      	movs	r3, #0
 8006d54:	3401      	adds	r4, #1
 8006d56:	9305      	str	r3, [sp, #20]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f04f 0c0a 	mov.w	ip, #10
 8006d5e:	4620      	mov	r0, r4
 8006d60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d64:	3a30      	subs	r2, #48	@ 0x30
 8006d66:	2a09      	cmp	r2, #9
 8006d68:	d903      	bls.n	8006d72 <_svfiprintf_r+0x1a6>
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d0c6      	beq.n	8006cfc <_svfiprintf_r+0x130>
 8006d6e:	9105      	str	r1, [sp, #20]
 8006d70:	e7c4      	b.n	8006cfc <_svfiprintf_r+0x130>
 8006d72:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d76:	4604      	mov	r4, r0
 8006d78:	2301      	movs	r3, #1
 8006d7a:	e7f0      	b.n	8006d5e <_svfiprintf_r+0x192>
 8006d7c:	ab03      	add	r3, sp, #12
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	462a      	mov	r2, r5
 8006d82:	4b0e      	ldr	r3, [pc, #56]	@ (8006dbc <_svfiprintf_r+0x1f0>)
 8006d84:	a904      	add	r1, sp, #16
 8006d86:	4638      	mov	r0, r7
 8006d88:	f7fd fe98 	bl	8004abc <_printf_float>
 8006d8c:	1c42      	adds	r2, r0, #1
 8006d8e:	4606      	mov	r6, r0
 8006d90:	d1d6      	bne.n	8006d40 <_svfiprintf_r+0x174>
 8006d92:	89ab      	ldrh	r3, [r5, #12]
 8006d94:	065b      	lsls	r3, r3, #25
 8006d96:	f53f af2d 	bmi.w	8006bf4 <_svfiprintf_r+0x28>
 8006d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006d9c:	e72c      	b.n	8006bf8 <_svfiprintf_r+0x2c>
 8006d9e:	ab03      	add	r3, sp, #12
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	462a      	mov	r2, r5
 8006da4:	4b05      	ldr	r3, [pc, #20]	@ (8006dbc <_svfiprintf_r+0x1f0>)
 8006da6:	a904      	add	r1, sp, #16
 8006da8:	4638      	mov	r0, r7
 8006daa:	f7fe f91f 	bl	8004fec <_printf_i>
 8006dae:	e7ed      	b.n	8006d8c <_svfiprintf_r+0x1c0>
 8006db0:	08007878 	.word	0x08007878
 8006db4:	08007882 	.word	0x08007882
 8006db8:	08004abd 	.word	0x08004abd
 8006dbc:	08006b15 	.word	0x08006b15
 8006dc0:	0800787e 	.word	0x0800787e

08006dc4 <__sflush_r>:
 8006dc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006dcc:	0716      	lsls	r6, r2, #28
 8006dce:	4605      	mov	r5, r0
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	d454      	bmi.n	8006e7e <__sflush_r+0xba>
 8006dd4:	684b      	ldr	r3, [r1, #4]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	dc02      	bgt.n	8006de0 <__sflush_r+0x1c>
 8006dda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	dd48      	ble.n	8006e72 <__sflush_r+0xae>
 8006de0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006de2:	2e00      	cmp	r6, #0
 8006de4:	d045      	beq.n	8006e72 <__sflush_r+0xae>
 8006de6:	2300      	movs	r3, #0
 8006de8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006dec:	682f      	ldr	r7, [r5, #0]
 8006dee:	6a21      	ldr	r1, [r4, #32]
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	d030      	beq.n	8006e56 <__sflush_r+0x92>
 8006df4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006df6:	89a3      	ldrh	r3, [r4, #12]
 8006df8:	0759      	lsls	r1, r3, #29
 8006dfa:	d505      	bpl.n	8006e08 <__sflush_r+0x44>
 8006dfc:	6863      	ldr	r3, [r4, #4]
 8006dfe:	1ad2      	subs	r2, r2, r3
 8006e00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006e02:	b10b      	cbz	r3, 8006e08 <__sflush_r+0x44>
 8006e04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006e06:	1ad2      	subs	r2, r2, r3
 8006e08:	2300      	movs	r3, #0
 8006e0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006e0c:	6a21      	ldr	r1, [r4, #32]
 8006e0e:	4628      	mov	r0, r5
 8006e10:	47b0      	blx	r6
 8006e12:	1c43      	adds	r3, r0, #1
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	d106      	bne.n	8006e26 <__sflush_r+0x62>
 8006e18:	6829      	ldr	r1, [r5, #0]
 8006e1a:	291d      	cmp	r1, #29
 8006e1c:	d82b      	bhi.n	8006e76 <__sflush_r+0xb2>
 8006e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8006ec8 <__sflush_r+0x104>)
 8006e20:	410a      	asrs	r2, r1
 8006e22:	07d6      	lsls	r6, r2, #31
 8006e24:	d427      	bmi.n	8006e76 <__sflush_r+0xb2>
 8006e26:	2200      	movs	r2, #0
 8006e28:	6062      	str	r2, [r4, #4]
 8006e2a:	04d9      	lsls	r1, r3, #19
 8006e2c:	6922      	ldr	r2, [r4, #16]
 8006e2e:	6022      	str	r2, [r4, #0]
 8006e30:	d504      	bpl.n	8006e3c <__sflush_r+0x78>
 8006e32:	1c42      	adds	r2, r0, #1
 8006e34:	d101      	bne.n	8006e3a <__sflush_r+0x76>
 8006e36:	682b      	ldr	r3, [r5, #0]
 8006e38:	b903      	cbnz	r3, 8006e3c <__sflush_r+0x78>
 8006e3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8006e3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e3e:	602f      	str	r7, [r5, #0]
 8006e40:	b1b9      	cbz	r1, 8006e72 <__sflush_r+0xae>
 8006e42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e46:	4299      	cmp	r1, r3
 8006e48:	d002      	beq.n	8006e50 <__sflush_r+0x8c>
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f7ff f9e0 	bl	8006210 <_free_r>
 8006e50:	2300      	movs	r3, #0
 8006e52:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e54:	e00d      	b.n	8006e72 <__sflush_r+0xae>
 8006e56:	2301      	movs	r3, #1
 8006e58:	4628      	mov	r0, r5
 8006e5a:	47b0      	blx	r6
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	1c50      	adds	r0, r2, #1
 8006e60:	d1c9      	bne.n	8006df6 <__sflush_r+0x32>
 8006e62:	682b      	ldr	r3, [r5, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d0c6      	beq.n	8006df6 <__sflush_r+0x32>
 8006e68:	2b1d      	cmp	r3, #29
 8006e6a:	d001      	beq.n	8006e70 <__sflush_r+0xac>
 8006e6c:	2b16      	cmp	r3, #22
 8006e6e:	d11e      	bne.n	8006eae <__sflush_r+0xea>
 8006e70:	602f      	str	r7, [r5, #0]
 8006e72:	2000      	movs	r0, #0
 8006e74:	e022      	b.n	8006ebc <__sflush_r+0xf8>
 8006e76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e7a:	b21b      	sxth	r3, r3
 8006e7c:	e01b      	b.n	8006eb6 <__sflush_r+0xf2>
 8006e7e:	690f      	ldr	r7, [r1, #16]
 8006e80:	2f00      	cmp	r7, #0
 8006e82:	d0f6      	beq.n	8006e72 <__sflush_r+0xae>
 8006e84:	0793      	lsls	r3, r2, #30
 8006e86:	680e      	ldr	r6, [r1, #0]
 8006e88:	bf08      	it	eq
 8006e8a:	694b      	ldreq	r3, [r1, #20]
 8006e8c:	600f      	str	r7, [r1, #0]
 8006e8e:	bf18      	it	ne
 8006e90:	2300      	movne	r3, #0
 8006e92:	eba6 0807 	sub.w	r8, r6, r7
 8006e96:	608b      	str	r3, [r1, #8]
 8006e98:	f1b8 0f00 	cmp.w	r8, #0
 8006e9c:	dde9      	ble.n	8006e72 <__sflush_r+0xae>
 8006e9e:	6a21      	ldr	r1, [r4, #32]
 8006ea0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ea2:	4643      	mov	r3, r8
 8006ea4:	463a      	mov	r2, r7
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	47b0      	blx	r6
 8006eaa:	2800      	cmp	r0, #0
 8006eac:	dc08      	bgt.n	8006ec0 <__sflush_r+0xfc>
 8006eae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eb2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eb6:	81a3      	strh	r3, [r4, #12]
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec0:	4407      	add	r7, r0
 8006ec2:	eba8 0800 	sub.w	r8, r8, r0
 8006ec6:	e7e7      	b.n	8006e98 <__sflush_r+0xd4>
 8006ec8:	dfbffffe 	.word	0xdfbffffe

08006ecc <_fflush_r>:
 8006ecc:	b538      	push	{r3, r4, r5, lr}
 8006ece:	690b      	ldr	r3, [r1, #16]
 8006ed0:	4605      	mov	r5, r0
 8006ed2:	460c      	mov	r4, r1
 8006ed4:	b913      	cbnz	r3, 8006edc <_fflush_r+0x10>
 8006ed6:	2500      	movs	r5, #0
 8006ed8:	4628      	mov	r0, r5
 8006eda:	bd38      	pop	{r3, r4, r5, pc}
 8006edc:	b118      	cbz	r0, 8006ee6 <_fflush_r+0x1a>
 8006ede:	6a03      	ldr	r3, [r0, #32]
 8006ee0:	b90b      	cbnz	r3, 8006ee6 <_fflush_r+0x1a>
 8006ee2:	f7fe fa2f 	bl	8005344 <__sinit>
 8006ee6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d0f3      	beq.n	8006ed6 <_fflush_r+0xa>
 8006eee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ef0:	07d0      	lsls	r0, r2, #31
 8006ef2:	d404      	bmi.n	8006efe <_fflush_r+0x32>
 8006ef4:	0599      	lsls	r1, r3, #22
 8006ef6:	d402      	bmi.n	8006efe <_fflush_r+0x32>
 8006ef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006efa:	f7fe fb3a 	bl	8005572 <__retarget_lock_acquire_recursive>
 8006efe:	4628      	mov	r0, r5
 8006f00:	4621      	mov	r1, r4
 8006f02:	f7ff ff5f 	bl	8006dc4 <__sflush_r>
 8006f06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f08:	07da      	lsls	r2, r3, #31
 8006f0a:	4605      	mov	r5, r0
 8006f0c:	d4e4      	bmi.n	8006ed8 <_fflush_r+0xc>
 8006f0e:	89a3      	ldrh	r3, [r4, #12]
 8006f10:	059b      	lsls	r3, r3, #22
 8006f12:	d4e1      	bmi.n	8006ed8 <_fflush_r+0xc>
 8006f14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f16:	f7fe fb2d 	bl	8005574 <__retarget_lock_release_recursive>
 8006f1a:	e7dd      	b.n	8006ed8 <_fflush_r+0xc>

08006f1c <memmove>:
 8006f1c:	4288      	cmp	r0, r1
 8006f1e:	b510      	push	{r4, lr}
 8006f20:	eb01 0402 	add.w	r4, r1, r2
 8006f24:	d902      	bls.n	8006f2c <memmove+0x10>
 8006f26:	4284      	cmp	r4, r0
 8006f28:	4623      	mov	r3, r4
 8006f2a:	d807      	bhi.n	8006f3c <memmove+0x20>
 8006f2c:	1e43      	subs	r3, r0, #1
 8006f2e:	42a1      	cmp	r1, r4
 8006f30:	d008      	beq.n	8006f44 <memmove+0x28>
 8006f32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f3a:	e7f8      	b.n	8006f2e <memmove+0x12>
 8006f3c:	4402      	add	r2, r0
 8006f3e:	4601      	mov	r1, r0
 8006f40:	428a      	cmp	r2, r1
 8006f42:	d100      	bne.n	8006f46 <memmove+0x2a>
 8006f44:	bd10      	pop	{r4, pc}
 8006f46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006f4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006f4e:	e7f7      	b.n	8006f40 <memmove+0x24>

08006f50 <_sbrk_r>:
 8006f50:	b538      	push	{r3, r4, r5, lr}
 8006f52:	4d06      	ldr	r5, [pc, #24]	@ (8006f6c <_sbrk_r+0x1c>)
 8006f54:	2300      	movs	r3, #0
 8006f56:	4604      	mov	r4, r0
 8006f58:	4608      	mov	r0, r1
 8006f5a:	602b      	str	r3, [r5, #0]
 8006f5c:	f7fb f8a0 	bl	80020a0 <_sbrk>
 8006f60:	1c43      	adds	r3, r0, #1
 8006f62:	d102      	bne.n	8006f6a <_sbrk_r+0x1a>
 8006f64:	682b      	ldr	r3, [r5, #0]
 8006f66:	b103      	cbz	r3, 8006f6a <_sbrk_r+0x1a>
 8006f68:	6023      	str	r3, [r4, #0]
 8006f6a:	bd38      	pop	{r3, r4, r5, pc}
 8006f6c:	20000408 	.word	0x20000408

08006f70 <memcpy>:
 8006f70:	440a      	add	r2, r1
 8006f72:	4291      	cmp	r1, r2
 8006f74:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f78:	d100      	bne.n	8006f7c <memcpy+0xc>
 8006f7a:	4770      	bx	lr
 8006f7c:	b510      	push	{r4, lr}
 8006f7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f82:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f86:	4291      	cmp	r1, r2
 8006f88:	d1f9      	bne.n	8006f7e <memcpy+0xe>
 8006f8a:	bd10      	pop	{r4, pc}

08006f8c <__assert_func>:
 8006f8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f8e:	4614      	mov	r4, r2
 8006f90:	461a      	mov	r2, r3
 8006f92:	4b09      	ldr	r3, [pc, #36]	@ (8006fb8 <__assert_func+0x2c>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4605      	mov	r5, r0
 8006f98:	68d8      	ldr	r0, [r3, #12]
 8006f9a:	b954      	cbnz	r4, 8006fb2 <__assert_func+0x26>
 8006f9c:	4b07      	ldr	r3, [pc, #28]	@ (8006fbc <__assert_func+0x30>)
 8006f9e:	461c      	mov	r4, r3
 8006fa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006fa4:	9100      	str	r1, [sp, #0]
 8006fa6:	462b      	mov	r3, r5
 8006fa8:	4905      	ldr	r1, [pc, #20]	@ (8006fc0 <__assert_func+0x34>)
 8006faa:	f000 f86f 	bl	800708c <fiprintf>
 8006fae:	f000 f87f 	bl	80070b0 <abort>
 8006fb2:	4b04      	ldr	r3, [pc, #16]	@ (8006fc4 <__assert_func+0x38>)
 8006fb4:	e7f4      	b.n	8006fa0 <__assert_func+0x14>
 8006fb6:	bf00      	nop
 8006fb8:	20000018 	.word	0x20000018
 8006fbc:	080078ce 	.word	0x080078ce
 8006fc0:	080078a0 	.word	0x080078a0
 8006fc4:	08007893 	.word	0x08007893

08006fc8 <_calloc_r>:
 8006fc8:	b570      	push	{r4, r5, r6, lr}
 8006fca:	fba1 5402 	umull	r5, r4, r1, r2
 8006fce:	b93c      	cbnz	r4, 8006fe0 <_calloc_r+0x18>
 8006fd0:	4629      	mov	r1, r5
 8006fd2:	f7ff f991 	bl	80062f8 <_malloc_r>
 8006fd6:	4606      	mov	r6, r0
 8006fd8:	b928      	cbnz	r0, 8006fe6 <_calloc_r+0x1e>
 8006fda:	2600      	movs	r6, #0
 8006fdc:	4630      	mov	r0, r6
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	220c      	movs	r2, #12
 8006fe2:	6002      	str	r2, [r0, #0]
 8006fe4:	e7f9      	b.n	8006fda <_calloc_r+0x12>
 8006fe6:	462a      	mov	r2, r5
 8006fe8:	4621      	mov	r1, r4
 8006fea:	f7fe fa44 	bl	8005476 <memset>
 8006fee:	e7f5      	b.n	8006fdc <_calloc_r+0x14>

08006ff0 <__ascii_mbtowc>:
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	b901      	cbnz	r1, 8006ff6 <__ascii_mbtowc+0x6>
 8006ff4:	a901      	add	r1, sp, #4
 8006ff6:	b142      	cbz	r2, 800700a <__ascii_mbtowc+0x1a>
 8006ff8:	b14b      	cbz	r3, 800700e <__ascii_mbtowc+0x1e>
 8006ffa:	7813      	ldrb	r3, [r2, #0]
 8006ffc:	600b      	str	r3, [r1, #0]
 8006ffe:	7812      	ldrb	r2, [r2, #0]
 8007000:	1e10      	subs	r0, r2, #0
 8007002:	bf18      	it	ne
 8007004:	2001      	movne	r0, #1
 8007006:	b002      	add	sp, #8
 8007008:	4770      	bx	lr
 800700a:	4610      	mov	r0, r2
 800700c:	e7fb      	b.n	8007006 <__ascii_mbtowc+0x16>
 800700e:	f06f 0001 	mvn.w	r0, #1
 8007012:	e7f8      	b.n	8007006 <__ascii_mbtowc+0x16>

08007014 <_realloc_r>:
 8007014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007018:	4680      	mov	r8, r0
 800701a:	4615      	mov	r5, r2
 800701c:	460c      	mov	r4, r1
 800701e:	b921      	cbnz	r1, 800702a <_realloc_r+0x16>
 8007020:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007024:	4611      	mov	r1, r2
 8007026:	f7ff b967 	b.w	80062f8 <_malloc_r>
 800702a:	b92a      	cbnz	r2, 8007038 <_realloc_r+0x24>
 800702c:	f7ff f8f0 	bl	8006210 <_free_r>
 8007030:	2400      	movs	r4, #0
 8007032:	4620      	mov	r0, r4
 8007034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007038:	f000 f841 	bl	80070be <_malloc_usable_size_r>
 800703c:	4285      	cmp	r5, r0
 800703e:	4606      	mov	r6, r0
 8007040:	d802      	bhi.n	8007048 <_realloc_r+0x34>
 8007042:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007046:	d8f4      	bhi.n	8007032 <_realloc_r+0x1e>
 8007048:	4629      	mov	r1, r5
 800704a:	4640      	mov	r0, r8
 800704c:	f7ff f954 	bl	80062f8 <_malloc_r>
 8007050:	4607      	mov	r7, r0
 8007052:	2800      	cmp	r0, #0
 8007054:	d0ec      	beq.n	8007030 <_realloc_r+0x1c>
 8007056:	42b5      	cmp	r5, r6
 8007058:	462a      	mov	r2, r5
 800705a:	4621      	mov	r1, r4
 800705c:	bf28      	it	cs
 800705e:	4632      	movcs	r2, r6
 8007060:	f7ff ff86 	bl	8006f70 <memcpy>
 8007064:	4621      	mov	r1, r4
 8007066:	4640      	mov	r0, r8
 8007068:	f7ff f8d2 	bl	8006210 <_free_r>
 800706c:	463c      	mov	r4, r7
 800706e:	e7e0      	b.n	8007032 <_realloc_r+0x1e>

08007070 <__ascii_wctomb>:
 8007070:	4603      	mov	r3, r0
 8007072:	4608      	mov	r0, r1
 8007074:	b141      	cbz	r1, 8007088 <__ascii_wctomb+0x18>
 8007076:	2aff      	cmp	r2, #255	@ 0xff
 8007078:	d904      	bls.n	8007084 <__ascii_wctomb+0x14>
 800707a:	228a      	movs	r2, #138	@ 0x8a
 800707c:	601a      	str	r2, [r3, #0]
 800707e:	f04f 30ff 	mov.w	r0, #4294967295
 8007082:	4770      	bx	lr
 8007084:	700a      	strb	r2, [r1, #0]
 8007086:	2001      	movs	r0, #1
 8007088:	4770      	bx	lr
	...

0800708c <fiprintf>:
 800708c:	b40e      	push	{r1, r2, r3}
 800708e:	b503      	push	{r0, r1, lr}
 8007090:	4601      	mov	r1, r0
 8007092:	ab03      	add	r3, sp, #12
 8007094:	4805      	ldr	r0, [pc, #20]	@ (80070ac <fiprintf+0x20>)
 8007096:	f853 2b04 	ldr.w	r2, [r3], #4
 800709a:	6800      	ldr	r0, [r0, #0]
 800709c:	9301      	str	r3, [sp, #4]
 800709e:	f000 f83f 	bl	8007120 <_vfiprintf_r>
 80070a2:	b002      	add	sp, #8
 80070a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80070a8:	b003      	add	sp, #12
 80070aa:	4770      	bx	lr
 80070ac:	20000018 	.word	0x20000018

080070b0 <abort>:
 80070b0:	b508      	push	{r3, lr}
 80070b2:	2006      	movs	r0, #6
 80070b4:	f000 fa08 	bl	80074c8 <raise>
 80070b8:	2001      	movs	r0, #1
 80070ba:	f7fa ff78 	bl	8001fae <_exit>

080070be <_malloc_usable_size_r>:
 80070be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070c2:	1f18      	subs	r0, r3, #4
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bfbc      	itt	lt
 80070c8:	580b      	ldrlt	r3, [r1, r0]
 80070ca:	18c0      	addlt	r0, r0, r3
 80070cc:	4770      	bx	lr

080070ce <__sfputc_r>:
 80070ce:	6893      	ldr	r3, [r2, #8]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	b410      	push	{r4}
 80070d6:	6093      	str	r3, [r2, #8]
 80070d8:	da08      	bge.n	80070ec <__sfputc_r+0x1e>
 80070da:	6994      	ldr	r4, [r2, #24]
 80070dc:	42a3      	cmp	r3, r4
 80070de:	db01      	blt.n	80070e4 <__sfputc_r+0x16>
 80070e0:	290a      	cmp	r1, #10
 80070e2:	d103      	bne.n	80070ec <__sfputc_r+0x1e>
 80070e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070e8:	f000 b932 	b.w	8007350 <__swbuf_r>
 80070ec:	6813      	ldr	r3, [r2, #0]
 80070ee:	1c58      	adds	r0, r3, #1
 80070f0:	6010      	str	r0, [r2, #0]
 80070f2:	7019      	strb	r1, [r3, #0]
 80070f4:	4608      	mov	r0, r1
 80070f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80070fa:	4770      	bx	lr

080070fc <__sfputs_r>:
 80070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070fe:	4606      	mov	r6, r0
 8007100:	460f      	mov	r7, r1
 8007102:	4614      	mov	r4, r2
 8007104:	18d5      	adds	r5, r2, r3
 8007106:	42ac      	cmp	r4, r5
 8007108:	d101      	bne.n	800710e <__sfputs_r+0x12>
 800710a:	2000      	movs	r0, #0
 800710c:	e007      	b.n	800711e <__sfputs_r+0x22>
 800710e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007112:	463a      	mov	r2, r7
 8007114:	4630      	mov	r0, r6
 8007116:	f7ff ffda 	bl	80070ce <__sfputc_r>
 800711a:	1c43      	adds	r3, r0, #1
 800711c:	d1f3      	bne.n	8007106 <__sfputs_r+0xa>
 800711e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007120 <_vfiprintf_r>:
 8007120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007124:	460d      	mov	r5, r1
 8007126:	b09d      	sub	sp, #116	@ 0x74
 8007128:	4614      	mov	r4, r2
 800712a:	4698      	mov	r8, r3
 800712c:	4606      	mov	r6, r0
 800712e:	b118      	cbz	r0, 8007138 <_vfiprintf_r+0x18>
 8007130:	6a03      	ldr	r3, [r0, #32]
 8007132:	b90b      	cbnz	r3, 8007138 <_vfiprintf_r+0x18>
 8007134:	f7fe f906 	bl	8005344 <__sinit>
 8007138:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800713a:	07d9      	lsls	r1, r3, #31
 800713c:	d405      	bmi.n	800714a <_vfiprintf_r+0x2a>
 800713e:	89ab      	ldrh	r3, [r5, #12]
 8007140:	059a      	lsls	r2, r3, #22
 8007142:	d402      	bmi.n	800714a <_vfiprintf_r+0x2a>
 8007144:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007146:	f7fe fa14 	bl	8005572 <__retarget_lock_acquire_recursive>
 800714a:	89ab      	ldrh	r3, [r5, #12]
 800714c:	071b      	lsls	r3, r3, #28
 800714e:	d501      	bpl.n	8007154 <_vfiprintf_r+0x34>
 8007150:	692b      	ldr	r3, [r5, #16]
 8007152:	b99b      	cbnz	r3, 800717c <_vfiprintf_r+0x5c>
 8007154:	4629      	mov	r1, r5
 8007156:	4630      	mov	r0, r6
 8007158:	f000 f938 	bl	80073cc <__swsetup_r>
 800715c:	b170      	cbz	r0, 800717c <_vfiprintf_r+0x5c>
 800715e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007160:	07dc      	lsls	r4, r3, #31
 8007162:	d504      	bpl.n	800716e <_vfiprintf_r+0x4e>
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	b01d      	add	sp, #116	@ 0x74
 800716a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800716e:	89ab      	ldrh	r3, [r5, #12]
 8007170:	0598      	lsls	r0, r3, #22
 8007172:	d4f7      	bmi.n	8007164 <_vfiprintf_r+0x44>
 8007174:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007176:	f7fe f9fd 	bl	8005574 <__retarget_lock_release_recursive>
 800717a:	e7f3      	b.n	8007164 <_vfiprintf_r+0x44>
 800717c:	2300      	movs	r3, #0
 800717e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007180:	2320      	movs	r3, #32
 8007182:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007186:	f8cd 800c 	str.w	r8, [sp, #12]
 800718a:	2330      	movs	r3, #48	@ 0x30
 800718c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800733c <_vfiprintf_r+0x21c>
 8007190:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007194:	f04f 0901 	mov.w	r9, #1
 8007198:	4623      	mov	r3, r4
 800719a:	469a      	mov	sl, r3
 800719c:	f813 2b01 	ldrb.w	r2, [r3], #1
 80071a0:	b10a      	cbz	r2, 80071a6 <_vfiprintf_r+0x86>
 80071a2:	2a25      	cmp	r2, #37	@ 0x25
 80071a4:	d1f9      	bne.n	800719a <_vfiprintf_r+0x7a>
 80071a6:	ebba 0b04 	subs.w	fp, sl, r4
 80071aa:	d00b      	beq.n	80071c4 <_vfiprintf_r+0xa4>
 80071ac:	465b      	mov	r3, fp
 80071ae:	4622      	mov	r2, r4
 80071b0:	4629      	mov	r1, r5
 80071b2:	4630      	mov	r0, r6
 80071b4:	f7ff ffa2 	bl	80070fc <__sfputs_r>
 80071b8:	3001      	adds	r0, #1
 80071ba:	f000 80a7 	beq.w	800730c <_vfiprintf_r+0x1ec>
 80071be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071c0:	445a      	add	r2, fp
 80071c2:	9209      	str	r2, [sp, #36]	@ 0x24
 80071c4:	f89a 3000 	ldrb.w	r3, [sl]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f000 809f 	beq.w	800730c <_vfiprintf_r+0x1ec>
 80071ce:	2300      	movs	r3, #0
 80071d0:	f04f 32ff 	mov.w	r2, #4294967295
 80071d4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071d8:	f10a 0a01 	add.w	sl, sl, #1
 80071dc:	9304      	str	r3, [sp, #16]
 80071de:	9307      	str	r3, [sp, #28]
 80071e0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80071e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80071e6:	4654      	mov	r4, sl
 80071e8:	2205      	movs	r2, #5
 80071ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071ee:	4853      	ldr	r0, [pc, #332]	@ (800733c <_vfiprintf_r+0x21c>)
 80071f0:	f7f8 fff6 	bl	80001e0 <memchr>
 80071f4:	9a04      	ldr	r2, [sp, #16]
 80071f6:	b9d8      	cbnz	r0, 8007230 <_vfiprintf_r+0x110>
 80071f8:	06d1      	lsls	r1, r2, #27
 80071fa:	bf44      	itt	mi
 80071fc:	2320      	movmi	r3, #32
 80071fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007202:	0713      	lsls	r3, r2, #28
 8007204:	bf44      	itt	mi
 8007206:	232b      	movmi	r3, #43	@ 0x2b
 8007208:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800720c:	f89a 3000 	ldrb.w	r3, [sl]
 8007210:	2b2a      	cmp	r3, #42	@ 0x2a
 8007212:	d015      	beq.n	8007240 <_vfiprintf_r+0x120>
 8007214:	9a07      	ldr	r2, [sp, #28]
 8007216:	4654      	mov	r4, sl
 8007218:	2000      	movs	r0, #0
 800721a:	f04f 0c0a 	mov.w	ip, #10
 800721e:	4621      	mov	r1, r4
 8007220:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007224:	3b30      	subs	r3, #48	@ 0x30
 8007226:	2b09      	cmp	r3, #9
 8007228:	d94b      	bls.n	80072c2 <_vfiprintf_r+0x1a2>
 800722a:	b1b0      	cbz	r0, 800725a <_vfiprintf_r+0x13a>
 800722c:	9207      	str	r2, [sp, #28]
 800722e:	e014      	b.n	800725a <_vfiprintf_r+0x13a>
 8007230:	eba0 0308 	sub.w	r3, r0, r8
 8007234:	fa09 f303 	lsl.w	r3, r9, r3
 8007238:	4313      	orrs	r3, r2
 800723a:	9304      	str	r3, [sp, #16]
 800723c:	46a2      	mov	sl, r4
 800723e:	e7d2      	b.n	80071e6 <_vfiprintf_r+0xc6>
 8007240:	9b03      	ldr	r3, [sp, #12]
 8007242:	1d19      	adds	r1, r3, #4
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	9103      	str	r1, [sp, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	bfbb      	ittet	lt
 800724c:	425b      	neglt	r3, r3
 800724e:	f042 0202 	orrlt.w	r2, r2, #2
 8007252:	9307      	strge	r3, [sp, #28]
 8007254:	9307      	strlt	r3, [sp, #28]
 8007256:	bfb8      	it	lt
 8007258:	9204      	strlt	r2, [sp, #16]
 800725a:	7823      	ldrb	r3, [r4, #0]
 800725c:	2b2e      	cmp	r3, #46	@ 0x2e
 800725e:	d10a      	bne.n	8007276 <_vfiprintf_r+0x156>
 8007260:	7863      	ldrb	r3, [r4, #1]
 8007262:	2b2a      	cmp	r3, #42	@ 0x2a
 8007264:	d132      	bne.n	80072cc <_vfiprintf_r+0x1ac>
 8007266:	9b03      	ldr	r3, [sp, #12]
 8007268:	1d1a      	adds	r2, r3, #4
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	9203      	str	r2, [sp, #12]
 800726e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007272:	3402      	adds	r4, #2
 8007274:	9305      	str	r3, [sp, #20]
 8007276:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800734c <_vfiprintf_r+0x22c>
 800727a:	7821      	ldrb	r1, [r4, #0]
 800727c:	2203      	movs	r2, #3
 800727e:	4650      	mov	r0, sl
 8007280:	f7f8 ffae 	bl	80001e0 <memchr>
 8007284:	b138      	cbz	r0, 8007296 <_vfiprintf_r+0x176>
 8007286:	9b04      	ldr	r3, [sp, #16]
 8007288:	eba0 000a 	sub.w	r0, r0, sl
 800728c:	2240      	movs	r2, #64	@ 0x40
 800728e:	4082      	lsls	r2, r0
 8007290:	4313      	orrs	r3, r2
 8007292:	3401      	adds	r4, #1
 8007294:	9304      	str	r3, [sp, #16]
 8007296:	f814 1b01 	ldrb.w	r1, [r4], #1
 800729a:	4829      	ldr	r0, [pc, #164]	@ (8007340 <_vfiprintf_r+0x220>)
 800729c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80072a0:	2206      	movs	r2, #6
 80072a2:	f7f8 ff9d 	bl	80001e0 <memchr>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d03f      	beq.n	800732a <_vfiprintf_r+0x20a>
 80072aa:	4b26      	ldr	r3, [pc, #152]	@ (8007344 <_vfiprintf_r+0x224>)
 80072ac:	bb1b      	cbnz	r3, 80072f6 <_vfiprintf_r+0x1d6>
 80072ae:	9b03      	ldr	r3, [sp, #12]
 80072b0:	3307      	adds	r3, #7
 80072b2:	f023 0307 	bic.w	r3, r3, #7
 80072b6:	3308      	adds	r3, #8
 80072b8:	9303      	str	r3, [sp, #12]
 80072ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072bc:	443b      	add	r3, r7
 80072be:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c0:	e76a      	b.n	8007198 <_vfiprintf_r+0x78>
 80072c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80072c6:	460c      	mov	r4, r1
 80072c8:	2001      	movs	r0, #1
 80072ca:	e7a8      	b.n	800721e <_vfiprintf_r+0xfe>
 80072cc:	2300      	movs	r3, #0
 80072ce:	3401      	adds	r4, #1
 80072d0:	9305      	str	r3, [sp, #20]
 80072d2:	4619      	mov	r1, r3
 80072d4:	f04f 0c0a 	mov.w	ip, #10
 80072d8:	4620      	mov	r0, r4
 80072da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072de:	3a30      	subs	r2, #48	@ 0x30
 80072e0:	2a09      	cmp	r2, #9
 80072e2:	d903      	bls.n	80072ec <_vfiprintf_r+0x1cc>
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d0c6      	beq.n	8007276 <_vfiprintf_r+0x156>
 80072e8:	9105      	str	r1, [sp, #20]
 80072ea:	e7c4      	b.n	8007276 <_vfiprintf_r+0x156>
 80072ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80072f0:	4604      	mov	r4, r0
 80072f2:	2301      	movs	r3, #1
 80072f4:	e7f0      	b.n	80072d8 <_vfiprintf_r+0x1b8>
 80072f6:	ab03      	add	r3, sp, #12
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	462a      	mov	r2, r5
 80072fc:	4b12      	ldr	r3, [pc, #72]	@ (8007348 <_vfiprintf_r+0x228>)
 80072fe:	a904      	add	r1, sp, #16
 8007300:	4630      	mov	r0, r6
 8007302:	f7fd fbdb 	bl	8004abc <_printf_float>
 8007306:	4607      	mov	r7, r0
 8007308:	1c78      	adds	r0, r7, #1
 800730a:	d1d6      	bne.n	80072ba <_vfiprintf_r+0x19a>
 800730c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800730e:	07d9      	lsls	r1, r3, #31
 8007310:	d405      	bmi.n	800731e <_vfiprintf_r+0x1fe>
 8007312:	89ab      	ldrh	r3, [r5, #12]
 8007314:	059a      	lsls	r2, r3, #22
 8007316:	d402      	bmi.n	800731e <_vfiprintf_r+0x1fe>
 8007318:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800731a:	f7fe f92b 	bl	8005574 <__retarget_lock_release_recursive>
 800731e:	89ab      	ldrh	r3, [r5, #12]
 8007320:	065b      	lsls	r3, r3, #25
 8007322:	f53f af1f 	bmi.w	8007164 <_vfiprintf_r+0x44>
 8007326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007328:	e71e      	b.n	8007168 <_vfiprintf_r+0x48>
 800732a:	ab03      	add	r3, sp, #12
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	462a      	mov	r2, r5
 8007330:	4b05      	ldr	r3, [pc, #20]	@ (8007348 <_vfiprintf_r+0x228>)
 8007332:	a904      	add	r1, sp, #16
 8007334:	4630      	mov	r0, r6
 8007336:	f7fd fe59 	bl	8004fec <_printf_i>
 800733a:	e7e4      	b.n	8007306 <_vfiprintf_r+0x1e6>
 800733c:	08007878 	.word	0x08007878
 8007340:	08007882 	.word	0x08007882
 8007344:	08004abd 	.word	0x08004abd
 8007348:	080070fd 	.word	0x080070fd
 800734c:	0800787e 	.word	0x0800787e

08007350 <__swbuf_r>:
 8007350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007352:	460e      	mov	r6, r1
 8007354:	4614      	mov	r4, r2
 8007356:	4605      	mov	r5, r0
 8007358:	b118      	cbz	r0, 8007362 <__swbuf_r+0x12>
 800735a:	6a03      	ldr	r3, [r0, #32]
 800735c:	b90b      	cbnz	r3, 8007362 <__swbuf_r+0x12>
 800735e:	f7fd fff1 	bl	8005344 <__sinit>
 8007362:	69a3      	ldr	r3, [r4, #24]
 8007364:	60a3      	str	r3, [r4, #8]
 8007366:	89a3      	ldrh	r3, [r4, #12]
 8007368:	071a      	lsls	r2, r3, #28
 800736a:	d501      	bpl.n	8007370 <__swbuf_r+0x20>
 800736c:	6923      	ldr	r3, [r4, #16]
 800736e:	b943      	cbnz	r3, 8007382 <__swbuf_r+0x32>
 8007370:	4621      	mov	r1, r4
 8007372:	4628      	mov	r0, r5
 8007374:	f000 f82a 	bl	80073cc <__swsetup_r>
 8007378:	b118      	cbz	r0, 8007382 <__swbuf_r+0x32>
 800737a:	f04f 37ff 	mov.w	r7, #4294967295
 800737e:	4638      	mov	r0, r7
 8007380:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007382:	6823      	ldr	r3, [r4, #0]
 8007384:	6922      	ldr	r2, [r4, #16]
 8007386:	1a98      	subs	r0, r3, r2
 8007388:	6963      	ldr	r3, [r4, #20]
 800738a:	b2f6      	uxtb	r6, r6
 800738c:	4283      	cmp	r3, r0
 800738e:	4637      	mov	r7, r6
 8007390:	dc05      	bgt.n	800739e <__swbuf_r+0x4e>
 8007392:	4621      	mov	r1, r4
 8007394:	4628      	mov	r0, r5
 8007396:	f7ff fd99 	bl	8006ecc <_fflush_r>
 800739a:	2800      	cmp	r0, #0
 800739c:	d1ed      	bne.n	800737a <__swbuf_r+0x2a>
 800739e:	68a3      	ldr	r3, [r4, #8]
 80073a0:	3b01      	subs	r3, #1
 80073a2:	60a3      	str	r3, [r4, #8]
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	1c5a      	adds	r2, r3, #1
 80073a8:	6022      	str	r2, [r4, #0]
 80073aa:	701e      	strb	r6, [r3, #0]
 80073ac:	6962      	ldr	r2, [r4, #20]
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	429a      	cmp	r2, r3
 80073b2:	d004      	beq.n	80073be <__swbuf_r+0x6e>
 80073b4:	89a3      	ldrh	r3, [r4, #12]
 80073b6:	07db      	lsls	r3, r3, #31
 80073b8:	d5e1      	bpl.n	800737e <__swbuf_r+0x2e>
 80073ba:	2e0a      	cmp	r6, #10
 80073bc:	d1df      	bne.n	800737e <__swbuf_r+0x2e>
 80073be:	4621      	mov	r1, r4
 80073c0:	4628      	mov	r0, r5
 80073c2:	f7ff fd83 	bl	8006ecc <_fflush_r>
 80073c6:	2800      	cmp	r0, #0
 80073c8:	d0d9      	beq.n	800737e <__swbuf_r+0x2e>
 80073ca:	e7d6      	b.n	800737a <__swbuf_r+0x2a>

080073cc <__swsetup_r>:
 80073cc:	b538      	push	{r3, r4, r5, lr}
 80073ce:	4b29      	ldr	r3, [pc, #164]	@ (8007474 <__swsetup_r+0xa8>)
 80073d0:	4605      	mov	r5, r0
 80073d2:	6818      	ldr	r0, [r3, #0]
 80073d4:	460c      	mov	r4, r1
 80073d6:	b118      	cbz	r0, 80073e0 <__swsetup_r+0x14>
 80073d8:	6a03      	ldr	r3, [r0, #32]
 80073da:	b90b      	cbnz	r3, 80073e0 <__swsetup_r+0x14>
 80073dc:	f7fd ffb2 	bl	8005344 <__sinit>
 80073e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073e4:	0719      	lsls	r1, r3, #28
 80073e6:	d422      	bmi.n	800742e <__swsetup_r+0x62>
 80073e8:	06da      	lsls	r2, r3, #27
 80073ea:	d407      	bmi.n	80073fc <__swsetup_r+0x30>
 80073ec:	2209      	movs	r2, #9
 80073ee:	602a      	str	r2, [r5, #0]
 80073f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80073f4:	81a3      	strh	r3, [r4, #12]
 80073f6:	f04f 30ff 	mov.w	r0, #4294967295
 80073fa:	e033      	b.n	8007464 <__swsetup_r+0x98>
 80073fc:	0758      	lsls	r0, r3, #29
 80073fe:	d512      	bpl.n	8007426 <__swsetup_r+0x5a>
 8007400:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007402:	b141      	cbz	r1, 8007416 <__swsetup_r+0x4a>
 8007404:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007408:	4299      	cmp	r1, r3
 800740a:	d002      	beq.n	8007412 <__swsetup_r+0x46>
 800740c:	4628      	mov	r0, r5
 800740e:	f7fe feff 	bl	8006210 <_free_r>
 8007412:	2300      	movs	r3, #0
 8007414:	6363      	str	r3, [r4, #52]	@ 0x34
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800741c:	81a3      	strh	r3, [r4, #12]
 800741e:	2300      	movs	r3, #0
 8007420:	6063      	str	r3, [r4, #4]
 8007422:	6923      	ldr	r3, [r4, #16]
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	89a3      	ldrh	r3, [r4, #12]
 8007428:	f043 0308 	orr.w	r3, r3, #8
 800742c:	81a3      	strh	r3, [r4, #12]
 800742e:	6923      	ldr	r3, [r4, #16]
 8007430:	b94b      	cbnz	r3, 8007446 <__swsetup_r+0x7a>
 8007432:	89a3      	ldrh	r3, [r4, #12]
 8007434:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800743c:	d003      	beq.n	8007446 <__swsetup_r+0x7a>
 800743e:	4621      	mov	r1, r4
 8007440:	4628      	mov	r0, r5
 8007442:	f000 f883 	bl	800754c <__smakebuf_r>
 8007446:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800744a:	f013 0201 	ands.w	r2, r3, #1
 800744e:	d00a      	beq.n	8007466 <__swsetup_r+0x9a>
 8007450:	2200      	movs	r2, #0
 8007452:	60a2      	str	r2, [r4, #8]
 8007454:	6962      	ldr	r2, [r4, #20]
 8007456:	4252      	negs	r2, r2
 8007458:	61a2      	str	r2, [r4, #24]
 800745a:	6922      	ldr	r2, [r4, #16]
 800745c:	b942      	cbnz	r2, 8007470 <__swsetup_r+0xa4>
 800745e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007462:	d1c5      	bne.n	80073f0 <__swsetup_r+0x24>
 8007464:	bd38      	pop	{r3, r4, r5, pc}
 8007466:	0799      	lsls	r1, r3, #30
 8007468:	bf58      	it	pl
 800746a:	6962      	ldrpl	r2, [r4, #20]
 800746c:	60a2      	str	r2, [r4, #8]
 800746e:	e7f4      	b.n	800745a <__swsetup_r+0x8e>
 8007470:	2000      	movs	r0, #0
 8007472:	e7f7      	b.n	8007464 <__swsetup_r+0x98>
 8007474:	20000018 	.word	0x20000018

08007478 <_raise_r>:
 8007478:	291f      	cmp	r1, #31
 800747a:	b538      	push	{r3, r4, r5, lr}
 800747c:	4605      	mov	r5, r0
 800747e:	460c      	mov	r4, r1
 8007480:	d904      	bls.n	800748c <_raise_r+0x14>
 8007482:	2316      	movs	r3, #22
 8007484:	6003      	str	r3, [r0, #0]
 8007486:	f04f 30ff 	mov.w	r0, #4294967295
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800748e:	b112      	cbz	r2, 8007496 <_raise_r+0x1e>
 8007490:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007494:	b94b      	cbnz	r3, 80074aa <_raise_r+0x32>
 8007496:	4628      	mov	r0, r5
 8007498:	f000 f830 	bl	80074fc <_getpid_r>
 800749c:	4622      	mov	r2, r4
 800749e:	4601      	mov	r1, r0
 80074a0:	4628      	mov	r0, r5
 80074a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80074a6:	f000 b817 	b.w	80074d8 <_kill_r>
 80074aa:	2b01      	cmp	r3, #1
 80074ac:	d00a      	beq.n	80074c4 <_raise_r+0x4c>
 80074ae:	1c59      	adds	r1, r3, #1
 80074b0:	d103      	bne.n	80074ba <_raise_r+0x42>
 80074b2:	2316      	movs	r3, #22
 80074b4:	6003      	str	r3, [r0, #0]
 80074b6:	2001      	movs	r0, #1
 80074b8:	e7e7      	b.n	800748a <_raise_r+0x12>
 80074ba:	2100      	movs	r1, #0
 80074bc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80074c0:	4620      	mov	r0, r4
 80074c2:	4798      	blx	r3
 80074c4:	2000      	movs	r0, #0
 80074c6:	e7e0      	b.n	800748a <_raise_r+0x12>

080074c8 <raise>:
 80074c8:	4b02      	ldr	r3, [pc, #8]	@ (80074d4 <raise+0xc>)
 80074ca:	4601      	mov	r1, r0
 80074cc:	6818      	ldr	r0, [r3, #0]
 80074ce:	f7ff bfd3 	b.w	8007478 <_raise_r>
 80074d2:	bf00      	nop
 80074d4:	20000018 	.word	0x20000018

080074d8 <_kill_r>:
 80074d8:	b538      	push	{r3, r4, r5, lr}
 80074da:	4d07      	ldr	r5, [pc, #28]	@ (80074f8 <_kill_r+0x20>)
 80074dc:	2300      	movs	r3, #0
 80074de:	4604      	mov	r4, r0
 80074e0:	4608      	mov	r0, r1
 80074e2:	4611      	mov	r1, r2
 80074e4:	602b      	str	r3, [r5, #0]
 80074e6:	f7fa fd52 	bl	8001f8e <_kill>
 80074ea:	1c43      	adds	r3, r0, #1
 80074ec:	d102      	bne.n	80074f4 <_kill_r+0x1c>
 80074ee:	682b      	ldr	r3, [r5, #0]
 80074f0:	b103      	cbz	r3, 80074f4 <_kill_r+0x1c>
 80074f2:	6023      	str	r3, [r4, #0]
 80074f4:	bd38      	pop	{r3, r4, r5, pc}
 80074f6:	bf00      	nop
 80074f8:	20000408 	.word	0x20000408

080074fc <_getpid_r>:
 80074fc:	f7fa bd3f 	b.w	8001f7e <_getpid>

08007500 <__swhatbuf_r>:
 8007500:	b570      	push	{r4, r5, r6, lr}
 8007502:	460c      	mov	r4, r1
 8007504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007508:	2900      	cmp	r1, #0
 800750a:	b096      	sub	sp, #88	@ 0x58
 800750c:	4615      	mov	r5, r2
 800750e:	461e      	mov	r6, r3
 8007510:	da0d      	bge.n	800752e <__swhatbuf_r+0x2e>
 8007512:	89a3      	ldrh	r3, [r4, #12]
 8007514:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007518:	f04f 0100 	mov.w	r1, #0
 800751c:	bf14      	ite	ne
 800751e:	2340      	movne	r3, #64	@ 0x40
 8007520:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007524:	2000      	movs	r0, #0
 8007526:	6031      	str	r1, [r6, #0]
 8007528:	602b      	str	r3, [r5, #0]
 800752a:	b016      	add	sp, #88	@ 0x58
 800752c:	bd70      	pop	{r4, r5, r6, pc}
 800752e:	466a      	mov	r2, sp
 8007530:	f000 f848 	bl	80075c4 <_fstat_r>
 8007534:	2800      	cmp	r0, #0
 8007536:	dbec      	blt.n	8007512 <__swhatbuf_r+0x12>
 8007538:	9901      	ldr	r1, [sp, #4]
 800753a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800753e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007542:	4259      	negs	r1, r3
 8007544:	4159      	adcs	r1, r3
 8007546:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800754a:	e7eb      	b.n	8007524 <__swhatbuf_r+0x24>

0800754c <__smakebuf_r>:
 800754c:	898b      	ldrh	r3, [r1, #12]
 800754e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007550:	079d      	lsls	r5, r3, #30
 8007552:	4606      	mov	r6, r0
 8007554:	460c      	mov	r4, r1
 8007556:	d507      	bpl.n	8007568 <__smakebuf_r+0x1c>
 8007558:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800755c:	6023      	str	r3, [r4, #0]
 800755e:	6123      	str	r3, [r4, #16]
 8007560:	2301      	movs	r3, #1
 8007562:	6163      	str	r3, [r4, #20]
 8007564:	b003      	add	sp, #12
 8007566:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007568:	ab01      	add	r3, sp, #4
 800756a:	466a      	mov	r2, sp
 800756c:	f7ff ffc8 	bl	8007500 <__swhatbuf_r>
 8007570:	9f00      	ldr	r7, [sp, #0]
 8007572:	4605      	mov	r5, r0
 8007574:	4639      	mov	r1, r7
 8007576:	4630      	mov	r0, r6
 8007578:	f7fe febe 	bl	80062f8 <_malloc_r>
 800757c:	b948      	cbnz	r0, 8007592 <__smakebuf_r+0x46>
 800757e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007582:	059a      	lsls	r2, r3, #22
 8007584:	d4ee      	bmi.n	8007564 <__smakebuf_r+0x18>
 8007586:	f023 0303 	bic.w	r3, r3, #3
 800758a:	f043 0302 	orr.w	r3, r3, #2
 800758e:	81a3      	strh	r3, [r4, #12]
 8007590:	e7e2      	b.n	8007558 <__smakebuf_r+0xc>
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	6020      	str	r0, [r4, #0]
 8007596:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800759a:	81a3      	strh	r3, [r4, #12]
 800759c:	9b01      	ldr	r3, [sp, #4]
 800759e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80075a2:	b15b      	cbz	r3, 80075bc <__smakebuf_r+0x70>
 80075a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075a8:	4630      	mov	r0, r6
 80075aa:	f000 f81d 	bl	80075e8 <_isatty_r>
 80075ae:	b128      	cbz	r0, 80075bc <__smakebuf_r+0x70>
 80075b0:	89a3      	ldrh	r3, [r4, #12]
 80075b2:	f023 0303 	bic.w	r3, r3, #3
 80075b6:	f043 0301 	orr.w	r3, r3, #1
 80075ba:	81a3      	strh	r3, [r4, #12]
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	431d      	orrs	r5, r3
 80075c0:	81a5      	strh	r5, [r4, #12]
 80075c2:	e7cf      	b.n	8007564 <__smakebuf_r+0x18>

080075c4 <_fstat_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	4d07      	ldr	r5, [pc, #28]	@ (80075e4 <_fstat_r+0x20>)
 80075c8:	2300      	movs	r3, #0
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	4611      	mov	r1, r2
 80075d0:	602b      	str	r3, [r5, #0]
 80075d2:	f7fa fd3c 	bl	800204e <_fstat>
 80075d6:	1c43      	adds	r3, r0, #1
 80075d8:	d102      	bne.n	80075e0 <_fstat_r+0x1c>
 80075da:	682b      	ldr	r3, [r5, #0]
 80075dc:	b103      	cbz	r3, 80075e0 <_fstat_r+0x1c>
 80075de:	6023      	str	r3, [r4, #0]
 80075e0:	bd38      	pop	{r3, r4, r5, pc}
 80075e2:	bf00      	nop
 80075e4:	20000408 	.word	0x20000408

080075e8 <_isatty_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	4d06      	ldr	r5, [pc, #24]	@ (8007604 <_isatty_r+0x1c>)
 80075ec:	2300      	movs	r3, #0
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	602b      	str	r3, [r5, #0]
 80075f4:	f7fa fd3b 	bl	800206e <_isatty>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_isatty_r+0x1a>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_isatty_r+0x1a>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20000408 	.word	0x20000408

08007608 <_init>:
 8007608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800760a:	bf00      	nop
 800760c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800760e:	bc08      	pop	{r3}
 8007610:	469e      	mov	lr, r3
 8007612:	4770      	bx	lr

08007614 <_fini>:
 8007614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007616:	bf00      	nop
 8007618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800761a:	bc08      	pop	{r3}
 800761c:	469e      	mov	lr, r3
 800761e:	4770      	bx	lr
